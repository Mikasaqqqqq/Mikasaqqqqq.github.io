<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>概率论与数理统计</title>
    <link href="/2025/09/16/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    <url>/2025/09/16/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p><strong>reference</strong>：《概率论与数理统计》 陈希孺</p><h3 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h3><h4 id="概率是什么"><a href="#概率是什么" class="headerlink" title="概率是什么"></a>概率是什么</h4><p>​在概率论上，有时把单一的实验结果称为一个“基本事件”。这样，一个或一些基本事件并在一起，就构成一个事件，而基本事件本身也是事件。</p><p>​<strong>定义 1.1</strong>设一个试验有 $N$ 种等可能的结果，而事件 $E$ 恰包含其中的 $M$ 个结果，则事件 $E$ 的概率，记为 $P(E)$ ，定义为<br>$$<br>P(E)&#x3D;M&#x2F;N\tag{1.1}<br>$$</p><h4 id="古典概率计算"><a href="#古典概率计算" class="headerlink" title="古典概率计算"></a>古典概率计算</h4><p>​有用的公式<br>$$<br>C_{m+n}^k\sum_{i&#x3D;0}^kC_{m}^{i}C_n^{k-i}\tag{1.2}<br>$$<br>$$<br>\sum_{r&#x3D;0}^{n-m}C_{n-1+r}^r&#x3D;C_{2n-m}{n}\tag{1.3}<br>$$</p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="事件的运算、条件概率与独立性"><a href="#事件的运算、条件概率与独立性" class="headerlink" title="事件的运算、条件概率与独立性"></a>事件的运算、条件概率与独立性</h4><p>​在同一试验下的两事件 $A$ 和 $B$ ，如果当 $A$ 发生时 $B$ 必发生，则称 $A$ 蕴含 $B$ ，或者说 $B$ 包含 $A$ ，记为  $A\sub B$ 。</p><table><thead><tr><th align="center">和（并）</th><th align="center">积（交）</th><th align="center">差</th></tr></thead><tbody><tr><td align="center">$A+B$ 或 $A\cup B$</td><td align="center">$AB$ 或 $A\cap B$</td><td align="center">$A-B&#x3D;A\bar B$</td></tr></tbody></table><p>满足交换律、结合律和分配律<br>$$ {aligned}<br>A+B&#x3D;B+A,\ AB&#x3D;BA \<br>(AB)C&#x3D;A(BC) \<br>A(B-C)&#x3D;AB-AC<br>$$<br>​<strong>定义 3.1</strong>设有两事件 $A,B$ 而 $P(B)\neq 0$ 。则“在给定 $B$ 发生的条件下 $A$ 的条件概率”，记为 $P(A|B)$ ，定义为<br>$$<br>P(A|B)&#x3D;P(AB)&#x2F;P(B) \tag{1.4}<br>$$<br>​<strong>独立性</strong>若事件 $A,B$ 相互独立，则满足<br>$$<br>P(AB)&#x3D;P(A)P(B) \tag{1.5}<br>$$<br>​可以推广到有限个或无限个事件的情况。设 $A_1,A_2,\cdots$ 为有限或无限个事件。<br>$$<br>P(A_{i_1}A_{i_2}\cdots A_{i_m})&#x3D;P(A_{i_1})P(A_{i_2})\cdots P(A_{i_m}) \tag{1.6}<br>$$<br>则称事件 $A_{i_1}A_{i_2}\cdots A_{i_m}$ 相互独立。注意：相互独立 $\Rightarrow$ 两两独立。</p>]]></content>
    
    
    <categories>
      
      <category>Physics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Classical mechanics</title>
    <link href="/2025/09/08/Classical%20mechanics/"/>
    <url>/2025/09/08/Classical%20mechanics/</url>
    
    <content type="html"><![CDATA[<h3 id="Classical-mechanics"><a href="#Classical-mechanics" class="headerlink" title="Classical mechanics"></a>Classical mechanics</h3><p>references:</p><p>​[1] 杨望,理论力学讲义<br>​[2] H.Goldstein, C. Poole, J.Safko, <em>Classical mechanics</em> , 高等教育出版社<br>​[3] 高显，经典力学，科学出版社<br>​[4] 金尚年，理论力学（第三版），高等教育出版社</p><hr><h4 id="Chapter-0-多元函数的导数和微分"><a href="#Chapter-0-多元函数的导数和微分" class="headerlink" title="Chapter 0 多元函数的导数和微分"></a>Chapter 0 多元函数的导数和微分</h4><p>​设 $f\left(x_1,\dots,x_n\right)$ 是 $n$ 个变量 $x_1,\dots,x_n$ 的光滑函数，其中 $x_i\in \R,1\leq i\leq n,f\left(x_1,\dots,x_n\right)\in \R$ .我们采取下述记号，<br>$$<br>f[x_j]&#x3D;f\left(x_1,\dots,x_n\right)<br>$$<br>​那么偏导数可以写为<br>$$<br>\frac{\partial f}{\partial x_i}[x_j]&#x3D;\lim_{\epsilon \to 0}\frac{f[x_j+\epsilon\delta_{ij}]-f[x_j]}{\epsilon}\tag{0.1}<br>$$<br>​当自变量有如下变换时<br>$$<br>x_1\to x_1+\Delta x_1,x_2\to x_2+\Delta x_2,\dots,x_n\to x_n+\Delta x_n<br>$$</p><p>（全）微分可以写成<br>$$<br>\begin{equation*}<br>\begin{aligned}<br>\Delta f&amp;&#x3D;f[x_j+\Delta x_j]-f[x_j]\<br>&amp;&#x3D;\sum_{i&#x3D;1}^n\frac{\partial f}{\partial x_i}[x_j]\Delta x_i+O\left(\Delta x_i\Delta x_j\right)<br>\end{aligned}\tag{0.2}<br>\end{equation*}<br>$$</p><h3 id="Chapter-1-变分法"><a href="#Chapter-1-变分法" class="headerlink" title="Chapter 1 变分法"></a>Chapter 1 变分法</h3><h4 id="1-1-泛函"><a href="#1-1-泛函" class="headerlink" title="1.1 泛函"></a>1.1 泛函</h4><p>​函数就是具体的映射关系<br>$$<br>f:t\mapsto y&#x3D;f\left(t\right)\tag{1.1}<br>$$</p><h5 id="1-1-1-泛函的概念"><a href="#1-1-1-泛函的概念" class="headerlink" title="1.1.1 泛函的概念"></a>1.1.1 泛函的概念</h5><p>​泛函，即函数到数的影射，记函数集合 $\mathcal{F}&#x3D;{f_1,f_2,f_3,\cdots}$ .函数 $f$ 的泛函记作 $S[f]$ ，即<br>$$<br>f\mapsto S&#x3D;S[f],\quad\mathcal{F}\to \mathbf{C}\tag{1.2}<br>$$</p><h5 id="1-1-2-泛函的具体形式"><a href="#1-1-2-泛函的具体形式" class="headerlink" title="1.1.2 泛函的具体形式"></a>1.1.2 泛函的具体形式</h5><p>​三维空间中曲面方程记为 $z&#x3D;\phi\left(x,y\right)$ ，则曲面面积 $A$ 为二元函数 $\phi\left(x,y\right)$ 的泛函<br>$$<br>A&#x3D;A[\phi]&#x3D;\iint_{区域}\mathrm{d}x\mathrm{d}y\sqrt{1+\left(\frac{\partial\phi}{\partial x}\right)^2+\left(\frac{\partial \phi}{\partial y}\right)^2}<br>$$<br>​经典力学种所遇到的泛函通常可以写成积分形式：<br>$$<br>S[f]&#x3D;\int_{t_1}^{t_2}\mathrm{d}tL\left(t,f\left(t\right),f’\left(t\right),f’’\left(t\right),\cdots\right)\tag{1.3}<br>$$<br>这里的被积函数 $L&#x3D;L\left(t,f\left(t\right),f’\left(t\right),f’’\left(t\right),\cdots\right)$ 是函数 $f\left(t\right)$ 及其导数的一般函数.</p><h4 id="1-2-变分"><a href="#1-2-变分" class="headerlink" title="1.2 变分"></a>1.2 变分</h4><h5 id="1-2-1-变分的概念"><a href="#1-2-1-变分的概念" class="headerlink" title="1.2.1 变分的概念"></a>1.2.1 变分的概念</h5><p>​泛函为函数到数的映射，函数本身的无穷小变化，以及由之引起的泛函的变化即变分.若函数 $f\left(t\right)$ 变成了另外一个函数 $f\left(t\right)\to \tilde{f}\left(t\right)$ ，且假设两者相差无穷小，则函数 $f\left(t\right)$ 的变分 $\delta f$ 定义为<br>$$<br>\boxed{\delta f\left(t\right):&#x3D;\tilde{f}\left(t\right)-f\left(t\right)} \tag{1.4}<br>$$<br>​函数的变分 $\delta f$ 是因为函数本身发生了变化，而与自变量 $t$ 无关<br>$$<br>f\left(t\right)\to\tilde{f}\left(t\right)\equiv\left(f+\delta f\right)\left(t\right)&#x3D;f\left(t\right)+\delta f\left(t\right)\tag{1.5}<br>$$</p><h5 id="1-2-2-变分的运算规则"><a href="#1-2-2-变分的运算规则" class="headerlink" title="1.2.2 变分的运算规则"></a>1.2.2 变分的运算规则</h5><p>​函数的变分和微分同为无穷小变化，形式上的运算规则基本相同.<br>$$<br>\begin{equation*}<br>\begin{aligned}<br>&amp;\delta\left(f^n\right)&#x3D;nf^{n-1}\delta f\<br>\delta\left(af_1+bf_2\right)&#x3D;a\delta f_1&amp;+b\delta f_2,\quad \delta\left(f_1f_2\right)&#x3D;\left(\delta f_1\right)\delta f_2+\delta f_1\left(\delta f_2\right)<br>\end{aligned}<br>\end{equation*}\tag{1.6}<br>$$<br>​另一个重要且非常有用的性质是，变分和微分可以交换顺序.<br>$$<br>\boxed{\delta\left(\mathrm df\right)&#x3D;\mathrm d\left(\delta f\right)}\tag{1.7}<br>$$</p><blockquote><p>$proof$<br>$$<br>\begin{aligned}<br>\tilde{f}\left(t+\mathrm dt\right)-f\left(t\right)&amp;&#x3D;\tilde{f}\left(t+\mathrm dt\right)-\tilde f\left(t\right)+\tilde f\left(t\right)-f\left(t\right)&#x3D;\delta f+\mathrm df+\mathrm d\left(\delta f\right)\<br>&amp;&#x3D;\tilde{f}\left(t+\mathrm dt\right)-f\left(t+\mathrm dt\right)+f\left(t+\mathrm dt\right)-f\left(t\right)&#x3D;\delta f+\mathrm df+\delta\left(\mathrm df\right)<br>\end{aligned}<br>$$</p></blockquote><p>因此可以推出<br>$$<br>\boxed{\delta\left(\frac{\mathrm d}{\mathrm dt}f\left(t\right)\right)&#x3D;\frac{\mathrm d}{\mathrm dt}\left(\delta f\left(t\right)\right)}\tag{1.8}<br>$$</p><h4 id="1-3-泛函导数"><a href="#1-3-泛函导数" class="headerlink" title="1.3 泛函导数"></a>1.3 泛函导数</h4><h5 id="1-3-1-泛函导数的概念"><a href="#1-3-1-泛函导数的概念" class="headerlink" title="1.3.1 泛函导数的概念"></a>1.3.1 泛函导数的概念</h5><p>​对于一阶导数<br>$$<br>\mathrm d f\left(t\right)&#x3D;\frac{\mathrm d f\left(t\right)}{\mathrm dt}\mathrm dt<br>$$<br>​类比普通函数的导数.对于泛函 $S[f]$ ，其变分是由函数的变分引起的：<br>$$<br>\begin{equation}<br>\begin{aligned}<br>S[\tilde f]&#x3D;&amp;S[f+\epsilon\delta f]\<br>&#x3D;&amp;S[f]+\epsilon\delta S[f]+\frac{\epsilon^2}{2}\delta^2S[f]+\frac{\epsilon^3}{3!}\delta^3S[f]+\cdots<br>\end{aligned}<br>\end{equation}\tag{1.9}<br>$$<br>定义<br>$$<br>\boxed{\delta S[f]&#x3D;\int\mathrm dt\frac{\delta S}{\delta f\left(t\right)}\delta f\left(t\right)}\tag{1.10}<br>$$<br>其中 $\delta S$ 是泛函的一阶变分， $\frac{\delta S}{\delta f\left(t\right)}$ 即<strong>一阶泛函导数</strong>.</p><p>​类比函数的高阶导数，高阶泛函导数定义为<br>$$<br>\delta^2S[f]:&#x3D;\int\mathrm dt_1\int \mathrm dt_2\frac{\delta ^2 S}{\delta f\left(t_1\right)\delta f\left(t_2\right)}\delta f\left(t_1\right)\delta f\left(t_2\right) \tag{1.11}<br>$$</p><h5 id="1-3-2-泛函导数的操作定义"><a href="#1-3-2-泛函导数的操作定义" class="headerlink" title="1.3.2 泛函导数的操作定义"></a>1.3.2 泛函导数的操作定义</h5><p>​将 $S[f+\epsilon\delta f]$ 视为 $\epsilon$ 的普通函数，将式（1.9）视作关于 $\epsilon$ 的普通泰勒展开：<br>$$<br>S[f+\epsilon\delta f]&#x3D;S[f]+\left.\epsilon\frac{\mathrm d}{\mathrm d \epsilon}S[f+\epsilon\delta f]\right |<em>{\epsilon&#x3D;0}+\left.\frac{\epsilon^2}{2}\frac{\mathrm d^2}{\mathrm d \epsilon^2}S[f+\epsilon\delta f]\right |</em>{\epsilon&#x3D;0}+\cdots \tag{1.12}<br>$$<br>即有<br>$$<br>\boxed{\delta S&#x3D;\left.\frac{\mathrm d}{\mathrm d \epsilon}S[f+\epsilon\delta f]\right |<em>{\epsilon&#x3D;0}&#x3D;\int\mathrm dt\frac{\delta S}{\delta f\left(t\right)}\delta f\left(t\right)}\tag{1.13}<br>$$<br>​对于式（1.3）形式的泛函<br>$$<br>S[f+\delta f]&#x3D;\int</em>{t_1}^{t_2}\mathrm dtL\left(t,f+\delta f,f’+\delta f’,\cdots\right)<br>$$<br>可以得到<br>$$<br>\begin{equation}<br>\begin{aligned}<br>\delta S&amp;&#x3D;\int_{t_1}^{t_2}\mathrm dt\left .\frac{\mathrm d}{\mathrm d\epsilon}L\left(t,f+\epsilon\delta f,f’+\epsilon\delta f’,\cdots\right)\right |<em>{\epsilon&#x3D;0}\<br>&amp;&#x3D;\int</em>{t_1}^{t_2}\mathrm dt\underbrace{\left(\frac{\partial L}{\partial f}\delta f+\frac{\partial L}{\partial f’}\delta f’+\cdots\right)}_{\equiv\delta L}<br>\end{aligned}<br>\end{equation}\tag{1.14}<br>$$</p><p>其中被积函数为 $L$ 的变分 $\delta L$ ，其与微分 $\mathrm d L$ 形式全同.这意味着<br>$$<br>\delta S&#x3D;\delta\left(\int_{t_1}^{t_2}\mathrm dtL\right)&#x3D;\int_{t_1}^{t_2}\mathrm dt\delta L\tag{1.15}<br>$$<br>​我们用分部积分的方法进行处理<br>$$<br>\frac{\partial L}{\partial f’}\delta f’\overset{变分和求导交换顺序}{&#x3D;} \underbrace{\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\delta f\right)}<em>{全导数}-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)\delta f\tag{1.16}<br>$$<br>类似的<br>$$<br>\begin{equation}<br>\begin{aligned}<br>\frac{\partial L}{\partial f’’}\delta f’’ &amp;&#x3D; \frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’’}\delta f’\right)-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’’}\right)\delta f’\<br>&amp;&#x3D;\underbrace{\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’’}\delta f’-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’’}\right)\delta f\right)}</em>{全导数}+\frac{\mathrm d^2}{\mathrm dt^2}\left(\frac{\partial L}{\partial f’’}\right)\delta f<br>\end{aligned}<br>\end{equation}\tag{1.17}<br>$$<br>因此<br>$$<br>\begin{equation}<br>\begin{aligned}<br>\delta S&#x3D;&amp;\int_{t_1}^{t_2}\mathrm dt\left[\frac{\partial L}{\partial f}\delta f-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)\delta f+\frac{\mathrm d^2}{\mathrm dt^2}\left(\frac{\partial L}{\partial f’’}\right)\delta f-\cdots+\frac{\mathrm d\mathcal B}{\mathrm dt}\right]\<br>&#x3D;&amp;\int_{t_1}^{t_2}\mathrm dt\left[\frac{\partial L}{\partial f}-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)+\frac{\mathrm d^2}{\mathrm dt^2}\left(\frac{\partial L}{\partial f’’}\right)-\cdots\right]\partial f+\left.\mathcal B \right |_{t_1}^{t_2}<br>\end{aligned}<br>\end{equation}\tag{1.18}<br>$$</p><p>​这里 $\frac{\mathrm d\mathcal B}{\mathrm dt}$ 代表全导数项，积分到最后得到的 $\left. \mathcal B \right |_{t_1}^{t_2}$ 被称作<strong>边界项</strong>.</p><p>​两个被积函数“相差全导数”，或者两个积分“相差边界项”，这件事在变分法种非常重要，用 $\simeq$ 来表示<br>$$<br>\boxed{L_1\simeq L_2 \iff L_1&#x3D;L_2+\frac{\mathrm dF\left(t,f’,f’’,\cdots\right)}{\mathrm d t}} \tag{1.19}<br>$$<br>以及<br>$$<br>L_1\simeq L_2\iff S_1&#x3D;S_2+\left . F\right |_{t_1}^{t_2}<br>$$<br>式（1.16）和（1.17）可以写成<br>$$<br>\frac{\partial F}{\partial f’}\delta f’\simeq-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)\delta f’，\frac{\partial F}{\partial f’’}\delta f’’&#x3D;\frac{\mathrm d^2}{\mathrm dt^2}\left(\frac{\partial L}{\partial f’’}\right)\delta f \tag{1.20}<br>$$</p><h5 id="1-3-3-计算一阶泛函导数的标准手续"><a href="#1-3-3-计算一阶泛函导数的标准手续" class="headerlink" title="1.3.3 计算一阶泛函导数的标准手续"></a>1.3.3 计算一阶泛函导数的标准手续</h5><ol><li><p>将变分符号 $\delta$ 移到积分号内：<br>$$<br>\delta S&#x3D;\int \mathrm dtL\left(t,f’,f’’,\cdots\right)\tag{1.21}<br>$$</p></li><li><p>按照类似复合函数求导的规则，计算 $\delta L$<br>$$<br>\delta S&#x3D;\int \mathrm dt\left(\frac{\partial L}{\partial f}\delta f+\frac{\partial L}{\partial f’}\delta f’+\frac{\partial L}{\partial f’’}\delta f’’+\cdots\right) \tag{1.22}<br>$$</p></li><li><p>做分部积分</p></li><li><p>提取 $\delta f$ 前系数，即一阶泛函导数<br>$$<br>\delta S\simeq\int \mathrm dt\left[\frac{\partial L}{\partial f}-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)+\frac{\mathrm d^2}{\mathrm dt^2}\left(\frac{\partial L}{\partial f’’}\right)+\cdots\right ]\delta f \tag{1.23}<br>$$</p><p>$$<br>\boxed{\frac{\delta S}{\delta f}&#x3D;\frac{\partial L}{\partial f}-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)+\frac{\mathrm d^2}{\mathrm dt^2}\left(\frac{\partial L}{\partial f’’}\right)+\cdots} \tag{1.24}<br>$$</p></li></ol><blockquote><p>Example 1.1</p><p>​考虑泛函 $S[f]&#x3D;\int\mathrm dt\left[\left(f’\left(t\right)\right)^2-\left(f\left(t\right)\right)^2\right]$ ，有<br>$$<br>\begin{aligned}<br>\delta S&#x3D;&amp;\int \mathrm dt\delta\left(f’^2-f^2\right)&#x3D;\int\mathrm d\left(2f’\delta f’-2f\delta f\right)\<br>&#x3D;&amp;\int \mathrm dt\left(-2f’’-2f\right)\delta f<br>\end{aligned}<br>$$<br>因此一阶泛函导数为<br>$$<br>\frac{\delta S}{\delta f}&#x3D;-2f’’-2f<br>$$</p></blockquote><blockquote><p>Example 1.2</p><p>​考虑泛函 $S[f]&#x3D;\int \mathrm dt\left[f\left(t\right)f’\left(t\right)+f’\left(t\right)f’’\left(t\right)\right]$，有<br>$$<br>\begin{aligned}<br>\delta S[f]&#x3D;&amp;\int \mathrm dt\left(\delta ff’+f\delta f’+\delta f’f’’+f’\delta f’’\right)\<br>&#x3D;&amp;\int\mathrm dt\left(f’-f’+f’’-f’’\right)\delta f&#x3D;0<br>\end{aligned}<br>$$<br>实际上<br>$$<br>ff’+f’f’’&#x3D;\frac{\mathrm d}{\mathrm dt}\left(\frac 12\left(f^2+f’^2\right)\right)<br>$$</p></blockquote><h4 id="1-4-泛函极值"><a href="#1-4-泛函极值" class="headerlink" title="1.4 泛函极值"></a>1.4 泛函极值</h4><h5 id="1-4-1-泛函极值的必要条件"><a href="#1-4-1-泛函极值的必要条件" class="headerlink" title="1.4.1 泛函极值的必要条件"></a>1.4.1 泛函极值的必要条件</h5><p>​显然泛函 $S[f]$ 在 $f&#x3D;\overline f\left(t\right)$ 时取极小（大）值时，只有不发生偏移，即 $\delta f&#x3D;0$ 时取极值 .另一方面，由式（1.12），$S[\overline f+\epsilon \delta f]$ 可看作参数 $\epsilon$ 的普通函数，在 $\epsilon&#x3D;0$ 处取极值.结合泛函导数的定义，有<br>$$<br>\delta S[\overline f]&#x3D;\int \mathrm dt\left .\frac{\delta S[f]}{\delta f}\delta f\right|<em>{\overline f}&#x3D;\left .\frac{\mathrm dS[\overline f+\epsilon \delta f]}{\mathrm d\epsilon}\right |</em>{\epsilon &#x3D;0}&#x3D;0\tag{1.25}<br>$$<br>由此得到泛函在 $f&#x3D;\overline f\left(t\right)$ 时取极值，即要求泛函的一阶变分为零：<br>$$<br>\boxed{\delta S[\overline f]&#x3D;0}\tag{1.26}<br>$$</p><h5 id="1-4-2-欧拉-拉格朗日方程"><a href="#1-4-2-欧拉-拉格朗日方程" class="headerlink" title="1.4.2 欧拉-拉格朗日方程"></a>1.4.2 欧拉-拉格朗日方程</h5><p>​一类常见的泛函具有如下形式<br>$$<br>S[f]&#x3D;\int \mathrm dt L\left(t,f\left(t\right),f’\left(t\right)\right)\tag{1.27}<br>$$<br>根据式（1.26），泛函取极值的必要条件是<br>$$<br>-\frac{\delta S}{\delta f}\equiv\boxed{\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)-\frac{\partial L}{\partial f}&#x3D;0}\tag{1.28}<br>$$<br>式（1.28）是关于 $f\left(t\right)$ 的二阶微分方程，被称为变分问题的<strong>欧拉-拉格朗日方程</strong>（Euler-Lagrange equation）.</p><p>​对 $L$ 直接求全导数<br>$$<br>\begin{aligned}<br>\frac{\mathrm dL}{\mathrm dt}&#x3D;&amp;\frac{\partial L}{\partial t}+\frac{\partial L}{\partial f}f’+\frac{\partial L}{\partial f’}f’’&#x3D;\frac{\partial L}{\partial t}+\frac{\partial L}{\partial f}f’+\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}f’\right)-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)f’\<br>&#x3D;&amp;\frac{\partial L}{\partial t}-\underbrace{\left(\frac{\partial L}{\partial f}-\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}\right)\right)}<em>{&#x3D;0}f’+\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}f’\right)<br>\end{aligned}<br>$$<br>因此当欧拉-拉格朗日方程（1.28）满足时，下式也成立<br>$$<br>\boxed{\frac{\mathrm d}{\mathrm dt}\left(\frac{\partial L}{\partial f’}f’-L\right)+\frac{\partial L}{\partial t}&#x3D;0} \tag{1.29}<br>$$<br>一个立即的结论是，若 $L$ 不显含积分变量 $t$<br>$$<br>\frac{\partial L}{\partial t}&#x3D;0\tag{1.30}\Rightarrow \frac{\partial L}{\partial f’}f’-L&#x3D;const<br>$$<br>​对于更一般的泛函式（1.3），其取极值的必要条件是<br>$$<br>\frac{\delta S}{\delta f}&#x3D;\sum</em>{n&#x3D;0}\left(-1\right)^n\frac{\mathrm d^n}{\mathrm dt^n}\left(\frac{\partial L}{\partial f^{\left(n\right)}}\right)&#x3D;0\tag{1.31}<br>$$</p><blockquote><p>Example 1.3</p><p>​平面上两固定点直接由任意光滑曲线连接，曲线方程基座 $y&#x3D;f\left(x\right)$ ，曲线长度为 $S&#x3D;\int \mathrm dx\sqrt{1+\left(f’\left(x\right)\right)^2}$ ，变分得到<br>$$<br>\delta S&#x3D;\int \mathrm dx\frac{f’}{\sqrt{1+f’^2}}\delta f’&#x3D;-\int \mathrm dx\frac{f’’}{\left(1+f’^2\right)^{3&#x2F;2}}\delta f<br>$$<br>于是曲线长度取极值的必要条件即 $f\left(x\right)$ 满足 $\frac{f’’}{\left(1+f’^2\right)^{3&#x2F;2}}&#x3D;0$ ，其等价于 $f’’&#x3D;0$ ，通解为  $y&#x3D;ax+b$ .</p></blockquote><blockquote><p>Example 1.4（最速下降曲线）</p><p>​当小球下降到 $y$ 处时，$\frac 12m\boldsymbol{v}^2&#x3D;mgy$ ，因此速度大小 $v\equiv|\boldsymbol v|&#x3D;\sqrt{2gy}$ ，下落到 $A$ 点的用时<br>$$<br>T[y]&#x3D;\int \mathrm dx \frac{\sqrt{1+y’^2}}{\sqrt{2gy}}<br>$$<br>观察到被积函数 $L&#x3D;\frac{\sqrt{1+y’^2}}{\sqrt{2gy}}$ 与 $x$ 无关，即式（1.30）的情况<br>$$<br>\frac{\partial L}{\partial f’}f’-L&#x3D;-\frac{1}{\sqrt{2gy}\sqrt{1+y’^2}}&#x3D;const<br>$$<br>即 $y\left(x\right)$ 满足<br>$$<br>y\left(1+y’^2\right)&#x3D;const\tag{1.32}<br>$$<br>可以验证式（1.32）有参数方程解，$y\left(\theta\right)&#x3D;a\left(1-\cos\theta\right)$ 和 $x\left(\theta\right)&#x3D;a\left(\theta -\sin \theta\right)$ ，其所描述的曲线即为摆线（cycloid）</p></blockquote><h5 id="1-4-3-多个变量和多元函数"><a href="#1-4-3-多个变量和多元函数" class="headerlink" title="1.4.3 多个变量和多元函数"></a>1.4.3 多个变量和多元函数</h5><p>​考虑泛函<br>$$<br>S&#x3D;S[f_1,f_2,\cdots]&#x3D;\int \mathrm dtL\left(t,f_1,f_2,\cdots,f_1’,f_2’,\cdots\right)\tag{1.33}<br>$$<br>其极值同样要求<br>$$<br>\delta S&#x3D;\int \mathrm dt\left(\frac{\delta S}{\delta f_1}\delta f_1+\frac{\delta S}{\delta f_2}\delta f_2+\cdots\right)&#x3D;0\tag{1.34}<br>$$<br>因为函数 $f_1,f_2,\cdots$ 相互独立，其变分 $\delta f_1,\delta f_2,\cdots$ 也是相互独立的，因此上述式子要求每一项的系数都为零，于是泛函取极值的要求<br>$$<br>\frac{\delta S}{\delta f_1}&#x3D;0,\ \frac{\delta S}{\delta f_2}&#x3D;0,\ \cdots\tag {1.35}<br>$$</p><blockquote><p>Example 1.5</p><p>​考虑依赖于两个函数 $f\left(t\right)$ 和 $n\left(t\right)$ 的泛函<br>$$<br>S[f.n]&#x3D;\int \mathrm dt\frac 12\left[\frac{1}{n\left(t\right)}\left(f’\left(t\right)\right)^2-n\left(t\right)\left(f\left(t\right)\right)^2 \right]<br>$$<br>首先对 $f\left(t\right)$ 做变分，得到<br>$$<br>\delta S&#x3D;\int \mathrm dt\frac12\left(\frac{1}{n}2f’\delta f’-n2f\delta f \right)\simeq\int \mathrm dt\left[-\frac{\mathrm d}{\mathrm dt}\left(\frac{f’}{n}\right)-nf \right]\delta f<br>$$<br>因此 $\delta S&#x3D;0$，要求<br>$$<br>-\frac{\delta S}{\delta f}&#x3D;\frac{\mathrm d}{\mathrm dt}\left(\frac{f’}{n}\right)+nf&#x3D;0\tag{1.36}<br>$$<br>再对 $n\left(t\right)$ 做变分，得到<br>$$<br>\delta S&#x3D;\int \mathrm dt\frac{1}{2}\left(-\frac{1}{n^2}f’^2-f^2\right)\delta n<br>$$<br>因此 $\delta S&#x3D;0$，要求<br>$$<br>-\frac{\delta S}{\delta n}&#x3D;\frac{1}{2n^2}f’^2+\frac12f^2\tag{1.37}<br>$$<br>泛函 $S[f,n]$ 取极值的必要条件即 $f\left(t\right)$ 和 $n\left(t\right)$ 满足式（1.36）和（1.37）</p></blockquote><p>​泛函中的函数也可以是多元函数，以单个函数 $f$ 的泛函 $S[f]$ 为例，设 $f$ 为 $t$ 和 $x$ 的二元函数 $f&#x3D;f\left(t,x\right)$ .简单起见，我们只考虑 $L$ 含有 $f$ 的一阶导数，泛函具有形式<br>$$<br>S&#x3D;\iint \mathrm dt\mathrm dxL\left(t,x,f,\frac{\partial f}{\partial t},\frac{\partial f}{\partial x}\right)\tag{1.38}<br>$$<br>同样按照之前的步骤，泛函的一阶变分为<br>$$<br>\begin{aligned}<br>\delta S&#x3D;&amp;\iint \mathrm dt\mathrm dx\delta L\left(t,x,f,\frac{\partial f}{\partial t},\frac{\partial f}{\partial x}\right)\<br>&#x3D;&amp;\iint \mathrm dt\mathrm dx\left[\frac{\partial L}{\partial f}\delta f+\frac{\partial L}{\partial \left(\frac{\partial f}{\partial t}\right)}\delta\left(\frac{\partial f}{\partial t}\right)+\frac{\partial L}{\partial \left(\frac{\partial f}{\partial x}\right)}\delta\left(\frac{\partial f}{\partial x}\right) \right]\<br>&#x3D;&amp;\iint \mathrm dt\mathrm dx\left[\frac{\partial L}{\partial f}-<br>\frac{\partial}{\partial t}\left(\frac{\partial L}{\partial \left(\frac{\partial f}{\partial t}\right)}\right)<br>-\frac{\partial}{\partial x}\left( \frac{\partial L}{\partial \left(\frac{\partial f}{\partial x}\right)}\right) \right]\delta f\<br>\end{aligned}<br>$$<br>所以泛函取极值的必要条件即<br>$$<br>\frac{\delta S}{\delta f}&#x3D;\frac{\partial L}{\partial f}<br>-\frac{\partial}{\partial t}\left(\frac{\partial L}{\partial \left(\frac{\partial f}{\partial t}\right)}\right)<br>-\frac{\partial}{\partial x}\left( \frac{\partial L}{\partial \left(\frac{\partial f}{\partial x}\right)}\right)&#x3D;0\tag{1.39}<br>$$</p><h4 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h4><blockquote><p><strong>1.5</strong> 考虑一条补课拉伸，质量均匀的柔软喜神，长为 $l$ ，质量为 $m$ ，细绳两端点悬挂于相同高度，水平距离为 $a(a&lt;l)$ .</p><p>（1） 选择合适的坐标，求细绳总的重力势能 $V$ 作为细绳形状的泛函.</p><p>（2）求细绳重力势能取极值时，细绳形状所满足的欧拉-拉格朗日方程.</p><p> $proof$</p><p>（1） 以细绳的一个端点作为原点，建立坐标系，细绳总的重力势能 $V$ 可以写成<br>$$<br>V&#x3D;\int_0^a \mathrm dx \frac{\sqrt{1+y’^2}}{l} mgy&#x3D;\int_0^a \mathrm dx\frac{mg}{l}y\sqrt{1+y’^2}<br>$$<br>（2）做变分<br>$$<br>\begin{aligned}<br>\delta V&#x3D;&amp;\int_{0}^a \mathrm dx \frac{mg}{l}\left(\delta y\sqrt{1+y’^2}+\frac{yy’}{\sqrt{1+y’^2}}\delta y’ \right)\<br>\simeq&amp;\int_{0}^a \mathrm dx \frac{mg}l\frac{y’^2-yy’’+1}{\left( 1+y’^2 \right )^{3&#x2F;2}}\delta y<br>\end{aligned}<br>$$<br>因此 $\delta V&#x3D;0$，要求<br>$$<br>-\frac{\delta V}{\delta y}&#x3D;-\frac{mg}l\frac{y’^2-yy’’+1}{\left( 1+y’^2 \right )^{3&#x2F;2}}&#x3D;0<br>$$<br>即细绳形状满足微分方程<br>$$<br>y^2-yy’’+1&#x3D;0<br>$$</p></blockquote><h3 id="Chapter-2-位形空间"><a href="#Chapter-2-位形空间" class="headerlink" title="Chapter 2 位形空间"></a>Chapter 2 位形空间</h3><h4 id="2-1-位形与时间演化"><a href="#2-1-位形与时间演化" class="headerlink" title="2.1 位形与时间演化"></a>2.1 位形与时间演化</h4><h5 id="2-1-1-位形"><a href="#2-1-1-位形" class="headerlink" title="2.1.1 位形"></a>2.1.1 位形</h5><p>​<strong>位形</strong>（configuration）即粒子系统中各个粒子的空间位置，或者更一般的物理系统在空间中的形状、分布.位形的概念可以推广至连续系统和非机械系统.</p><h5 id="2-1-2-位形空间与流形"><a href="#2-1-2-位形空间与流形" class="headerlink" title="2.1.2 位形空间与流形"></a>2.1.2 位形空间与流形</h5><p>​系统所有可能位形的集合，就构成<strong>位形空间</strong>（configuration space）.位形空间中的一点，即代表系统的一种可能的位形.</p><p>​一般来说，物理系统的位形空间一般不是平坦的线性空间（矢量空间）.例如，球面是一个二维空间，但显然不是平坦的.但是，球面局部的一小块，看上去又和二维平面很想，数学上对这种一般的空间的描述，即所谓<strong>流形</strong>（manifold）理论.</p><h5 id="2-1-3-世界线"><a href="#2-1-3-世界线" class="headerlink" title="2.1.3 世界线"></a>2.1.3 世界线</h5><p>​随着时间的演化，位形空间中的点在这个空间中也扫出一条连续的曲线，有时被称作<strong>时间线</strong>（world line）.</p><h4 id="2-2-广义坐标"><a href="#2-2-广义坐标" class="headerlink" title="2.2 广义坐标"></a>2.2 广义坐标</h4><h5 id="2-2-1-广义坐标的概念"><a href="#2-2-1-广义坐标的概念" class="headerlink" title="2.2.1 广义坐标的概念"></a>2.2.1 广义坐标的概念</h5><p>​对位形空间的参数化即<strong>广义坐标</strong>（generalized coordinates），其是任意一组都能够唯一确定系统某个位形的独立参数.<br>$$<br>\begin{aligned}<br>位置\quad &amp;\to \quad 位形\<br>普通空间 \ &amp;\to\  位形空间\<br>普通坐标 \ &amp;\to\  广义坐标<br>\end{aligned}<br>$$</p><blockquote><p>Example 2.1 圆环上粒子的位形</p><p>​如图所示，粒子在固定圆环上无摩擦的自由滑动，粒子在圆环上的角度唯一决定粒子的位置，所以系统具有一个独立的广义坐标即 $\theta$ .这个系统的位形空间就是圆周，通常记作 $\mathbf{S}^1$ .</p><p><img src="/2025/09/08/Classical%20mechanics/2.1.png"></p></blockquote><blockquote><p>Example 2.2 单摆的位形</p><p>（a）一个独立广义坐标 $\theta$ ，位形空间为一维圆周 $\mathbf{S}^1$ .</p><p>（b）两个独立广义坐标 $x$ 和 $\theta$ ，位形空间为二维柱面 $\mathrm{R}^1\times \mathrm{S}^1$ .</p><p>（c）球坐标 ${\theta,\phi}$ ，位形空间为二维球面 $\mathrm{S}^2$ .</p><p><img src="/2025/09/08/Classical%20mechanics/2.2.png"></p></blockquote><blockquote><p>Example 2.3 刚性杆连接两个粒子的位形</p><p>​系统具有 3 个独立的广义坐标 ${x_1,y_1,\theta}$ ，位形空间为 $\mathbf{R}^2\times\mathbf{S}^1$ .</p><p><img src="/2025/09/08/Classical%20mechanics/2.3.png"></p></blockquote><blockquote><p>Example 2.4 双摆的位移</p><p>​两个杆的摆角唯一决定了双摆的位形。两个杆的白交 $\theta_1$ 和 $\theta_2$ 各自都具有 $2\pi$ 的周期性，所以双摆的位形空间是 $\mathbf{S}^1\times \mathbf{S}^1\equiv \mathbf{T}^2$ ，其代表二维环面。</p><p><img src="/2025/09/08/Classical%20mechanics/2.4.png"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Physics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++</title>
    <link href="/2025/08/27/C++note/"/>
    <url>/2025/08/27/C++note/</url>
    
    <content type="html"><![CDATA[<h2 id="C-note"><a href="#C-note" class="headerlink" title="C++ note"></a>C++ note</h2><p>[^参考书]: 《C++语言程序设计（第5版）》 郑莉 董渊</p><h3 id="Chapter-2"><a href="#Chapter-2" class="headerlink" title="Chapter 2"></a>Chapter 2</h3><h4 id="type-definition"><a href="#type-definition" class="headerlink" title="type definition"></a>type definition</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> Area,Volumn;<br><span class="hljs-comment">// using Area=double;</span><br><span class="hljs-comment">// using Volumn=double;</span><br><span class="hljs-keyword">using</span> arr=<span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="chapter-3"><a href="#chapter-3" class="headerlink" title="chapter 3"></a>chapter 3</h3><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h4><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p>​<strong>引用是一种特殊类型的变量，可以被认为是另一个变量的别名</strong>，通过引用名与通过被引用变量名访问变量的效果是一样的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 引用</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>,q=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> &amp;b = a; <span class="hljs-comment">// b是a的引用</span><br>b = <span class="hljs-number">20</span>;     <span class="hljs-comment">// 通过b修改a</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d\n&quot;</span>, a); <span class="hljs-comment">// 输出a的值</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">error case:</span><br><span class="hljs-comment">b = &amp;q; // 引用不能被重新赋值</span><br><span class="hljs-comment">int &amp;c; // 引用必须初始化</span><br><span class="hljs-comment">int &amp;d = 10; // 引用必须引用一个变量，不能是字面值</span><br><span class="hljs-comment">int &amp;e = b + 1; // 引用必须引用一个变量，不能是表达式</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="initializer-list"><a href="#initializer-list" class="headerlink" title="initializer_list"></a>initializer_list</h5><p>​<code>initializer_list</code>  是一种标准库类型，用于表示某种特定类型的值的数组，该类型定义在同名的头文件中。</p><blockquote><p><code>initializer_list</code> 提供的操作：<br><code>initializer_list&lt;T&gt;lst</code> :默认初始化；<code>T</code>类型元素的空列表。<br><code>initializer_list&lt;T&gt; lst&#123;a,b,c⋯&#125;</code>:<code>lst</code>的元素数量和初始值一样多；<code>lst</code>的元素是对应初始值的副本；列表中的元素是 <code>const</code>。<br><code>lst2(lst),lst2=lst</code>:复制或者赋值一个 <code>initializer_list</code>对象但不复制列表中的元素；复制后原始列表和副本共享元素。<br><code>lst.size()</code>:列表中的元素数量。<br><code>lst.begin()</code>:返回指向<code>lst</code> 首元素的指针。<br><code>lst.end()</code>:返回指向 <code>lst</code> 尾元素下一位置的指针。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;initializer_list&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_err</span><span class="hljs-params">(initializer_list&lt;string&gt; il)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:il) <br>    &#123;<br>        cout&lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    for(auto i=il.begin();i!=il.end();i++)</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>    string s2 = <span class="hljs-string">&quot;world&quot;</span>;<br>    <span class="hljs-keyword">if</span>(s1!= s2)<br>    &#123;<br>        <span class="hljs-built_in">print_err</span>(&#123;<span class="hljs-string">&quot;s1 != s2&quot;</span>, <span class="hljs-string">&quot;s1 = &quot;</span>, s1, <span class="hljs-string">&quot;s2 = &quot;</span>, s2&#125;);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;   <br>        <span class="hljs-built_in">print_err</span>(&#123;<span class="hljs-string">&quot;s1 == s2&quot;</span>, <span class="hljs-string">&quot;s1 = &quot;</span>, s1, <span class="hljs-string">&quot;s2 = &quot;</span>, s2&#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-内联函数"><a href="#3-2-内联函数" class="headerlink" title="3.2 内联函数"></a>3.2 内联函数</h4><p>​对于一些功能简单、规模较小又使用频繁的函数，可以设计为内联函数。<strong>内联函数不是在调用时发生控制转移，而是在编译时将函数体嵌入在每一个调用处</strong>。这样就节省了参数传递、控制转移等开销。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">print_hello</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">print_hello</span>(); <span class="hljs-comment">// 调用内联函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-constexpr-函数"><a href="#3-3-constexpr-函数" class="headerlink" title="3.3 constexpr 函数"></a>3.3 constexpr 函数</h4><p>​<code>constexpr</code> 函数是指能用于常量表达式的函数。定义 <code>constexpr</code> 函数的方法与其他函数类似，但要遵循几项约定：函数的返回类型以及所有的形参类型必须是常量，而且函数体中必须有且仅有一条 <code>return</code> 语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 关键字 constexpt 与 constexpr 函数</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">block_size</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">len</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a*<span class="hljs-built_in">block_size</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> size=<span class="hljs-built_in">len</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    error:</span><br><span class="hljs-comment">    int i=2;</span><br><span class="hljs-comment">    constexpr int _size=len(i);    </span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-带默认形参值的函数-default-parameter"><a href="#3-4-带默认形参值的函数-default-parameter" class="headerlink" title="3.4 带默认形参值的函数 (default_parameter)"></a>3.4 带默认形参值的函数 (default_parameter)</h4><p>​函数在定义时可以预先声明默认的形参值。调用时如果给出实参，则用实参初始化形参，如果没有给出实参，则采用预先声明的默认形参值。</p><p>​<strong>有默认值的形参必须在形参列表的最后</strong>，也就是说，在有默认值的形参右面，不能出现无默认值的形参。因为在函数调用中，实参与形参是按从左向右的顺序建立对应关系的。</p><p>​<strong>在相同的作用域内，不允许在同一个函数的多个声明中对同一个参数的默认值重复定义，即使前后定义的值相同也不行</strong>。这里作用域是指直接包含着函数原型说明的大括号所界定的范围</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b=<span class="hljs-number">0</span>,<span class="hljs-type">int</span> c=<span class="hljs-number">0</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">3</span>,b=<span class="hljs-number">5</span>,c=<span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">max</span>(a)); <span class="hljs-comment">// 3</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">max</span>(a,b)); <span class="hljs-comment">// 5</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">max</span>(a,b,c)); <span class="hljs-comment">// 5</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b <span class="hljs-comment">/*=0*/</span>,<span class="hljs-type">int</span> c<span class="hljs-comment">/*=0*/</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(a,<span class="hljs-built_in">max</span>(b,c));<br>&#125;<br><span class="hljs-comment">// 函数声明时指定默认参数，函数定义时不再指定</span><br><span class="hljs-comment">// 默认参数从右向左依次指定</span><br><span class="hljs-comment">// 函数调用时可以省略默认参数</span><br></code></pre></td></tr></table></figure><h4 id="3-5-函数重载-funtion-overloading"><a href="#3-5-函数重载-funtion-overloading" class="headerlink" title="3.5 函数重载(funtion overloading)"></a>3.5 函数重载(funtion overloading)</h4><p>​<strong>两个以上的函数，具有相同的函数名，但是形参的个数或者类型不同，编译器根据实参和形参的类型及个数的最佳匹配，自动确定调用哪一个函数，这就是函数的重载。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">error:</span><br><span class="hljs-comment">int max(int a,int b,int c=0);</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">5</span>,b=<span class="hljs-number">2</span>,c=<span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;max(a,b)=%d&quot;</span>,<span class="hljs-built_in">max</span>(a,b));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;max(a,b,c)=%d&quot;</span>,<span class="hljs-built_in">max</span>(a,b,c));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a&gt;b ? a:b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(a,<span class="hljs-built_in">max</span>(b,c));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a&gt;b ? a:b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="chapter-4"><a href="#chapter-4" class="headerlink" title="chapter 4"></a>chapter 4</h3><h4 id="4-2-类和对象-4-3-构造函数、析构函数"><a href="#4-2-类和对象-4-3-构造函数、析构函数" class="headerlink" title="4.2 类和对象 &amp; 4.3 构造函数、析构函数"></a>4.2 类和对象 &amp; 4.3 构造函数、析构函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<span class="hljs-comment">//公有类型 外部接口</span><br>        <span class="hljs-built_in">Clock</span>();<span class="hljs-comment">//默认构造函数</span><br>        <span class="hljs-built_in">Clock</span>(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS);<span class="hljs-comment">//构造函数</span><br>        <span class="hljs-built_in">Clock</span>(Clock &amp;c);<span class="hljs-comment">//复制构造函数</span><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>        ~<span class="hljs-built_in">Clock</span>() &#123;&#125;<span class="hljs-comment">//析构函数</span><br><br>    <span class="hljs-comment">// protected://保护型成员</span><br><br>    <span class="hljs-keyword">private</span>:<span class="hljs-comment">//私有成员</span><br>        <span class="hljs-type">int</span> hour,minutes,second;<br>        <span class="hljs-comment">// int hour&#123;0&#125;,minutes&#123;0&#125;,second&#123;0&#125;;</span><br><br>&#125;;<br><br>Clock::<span class="hljs-built_in">Clock</span>():<span class="hljs-built_in">hour</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">minutes</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">second</span>(<span class="hljs-number">0</span>)&#123; <br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// 委托构造函数</span><br><span class="hljs-comment">Clock::Clock():Clock(0,0,0)&#123;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>Clock::<span class="hljs-built_in">Clock</span>(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS):<span class="hljs-built_in">hour</span>(newH),<span class="hljs-built_in">minutes</span>(newM),<span class="hljs-built_in">second</span>(newS)&#123;<br>&#125;<br><br>Clock::<span class="hljs-built_in">Clock</span>(Clock &amp;c)<br>&#123;<br>    hour=c.hour;<br>    minutes=c.minutes;<br>    second=c.second;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Clock::setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS)</span></span><br><span class="hljs-function"></span>&#123;<br>    hour=newH;<br>    minutes=newM;<br>    second=newS;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Clock::showTime</span><span class="hljs-params">()</span><span class="hljs-comment">// inline function</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Time: %02d:%02d:%02d\n&quot;</span>,hour,minutes,second);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Clock <span class="hljs-title">myClock1</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)</span></span>;<br>    myClock<span class="hljs-number">1.</span><span class="hljs-built_in">showTime</span>();<br>    myClock<span class="hljs-number">1.</span><span class="hljs-built_in">setTime</span>(<span class="hljs-number">9</span>,<span class="hljs-number">18</span>,<span class="hljs-number">23</span>);<br>    myClock<span class="hljs-number">1.</span><span class="hljs-built_in">showTime</span>();<br>    Clock myClock2;<br>    myClock<span class="hljs-number">2.</span><span class="hljs-built_in">showTime</span>();<br>    <span class="hljs-function">Clock <span class="hljs-title">myClock3</span><span class="hljs-params">(myClock1)</span></span>;<br>    Clock myClock4=myClock1;<br>    myClock<span class="hljs-number">3.</span><span class="hljs-built_in">showTime</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> <br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> xx=<span class="hljs-number">0</span>,<span class="hljs-type">int</span> yy=<span class="hljs-number">0</span>)<br>        &#123;<br>            x=xx;<br>            y=yy;<br>        &#125;<br><br>        <span class="hljs-built_in">Point</span>(Point &amp;p);<span class="hljs-comment">// 显式</span><br><br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Get_x</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Get_y</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">return</span> y;<br>        &#125;<br><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">int</span> x,y;<br>&#125;;<br><br>Point::<span class="hljs-built_in">Point</span>(Point &amp;p)<br>&#123;<br>    x=p.x;<br>    y=p.y;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Calling the copy constructor\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(Point p)</span><span class="hljs-comment">// 传值，调用了复制构造函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,p.<span class="hljs-built_in">Get_x</span>());<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function">Point <span class="hljs-title">fun2</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> a;<span class="hljs-comment">// 可能被编译器优化</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)</span></span>;<br>    Point b=a;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,b.<span class="hljs-built_in">Get_x</span>());<br>    <span class="hljs-built_in">fun1</span>(b);<br>    b=<span class="hljs-built_in">fun2</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,b.<span class="hljs-built_in">Get_x</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h5><p>​复制构造函数通过复制的方式构造新的对象，而很多时候被复制的对象仅作复制之用后销毁，在这时，如果使用移动已有对象而非复制对象将大大提高性能。C++11标准推出以前，没有移动对象的直接方法，C++11标准引入了左值和右值，定义了右值引用的概念，以表明被引用对象在使用后会被销毁，不会再继续使用。直观来看，<strong>左值是位于赋值语句左侧的对象变量，右值是赋值语句右侧的值，不依附于对象</strong>。3.1节中参数引用传递中<strong>对持久存在变量的引用，称之为左值引用，相对的对短暂存在可被移动的右值的引用称之为右值引用</strong>。因此，可通过移动右值引用对象来安全地构造新对象，并且避免冗余复制对象的代价。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">float</span> n=<span class="hljs-number">6</span>;<br><span class="hljs-type">float</span> &amp;lr_n=n;<span class="hljs-comment">//对变量n的左值引用</span><br><span class="hljs-type">float</span> &amp;&amp;rr_n=n; <span class="hljs-comment">//错误，不能将右值引用绑定到左值n上</span><br><span class="hljs-type">float</span> &amp;&amp;rr_n=n * n; <span class="hljs-comment">//将乘法结果右值绑定到右值引用</span><br><span class="hljs-type">float</span> &amp;lr_n=n * n; <span class="hljs-comment">//错误，不能将左值引用绑定到乘法结果右值</span><br></code></pre></td></tr></table></figure><p>​以上举例展示了右值引用和左值引用的区别和正确使用方式，注意一个左值对象不能绑定到一个右值引用上。但实际应用中，可能某个对象的作用仅限在初始化其他新对象使用后销毁，标准库 <code>utility</code> 中声明提供了 <code>move</code> 函数，将左值对象移动成为右值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">float</span> n=<span class="hljs-number">10</span>;<br><span class="hljs-type">float</span> &amp;&amp;rr_n=std::<span class="hljs-built_in">move</span>(n); <span class="hljs-comment">//将左值对象移动为右值并绑定右值引用</span><br></code></pre></td></tr></table></figure><p><code>move</code> 函数告诉编译器变量 <code>n</code> 转换为当右值来使用，承诺除对 <code>n</code> 重新赋值或者销毁它以外，将不再通过 <code>rr_n</code> 右值引用以外的方式使用它。</p><p>​基于右值引用的新设定，可以通过移动而不复制实参的高性能方式构建新对象，即移动构造函数。类似于复制构造函数，移动构造函数的参数为该类对象的右值引用，在构造中移动源对象资源，构造后源对象不再指向被移动的资源，源对象可重新赋值或者被销毁：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mystr</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        string s;<br><br>        <span class="hljs-built_in">Mystr</span>(): <span class="hljs-built_in">s</span>(<span class="hljs-string">&quot;&quot;</span>)&#123;&#125;<span class="hljs-comment">// 无参构造函数</span><br><br>        <span class="hljs-built_in">Mystr</span>(string _s): <span class="hljs-built_in">s</span>(<span class="hljs-built_in">move</span>(_s)) &#123;&#125;<span class="hljs-comment">// 有参构造函数</span><br><br>        <span class="hljs-built_in">Mystr</span>(Mystr &amp;&amp;str) <span class="hljs-keyword">noexcept</span><span class="hljs-comment">// 告知编译器不会抛出异常</span><br>            : <span class="hljs-built_in">s</span>(<span class="hljs-built_in">move</span>(str.s)) &#123;&#125;<span class="hljs-comment">// 移动构造函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="default、delete-函数"><a href="#default、delete-函数" class="headerlink" title="default、delete 函数"></a>default、delete 函数</h5><p>​默认构造函数、复制构造函数和移动构造函数，这些概念让人眼花缭乱，在定义一个新类时，用户可能只是希望简单地使用，不希望花太多精力在复制控制优化性能上，C++11标准提供了 <code>default</code> 和 <code>delete</code> 两个关键字来简化构造函数的定义与使用。使用 <code>=default</code> 可显示要求编译器自动生成默认或复制构造函数。</p><p>​通过使用 <code>default</code> ,可以让编译器合成简单的无参默认构造函数和复制构造函数，但其他使用参数的构造函数，由于编译器不知构造逻辑，需要用户自行定义。当用户不希望定义的类存在复制时，可以通过 <code>delete</code> 关键字将复制构造函数删除：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mystr</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        string s;<br><br>        <span class="hljs-built_in">Mystr</span>()=<span class="hljs-keyword">default</span>;<span class="hljs-comment">//默认合成的无参构造函数</span><br><br>        <span class="hljs-built_in">Mystr</span>(string _s): <span class="hljs-built_in">s</span>(<span class="hljs-built_in">move</span>(s)) &#123;&#125;<span class="hljs-comment">//有参构造函数</span><br><br>        <span class="hljs-built_in">Mystr</span>(Mystr &amp;&amp;str)=<span class="hljs-keyword">default</span>;<span class="hljs-comment">//默认合成的赋值构造函数</span><br>        <span class="hljs-comment">// Mystr(Mystr &amp;&amp;str)=delete; //删除复制构造函数</span><br><br>        ~<span class="hljs-built_in">Mystr</span>()=<span class="hljs-keyword">default</span>;<span class="hljs-comment">//默认合成的析构函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>​与 <code>default</code> 使用不同的是，<code>delete</code> 不限于在无参和复制构造函数上使用，除析构函数外，用户都可以指定为 <code>delete</code> 删除掉，以便禁止类使用过程中的相关操作，比如上例中的复制操作。</p><h4 id="struct、union、enum"><a href="#struct、union、enum" class="headerlink" title="struct、union、enum"></a>struct、union、enum</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExamInfo</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">ExamInfo</span>(<span class="hljs-type">const</span> string &amp;_name,<span class="hljs-type">const</span> <span class="hljs-type">char</span> _grade)<br>            : <span class="hljs-built_in">name</span>(_name),<span class="hljs-built_in">mode</span>(GRADE),<span class="hljs-built_in">grade</span>(_grade) &#123;&#125;<br><br>        <span class="hljs-built_in">ExamInfo</span>(<span class="hljs-type">const</span> string &amp;_name,<span class="hljs-type">const</span> <span class="hljs-type">bool</span> _pass)<br>            : <span class="hljs-built_in">name</span>(_name),<span class="hljs-built_in">mode</span>(PASS),<span class="hljs-built_in">pass</span>(_pass) &#123;&#125;    <br><br>        <span class="hljs-built_in">ExamInfo</span>(<span class="hljs-type">const</span> string &amp;_name,<span class="hljs-type">const</span> <span class="hljs-type">double</span> _precent)<br>            : <span class="hljs-built_in">name</span>(_name),<span class="hljs-built_in">mode</span>(PRECENTAGE),<span class="hljs-built_in">precent</span>(_precent) &#123;&#125;<br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-keyword">private</span>:<br>        string name;<br>        <span class="hljs-keyword">enum</span><br>        &#123;<br>            GRADE,<br>            PASS,<br>            PRECENTAGE<br>        &#125;mode;<br>        <span class="hljs-keyword">union</span><br>        &#123;<br>            <span class="hljs-type">char</span> grade;<br>            <span class="hljs-type">bool</span> pass;<br>            <span class="hljs-type">double</span> precent;<br>        &#125;;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        联合体也可以不声明名称，称为无名联合体。无名联合体没有标记名，只是声明一个成员项的集合，</span><br><span class="hljs-comment">        这些成员项具有相同的内存地址，可以由成员项的名字直接访问。</span><br><span class="hljs-comment">        */</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ExamInfo::show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;name&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>;<br>    <span class="hljs-keyword">switch</span>(mode)<br>    &#123;<br>        <span class="hljs-keyword">case</span> GRADE:<br>            cout&lt;&lt;grade;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> PASS:<br>            cout&lt;&lt;(pass? <span class="hljs-string">&quot;PASS&quot;</span>:<span class="hljs-string">&quot;FAIL&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> PRECENTAGE:<br>            cout&lt;&lt;precent;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">ExamInfo <span class="hljs-title">course1</span><span class="hljs-params">(<span class="hljs-string">&quot;English&quot;</span>,<span class="hljs-string">&#x27;B&#x27;</span>)</span></span>;<br>    <span class="hljs-function">ExamInfo <span class="hljs-title">course2</span><span class="hljs-params">(<span class="hljs-string">&quot;Calculus&quot;</span>,<span class="hljs-literal">true</span>)</span></span>;<br>    <span class="hljs-function">ExamInfo <span class="hljs-title">course3</span><span class="hljs-params">(<span class="hljs-string">&quot;C++Progamming&quot;</span>,<span class="hljs-number">85.0</span>)</span></span>;<br>    course<span class="hljs-number">1.</span><span class="hljs-built_in">show</span>();<br>    course<span class="hljs-number">2.</span><span class="hljs-built_in">show</span>();<br>    course<span class="hljs-number">3.</span><span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="位域（bitfield）"><a href="#位域（bitfield）" class="headerlink" title="位域（bitfield）"></a>位域（bitfield）</h4><p>​程序员可以通过冒号(:)后的位数来指定为一个位域所占用的二进制位数。使用位域，有以下几点需要注意：</p><ul><li><p>C++标准规定了使用这种机制用来允许编译器将不同的位域“打包”,但这种“打包”的具体方式，C++标准并没有规定，因此不同的编译器会有不同的处理方式，不同编译器下，包含位域的类所占用的空间也会有所不同。</p></li><li><p>只有bool(布尔型)、char(字符型)、int(整型)和enum(枚举型)的成员才能够被定义为位域。</p></li><li><p>位域虽然节省了内存空间，但由于打包和解包的过程中需要耗费额外的操作，所以运行时间很有可能会增加。</p></li></ul><p>​结构体与类的唯一区别在于访问权限，因此也允许定义位域；但联合体中，各个成员本身就共用相同的内存单元，因此没必要也不允许定义位域。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Level</span>&#123;FRESHMAN,SOPHOMORE,JUNIOR,SENIOR&#125;;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Grade</span>&#123;A,B,C,D&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Student</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> num,Level lev,Grade gra)<br>            :<span class="hljs-built_in">number</span>(num),<span class="hljs-built_in">level</span>(lev),<span class="hljs-built_in">grade</span>(gra) &#123;&#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>    <br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> number:<span class="hljs-number">27</span>;<span class="hljs-comment">// bitfield</span><br>        Level level:<span class="hljs-number">2</span>;<br>        Grade grade:<span class="hljs-number">2</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Student::show</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;number:  &quot;</span>&lt;&lt;number&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;level:   &quot;</span>;<br>    <span class="hljs-keyword">switch</span> (level)<br>    &#123;<br>        <span class="hljs-keyword">case</span> FRESHMAN: cout&lt;&lt;<span class="hljs-string">&quot;Freshman&quot;</span>&lt;&lt;endl;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> SOPHOMORE: cout&lt;&lt;<span class="hljs-string">&quot;Sophomore&quot;</span>&lt;&lt;endl;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> JUNIOR: cout&lt;&lt;<span class="hljs-string">&quot;Junior&quot;</span>&lt;&lt;endl;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> SENIOR: cout&lt;&lt;<span class="hljs-string">&quot;Senior&quot;</span>&lt;&lt;endl;<span class="hljs-keyword">break</span>;  <br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;grade:   &quot;</span>;<br>    <span class="hljs-keyword">switch</span> (grade)<br>    &#123;<br>        <span class="hljs-keyword">case</span> A: cout&lt;&lt;<span class="hljs-string">&quot;A&quot;</span>&lt;&lt;endl;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> B: cout&lt;&lt;<span class="hljs-string">&quot;B&quot;</span>&lt;&lt;endl;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> C: cout&lt;&lt;<span class="hljs-string">&quot;C&quot;</span>&lt;&lt;endl;<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> D: cout&lt;&lt;<span class="hljs-string">&quot;D&quot;</span>&lt;&lt;endl;<span class="hljs-keyword">break</span>;  <br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Student <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">12345678</span>,SOPHOMORE,B)</span></span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Size of Student:&quot;</span>&lt;&lt;<span class="hljs-built_in">sizeof</span>(Student)&lt;&lt;endl;<br>    s.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Chapter-5"><a href="#Chapter-5" class="headerlink" title="Chapter 5"></a>Chapter 5</h3><h4 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h4><h5 id="1-类的静态数据成员"><a href="#1-类的静态数据成员" class="headerlink" title="1. 类的静态数据成员"></a>1. 类的静态数据成员</h5><p>​<strong>静态数据成员具有静态生存期</strong>。由于静态数据成员不属于任何一个对象，因此可以通过类名对它进行访问，一般的用法是“类名：:标识符”。在类的定义中仅仅对静态数据成员进行引用性声明，必须在文件作用域的某个地方使用类名限定进行定义性声明，这时也可以进行初始化。C++11标准支持常量表达式类型修饰(constexpr 或 const)的静态常量在类内初始化，此时仍可在类外定义该静态成员，但不能做再次初始化操作。</p><h5 id="2-类的静态成员函数"><a href="#2-类的静态成员函数" class="headerlink" title="2. 类的静态成员函数"></a>2. 类的静态成员函数</h5><p>​<strong>静态成员函数可以直接访问该类的静态数据和函数成员</strong>。而访问非静态成员，必须通过对象名。通过静态函数成员访问非静态成员是相当麻烦的，一般情况下，它主要用来访问同一个类中的静态数据成员，维护对象之间共享的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> xx=<span class="hljs-number">0</span>,<span class="hljs-type">int</span> yy=<span class="hljs-number">0</span>):<span class="hljs-built_in">x</span>(xx),<span class="hljs-built_in">y</span>(yy) <br>        &#123; <br>            count++; <br>        &#125; <span class="hljs-comment">// 构造函数</span><br><br>        <span class="hljs-built_in">Point</span>(<span class="hljs-type">const</span> Point &amp;p):<span class="hljs-built_in">x</span>(p.x),<span class="hljs-built_in">y</span>(p.y) <br>        &#123; <br>            count++; <br>        &#125; <span class="hljs-comment">// 复制构造函数</span><br><br>        ~<span class="hljs-built_in">Point</span>() <br>        &#123; <br>            count--; <br>        &#125; <span class="hljs-comment">// 析构函数</span><br><br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br>        <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">showCount</span><span class="hljs-params">()</span> <span class="hljs-comment">//静态成员函数</span></span><br><span class="hljs-function">        </span>&#123; <br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Object count=%d\n&quot;</span>,count);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        void showCount() const </span><br><span class="hljs-comment">        &#123; </span><br><span class="hljs-comment">            printf(&quot;Object count=%d\n&quot;,count);</span><br><span class="hljs-comment">            return ;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        */</span><br>        <br><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">static</span> <span class="hljs-type">int</span> count; <span class="hljs-comment">// 静态数据成员声明</span><br>        <span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> origin=<span class="hljs-number">0</span>; <span class="hljs-comment">// 常量静态变量类内初始化</span><br>        <span class="hljs-type">int</span> x,y;<br>&#125;;<br><br><span class="hljs-type">int</span> Point::count=<span class="hljs-number">0</span>; <span class="hljs-comment">// 静态数据成员定义与初始化</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> Point::origin; <span class="hljs-comment">// 常量静态变量类外定义</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)</span></span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Point A:(%d,%d) &quot;</span>,a.<span class="hljs-built_in">getX</span>(),a.<span class="hljs-built_in">getY</span>());<br>    Point::<span class="hljs-built_in">showCount</span>();<br>    <span class="hljs-comment">//a.showCount();</span><br><br>    <span class="hljs-function">Point <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Point B:(%d,%d) &quot;</span>,b.<span class="hljs-built_in">getX</span>(),b.<span class="hljs-built_in">getY</span>());<br>    Point::<span class="hljs-built_in">showCount</span>();   <br>    <span class="hljs-comment">//b.showCount();</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类的友元（Friend-of-Class）"><a href="#类的友元（Friend-of-Class）" class="headerlink" title="类的友元（Friend of Class）"></a>类的友元（Friend of Class）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">friend function</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> xx=<span class="hljs-number">0</span>,<span class="hljs-type">int</span> yy=<span class="hljs-number">0</span>):<span class="hljs-built_in">x</span>(xx),<span class="hljs-built_in">y</span>(yy) &#123;&#125;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> x;&#125;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> y;&#125;<br>        <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(Point &amp;p1,Point &amp;p2)</span></span>;<br>    <br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">int</span> x,y;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(Point &amp;p1,Point &amp;p2)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> x=p<span class="hljs-number">1.</span>x-p<span class="hljs-number">2.</span>x;<br>    <span class="hljs-type">double</span> y=p<span class="hljs-number">1.</span>y-p<span class="hljs-number">2.</span>y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">float</span>&gt;(<span class="hljs-built_in">sqrt</span>(x*x+y*y));<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">friend class</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> x;&#125;<br>        <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>;<span class="hljs-comment">// //B类是A类的友元类</span><br><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">int</span> x;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <br>    <span class="hljs-keyword">private</span>:<br>        A a;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">B::set</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br>    a.x=i; <span class="hljs-comment">//由于B是A的友元，所以在B的成员函数中可以访问A类对象的私有成员</span><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">myp1</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)</span>,<span class="hljs-title">myp2</span><span class="hljs-params">(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)</span></span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;The distance is:&quot;</span>;<br>    cout&lt;&lt;<span class="hljs-built_in">dist</span>(myp1,myp2)&lt;&lt;endl;    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="mutable"><a href="#mutable" class="headerlink" title="mutable"></a>mutable</h4><p>​对于常成员函数，如果我们想让其能够改变某些数据成员的值，这需要用到一个新的关键字——<code>mutable</code>。对于这类数据成员，可以使用 <code>mutable</code>关键字加以修饰，这样，即使在常成员函数中，也可以修改它们的值。上面的类可以改写成下面的形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Line</span><span class="hljs-comment">//Line类的定义</span><br>&#123;<br><span class="hljs-keyword">public</span>: <span class="hljs-comment">//外部接口</span><br><span class="hljs-built_in">Line</span>(<span class="hljs-type">const</span> Point &amp;pl, <span class="hljs-type">const</span> Point &amp;p2):<span class="hljs-built_in">pl</span>(pl),<span class="hljs-built_in">p2</span>(p2),<span class="hljs-built_in">len</span>(<span class="hljs-number">-1</span>)&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getLen</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>    <br><span class="hljs-keyword">private</span>: <span class="hljs-comment">//私有数据成员</span><br>Point pl, p2; <span class="hljs-comment">//Point类的对象p1,p2</span><br><span class="hljs-keyword">mutable</span> <span class="hljs-type">double</span> len;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">line::getLen</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(len&lt;<span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-type">double</span> x=p<span class="hljs-number">1.</span><span class="hljs-built_in">getX</span>()-p<span class="hljs-number">2.</span><span class="hljs-built_in">getX</span>();<br><span class="hljs-type">double</span> y=p<span class="hljs-number">1.</span><span class="hljs-built_in">getY</span>()-p<span class="hljs-number">2.</span><span class="hljs-built_in">getY</span>();<br>len=<span class="hljs-built_in">sqrt</span>(x*x+y*y);<br>&#125;<br><span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用了 <code>mutable</code> 关键字后，就可以将 <code>getLen</code> 函数声明为常成员函数了。</p><h3 id="Chapter-6"><a href="#Chapter-6" class="headerlink" title="Chapter 6"></a>Chapter 6</h3><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><hr><p><strong>tips</strong>:</p><ul><li><p>可以声明指向常量的指针，此时不能通过指针来改变所指对象的值，但指针本身可以改变，可以指向另外的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *pl=&amp;a;<span class="hljs-comment">//p1是指向常量的指针</span><br><span class="hljs-type">int</span> b;<br>p1=&amp;b;<span class="hljs-comment">//正确，p1本身的值可以改变</span><br>*pl=<span class="hljs-number">1</span>;<span class="hljs-comment">//编译时出错，不能通过p1改变所指的对象</span><br></code></pre></td></tr></table></figure></li><li><p>可以声明指针类型的常量，这时指针本身的值不能被改变。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span>*<span class="hljs-type">const</span> p2=&amp;a;<br>p2=&amp;b; <span class="hljs-comment">//错误，p2是指针常量，值不能改变</span><br></code></pre></td></tr></table></figure></li><li><p>一般情况下，指针的值只能赋给相同类型的指针。但是有一种特殊的 void 类型指针，可以存储任何类型的对象地址，就是说任何类型的指针都可以赋值给 void类型的指针变量。经过使用类型显式转换，通过 void类型的指针便可以访问任何类型的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//!void voidobject; 错，不能声明 void类型的变量</span><br><span class="hljs-type">void</span> *pv;<span class="hljs-comment">//对，可以声明 void类型的指针</span><br><span class="hljs-type">int</span> i=<span class="hljs-number">5</span>;<br>pv=&amp;i; <span class="hljs-comment">//void类型指针指向整型变量</span><br><span class="hljs-type">int</span> *pint=<span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>*&gt;(pv); <span class="hljs-comment">//void类型指针赋值给 int类型指针</span><br>cout&lt;&lt;<span class="hljs-string">&quot;*pint=&quot;</span>&lt;&lt;*pint&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>int *p[3]</code> 和 <code>int (*p)[3]</code> 的区别</p><p>优先级的区别， <code>[]</code> 的优先级高于 <code>*</code> 。</p><p><code>int *p[3]</code> 表示包含三个整型指针的数组，<code>int (*p)[3] </code> 表示一个指向包含三个整数的数组的指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>, c = <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> *p[<span class="hljs-number">3</span>] = &#123;&amp;a, &amp;b, &amp;c&#125;;  <span class="hljs-comment">// 包含3个指针的数组</span><br>cout &lt;&lt; *p[<span class="hljs-number">0</span>] &lt;&lt; endl;  <span class="hljs-comment">// 输出 1</span><br>cout &lt;&lt; *p[<span class="hljs-number">1</span>] &lt;&lt; endl;  <span class="hljs-comment">// 输出 2</span><br><br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-built_in">int</span> (*p)[<span class="hljs-number">3</span>] = &amp;arr;  <span class="hljs-comment">// 指向整个数组的指针</span><br>cout &lt;&lt; (*p)[<span class="hljs-number">0</span>] &lt;&lt; endl;  <span class="hljs-comment">// 输出 1</span><br>cout &lt;&lt; (*p)[<span class="hljs-number">1</span>] &lt;&lt; endl;  <span class="hljs-comment">// 输出 2</span><br></code></pre></td></tr></table></figure></li></ul><hr><h5 id="函数返回数组指针"><a href="#函数返回数组指针" class="headerlink" title="函数返回数组指针"></a>函数返回数组指针</h5><ol><li><p>使用type definition</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>];<br><span class="hljs-comment">// using arr=int[10];</span><br><span class="hljs-function">arr <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>直接写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">int</span> (*<span class="hljs-built_in">foo</span>(<span class="hljs-type">int</span> i))[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure></li><li><p>尾置返回类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>-&gt; <span class="hljs-title">int</span> <span class="hljs-params">(*)</span>[10]</span>;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>decltype</code> 关键字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> b[]=&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-keyword">decltype</span>(a) *<span class="hljs-built_in">func</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    <span class="hljs-keyword">return</span> (i%<span class="hljs-number">2</span>) ? &amp;a : &amp;b;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h5 id="指向函数的指针"><a href="#指向函数的指针" class="headerlink" title="指向函数的指针"></a>指向函数的指针</h5><p>​在程序运行时，不仅数据要占据内存空间，执行程序的代码也被调入内存并占据一定的空间。每一个函数都有函数名，实际上这个函数名就表示函数的代码在内存中的起始地址。由此看来，调用函数的通常形式“函数名(参数表)”的实质就是“函数代码首地址(参数表)”。</p><p>​函数指针就是专门用来存放函数代码首地址的变量。在程序中可以像使用函数名一样使用指向函数的指针来调用函数。也就是说一旦函数指针指向了某个函数，它与函数名便具有同样的作用。函数名在表示函数代码起始地址的同时，也包括函数的返回值类型和参<br>数的个数、类型、排列次序等信息。因此在通过函数名调用函数时，编译系统能够自动检查实参与形参是否相符，用函数的返回值参与其他运算时，能自动进行类型一致性检查。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*DoubleIntFunction)</span><span class="hljs-params">(<span class="hljs-type">double</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> *p,<span class="hljs-type">const</span> <span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    DoubleIntFunction funcPtr=func;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;func(3.14)=%d\n&quot;</span>,<span class="hljs-built_in">funcPtr</span>(<span class="hljs-number">3.14</span>));<br><br>    <span class="hljs-built_in">void</span> (*funcPointer)(<span class="hljs-type">const</span> <span class="hljs-type">int</span> *,<span class="hljs-type">const</span> <span class="hljs-type">int</span> )=print;<br>    <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-built_in">funcPointer</span>(a,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="对象指针"><a href="#对象指针" class="headerlink" title="对象指针"></a>对象指针</h5><ol><li><p>对象指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">一般使用</span><br><span class="hljs-comment">*/</span><br>Point *ptr=&amp;a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,(*ptr).<span class="hljs-built_in">getX</span>(),ptr-&gt;<span class="hljs-built_in">getY</span>());<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">向前引用声明中的使用</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fred</span>;<span class="hljs-comment">//向前引用声明</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Barney</span><br>&#123;<br>    Fred *x;<br><span class="hljs-comment">//!Fred x;</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fred</span><br>&#123;<br>  ...  <br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li><p><code>this</code> 指针</p><p><strong><code>this</code> 指针是一个隐含于每一个类的非静态成员函数中的特殊指针(包括构造函数和析构函数),它用于指向正在被成员函数操作的对象</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Point::change</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> x,<span class="hljs-type">const</span> <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;x=x;<br>    <span class="hljs-keyword">this</span>-&gt;y=y;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>指向类的非静态成员的指针</p><p><code>(对象名.*类成员指针名)(参数表)</code> 或 <code>(对象指针名-&gt;*类成员指针名)(参数表)</code> 。</p></li><li><p>指向类的静态成员的指针</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">object pointer</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Barney</span><br>&#123;<br>    Point *x;<br><span class="hljs-comment">//! Point x; </span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Point</span>(<span class="hljs-type">const</span> <span class="hljs-type">int</span> _x=<span class="hljs-number">0</span>,<span class="hljs-type">const</span> <span class="hljs-type">int</span> _y=<span class="hljs-number">0</span>):<span class="hljs-built_in">x</span>(_x),<span class="hljs-built_in">y</span>(_y) <br>        &#123;<br>            count++;<br>        &#125;<br>        <span class="hljs-built_in">Point</span>(<span class="hljs-type">const</span> Point &amp;p):<span class="hljs-built_in">x</span>(p.x),<span class="hljs-built_in">y</span>(p.y)<br>        &#123;<br>            count++;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> x;&#125;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> y;&#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> x,<span class="hljs-type">const</span> <span class="hljs-type">int</span> y)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">showCount</span><span class="hljs-params">()</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PointCount=%d&quot;</span>,count);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-type">static</span> <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">int</span> x,y;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">this 指针</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Point::change</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> x,<span class="hljs-type">const</span> <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">this</span>-&gt;x=x;<br>    <span class="hljs-keyword">this</span>-&gt;y=y;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-type">int</span> Point::count=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)</span></span>;<br>    Point *p1=&amp;a;<br>    <span class="hljs-built_in">int</span> (Point::*funcPtrt)()<span class="hljs-type">const</span>=&amp;Point::getX;<br><br>    cout&lt;&lt;(a.*funcPtrt)()&lt;&lt;endl;<br>    cout&lt;&lt;(p1-&gt;*funcPtrt)()&lt;&lt;endl;<br>    cout&lt;&lt;a.<span class="hljs-built_in">getX</span>()&lt;&lt;endl;<br>    cout&lt;&lt;p1-&gt;<span class="hljs-built_in">getX</span>()&lt;&lt;endl;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    指针访问类的静态成员</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">int</span> *ptr=&amp;Point::count;<br>    <span class="hljs-built_in">void</span> (*fptr)()=Point::showCount;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PointCount=%d\n&quot;</span>,*ptr);<br>    <span class="hljs-built_in">fptr</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="string-类"><a href="#string-类" class="headerlink" title="string 类"></a><code>string</code> 类</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span></span>; <span class="hljs-comment">//将字符串s添加在本串尾</span><br><br><span class="hljs-function">string <span class="hljs-title">assign</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span></span>; <span class="hljs-comment">//赋值，将 s所指向的字符串赋值给本对象</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;str)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">//比较本串与 str串的大小，当本串&lt;str串时，返回负数，当本串&gt;str串时，返回正数，两串相等时，返回0</span><br><br><span class="hljs-function">string&amp;<span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> p0, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span></span>;<br><span class="hljs-comment">//将s所指向的字符串插入在本串中位置 p0 之前</span><br><br><span class="hljs-function">string <span class="hljs-title">substr</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> pos, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">//取子串，取本串中位置pos开始的n个字符，构成新的string类对象作为返回值</span><br><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> basic_string astr)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">//查找并返回 str在本串中第一次出现的位置</span><br><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span>;<br><span class="hljs-comment">//返回串的长度(字符个数)</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(string&amp; str)</span></span>;<br><span class="hljs-comment">//将本串与 str中的字符串进行交换</span><br></code></pre></td></tr></table></figure><h3 id="Chapter-7"><a href="#Chapter-7" class="headerlink" title="Chapter 7"></a>Chapter 7</h3><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><h5 id="1-公有继承"><a href="#1-公有继承" class="headerlink" title="1. 公有继承"></a>1. 公有继承</h5><p>​<strong>当类的继承方式为公有继承时，基类的公有和保护成员的访问属性在派生类中不变，而基类的私有成员不可直接访问</strong>。也就是说基类的公有成员和保护成员被继承到派生类中访问属性不变，仍作为派生类的公有成员和保护成员，派生类的其他成员可以直接访问它们。在类族之外只能通过派生类的对象访问从基类继承的公有成员，而无论是派生类的成员还是派生类的对象都无法直接访问基类的私有成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp">\\point.h<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __POINT_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __POINT_H__</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">float</span> x,y;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initPoint</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> x,<span class="hljs-type">const</span> <span class="hljs-type">float</span> y)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">this</span>-&gt;x=x;<br>            <span class="hljs-keyword">this</span>-&gt;y=y;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> offX,<span class="hljs-type">const</span> <span class="hljs-type">float</span> offY)</span></span><br><span class="hljs-function">        </span>&#123;<br>            x+=offX;<br>            y+=offY;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> x;&#125;<br>        <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> y;&#125;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>\\rectangle.h<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __RECTANGLE_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __RECTANGLE_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;point.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>: <span class="hljs-keyword">public</span> Point<br>&#123;<br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">float</span> w,h;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initRectangle</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> x,<span class="hljs-type">const</span> <span class="hljs-type">float</span> y,<span class="hljs-type">const</span> <span class="hljs-type">float</span> w,<span class="hljs-type">const</span> <span class="hljs-type">float</span> h)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-built_in">initPoint</span>(x,y);<br>            <span class="hljs-keyword">this</span>-&gt;w=w;<br>            <span class="hljs-keyword">this</span>-&gt;h=h;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getH</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> h;&#125;<br>        <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getW</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> w;&#125;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h5 id="2-私有继承"><a href="#2-私有继承" class="headerlink" title="2. 私有继承"></a>2. 私有继承</h5><p>​<strong>当类的继承方式为私有继承时，基类中的公有成员和保护成员都以私有成员身份出现在派生类中，而基类的私有成员在派生类中不可直接访问</strong>。也就是说基类的公有和保护成员被继承后作为派生类的私有成员，派生类的其他成员可以直接访问它们，但是在类族外部通过派生类的对象无法直接访问它们。无论是派生类的成员还是通过派生类的对象，都无法直接访问从基类继承的私有成员。</p><p>​经过私有继承之后，所有基类的成员都成为派生类的私有成员或不可直接访问的成员，如果进一步派生，基类的全部成员就无法在新的派生类中被直接访问。因此，私有继承之后，基类的成员再也无法在以后的派生类中直接发挥作用，实际是相当于终止了基类功能的继续派生，出于这种原因，一般情况下私有继承的使用比较少。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp">\\rectangle.h<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __RECTANGLE_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __RECTANGLE_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;point.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>: <span class="hljs-keyword">private</span> Point<br>&#123;<br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-type">float</span> w,h;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initRectangle</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> x,<span class="hljs-type">const</span> <span class="hljs-type">float</span> y,<span class="hljs-type">const</span> <span class="hljs-type">float</span> w,<span class="hljs-type">const</span> <span class="hljs-type">float</span> h)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-built_in">initPoint</span>(x,y);<br>            <span class="hljs-keyword">this</span>-&gt;w=w;<br>            <span class="hljs-keyword">this</span>-&gt;h=h;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">float</span> offX,<span class="hljs-type">const</span> <span class="hljs-type">float</span> offY)</span> </span>&#123;<span class="hljs-keyword">return</span> Point::<span class="hljs-built_in">move</span>(offX,offY);&#125;<br>        <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> Point::<span class="hljs-built_in">getX</span>();&#125;<br>        <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> Point::<span class="hljs-built_in">getY</span>();&#125;<br>        <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getH</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> h;&#125;<br>        <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getW</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span>&#123;<span class="hljs-keyword">return</span> w;&#125;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h5 id="3-保护继承"><a href="#3-保护继承" class="headerlink" title="3. 保护继承"></a>3. 保护继承</h5><p>​<strong>保护继承中，基类的公有和保护成员都以保护成员的身份出现在派生类中，而基类的私有成员不可直接访问</strong>。这样，派生类的其他成员就可以直接访问从基类继承来的公有和保护成员，但在类外部通过派生类的对象无法直接访问它们。</p><p>​比较私有继承和保护继承可以看出，实际上在直接派生类中，所有成员的访问属性都是完全相同的。但是，如果派生类作为新的基类，继续派生时，二者的区别就出现了。假设Rectangle类以私有方式继承了 Point类后，Rectangle类又派生出 Square类，那么 Square类的成员和对象都不能访问间接从 Point类中继承来的成员。如果 Rectangle类是以保护方式继承了 Point类，那么 Point类中的公有和保护成员在Rectangle类中都是保护成员。Rectangle类再派生出 Square类后，Point类中的公有和保护成员被 Square类间接继承后，有可能是保护的或者是私有的(视从 Rectangle到 Square的派生方式不同而不同)。因而，Square类的成员有可能可以访问间接从 Point类中继承来的成员。</p><h4 id="类型兼容规则"><a href="#类型兼容规则" class="headerlink" title="类型兼容规则"></a>类型兼容规则</h4><p>​<strong>类型兼容规则是指在需要基类对象的任何地方，都可以使用公有派生类的对象来替代</strong>。通过公有继承，派生类得到了基类中除构造函数、析构函数之外的所有成员。这样，公有派生类实际就具备了基类的所有功能，凡是基类能解决的问题，公有派生类都可以解决。类型兼容规则中所指的替代包括以下情况。</p><ul><li>派生类的对象可以隐含转换位基类对象。</li><li>派生类的对象可以初始化基类的引用。</li><li>派生类的指针可以隐含转换为基类的指针。</li></ul><p>在替代之后，派生类对象就可以作为基类的对象使用，但只能使用从基类继承的成员。</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span><span class="hljs-type">const</span> </span><br><span class="hljs-function">        </span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;Base1::display()&quot;</span>&lt;&lt;endl; <br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span>:<span class="hljs-keyword">public</span> Base1<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Base2::display()&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base2<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span><br><span class="hljs-function">        </span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;Derived::display()&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Base1 *ptr)</span></span><br><span class="hljs-function"></span>&#123;<br>    ptr-&gt;<span class="hljs-built_in">display</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Base1 base1;<br>    Base2 base2;<br>    Derived derived;<br>    <span class="hljs-built_in">fun</span>(&amp;base1);<br>    <span class="hljs-built_in">fun</span>(&amp;base2);<br>    <span class="hljs-built_in">fun</span>(&amp;derived);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="派生类的构造和析构函数"><a href="#派生类的构造和析构函数" class="headerlink" title="派生类的构造和析构函数"></a>派生类的构造和析构函数</h4><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><p>​<strong>构造派生类的对象时，就要对基类的成员对象和新增成员对象进行初始化。</strong></p><p>​派生类构造函数执行的一般顺序如下：</p><ol><li>调用基类构造函数，调用顺序按照它们被继承时声明的顺序（从左向右）。</li><li>对派生类新增的成员初始化，初始化顺序按照他们在类中声明的顺序。</li><li>执行派生类的构造函数中的内容。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base1</span>(<span class="hljs-type">int</span> i) &#123;cout&lt;&lt;<span class="hljs-string">&quot;Constructing Base1 &quot;</span>&lt;&lt;i&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base2</span>(<span class="hljs-type">int</span> j) &#123;cout&lt;&lt;<span class="hljs-string">&quot;Constructing Base2 &quot;</span>&lt;&lt;j&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base3</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base3</span>() &#123;cout&lt;&lt;<span class="hljs-string">&quot;Constructing Base3 *&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base2,<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base3<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Derived</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> d):<span class="hljs-built_in">Base1</span>(a),<span class="hljs-built_in">member2</span>(d),<span class="hljs-built_in">member1</span>(c),<span class="hljs-built_in">Base2</span>(d)<br>        &#123;&#125;<br>    <span class="hljs-keyword">private</span>:<br>        Base1 member1;<br>        Base2 member2;<br>        Base3 member3;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Derived <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">output</span><br><span class="hljs-comment">Constructing Base2 4</span><br><span class="hljs-comment">Constructing Base1 1</span><br><span class="hljs-comment">Constructing Base3 *</span><br><span class="hljs-comment">Constructing Base1 3</span><br><span class="hljs-comment">Constructing Base2 4</span><br><span class="hljs-comment">Constructing Base3 *</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h5><p>​派生类析构函数的执行顺序：</p><ol><li><p>执行析构函数的函数体。</p></li><li><p>对派生类邢增的类类型的成员对象进行清理。</p></li><li><p>对所有从基类继承来的成员进行清理。</p></li></ol><p>这些析构函数的调用次序，与对构造函数的调用次序刚好完全相反。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base1</span>(<span class="hljs-type">int</span> i) &#123;cout&lt;&lt;<span class="hljs-string">&quot;Constructing Base1 &quot;</span>&lt;&lt;i&lt;&lt;endl;&#125;<br>        ~<span class="hljs-built_in">Base1</span>() &#123;cout&lt;&lt;<span class="hljs-string">&quot;Destructing Base1&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base2</span>(<span class="hljs-type">int</span> j) &#123;cout&lt;&lt;<span class="hljs-string">&quot;Constructing Base2 &quot;</span>&lt;&lt;j&lt;&lt;endl;&#125;<br>        ~<span class="hljs-built_in">Base2</span>() &#123;cout&lt;&lt;<span class="hljs-string">&quot;Destructing Base2&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base3</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base3</span>() &#123;cout&lt;&lt;<span class="hljs-string">&quot;Constructing Base3 *&quot;</span>&lt;&lt;endl;&#125;<br>        ~<span class="hljs-built_in">Base3</span>() &#123;cout&lt;&lt;<span class="hljs-string">&quot;Destructing Base3&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base2,<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base3<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Derived</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> d):<span class="hljs-built_in">Base1</span>(a),<span class="hljs-built_in">member2</span>(d),<span class="hljs-built_in">member1</span>(c),<span class="hljs-built_in">Base2</span>(d)<br>        &#123;&#125;<br>    <span class="hljs-keyword">private</span>:<br>        Base1 member1;<br>        Base2 member2;<br>        Base3 member3;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Derived <span class="hljs-title">obj</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>\*<br>Constructing Base2 <span class="hljs-number">4</span><br>Constructing Base1 <span class="hljs-number">1</span><br>Constructing Base3 *<br>Constructing Base1 <span class="hljs-number">3</span><br>Constructing Base2 <span class="hljs-number">4</span><br>Constructing Base3 *<br>Destructing Base3<br>Destructing Base2<br>Destructing Base1<br>Destructing Base3<br>Destructing Base1<br>Destructing Base2<br>*/<br></code></pre></td></tr></table></figure><h4 id="派生类成员的标识与访问"><a href="#派生类成员的标识与访问" class="headerlink" title="派生类成员的标识与访问"></a>派生类成员的标识与访问</h4><h5 id="作用域分辨符"><a href="#作用域分辨符" class="headerlink" title="作用域分辨符"></a>作用域分辨符</h5><p>​对于在不同的作用域声明的标识符，可见性原则是：如果存在两个或多个具有包含关系的作用域，外层声明了一个标识符，而内层没有再次声明同名标识符，那么外层标识符在内层仍然可见；如果在内层声明了同名标识符，则外层标识符在内层不可见，这时称内层标识符<strong>隐藏</strong>了外层同名标识符，这种现象称为<strong>隐藏规则</strong>。</p><p>​在类的派生层次结构中，基类的成员和派生类新增的成员都具有类作用域，二者的作用范围不同，是相互包含的两个层，派生类在内层。这时，如果派生类声明了一个和某个基类成员同名的新成员，派生类的新成员就隐藏了外层同名成员，直接使用成员名只能访问到派生类的成员。<strong>如果派生类中声明了与基类成员函数同名的新函数，即使函数的参数表不同，从基类继承的同名函数的所有重载形式也都会被隐藏</strong>。如果要访问被隐藏的成员，就需要使用作用域分辨符和基类名来限定。</p><p>​对于多继承情况，首先考虑各个基类之间没有任何继承关系，同时也没有共同基类的情况。最典型的情况就是所有基类都没有上级基类。<strong>如果某派生类的多个基类拥有同名的成员，同时，派生类又新增这样的同名成员，在这种情况下，派生类成员将隐藏所有基类的同名成员</strong>。这时使用”对象名.成员名”或“对象指针名-&gt;成员名”方式可以唯一标识和访问派生类新增成员，基类的同名成员也可以使用基类名和作用域分辨符访问。但是，如果派生类没有声明同名成员，“对象名.成员名”或“对象指针名-&gt;成员名”方式就无法唯一标识成员，这时，从不同基类继承过来的成员具有相同的名称，同时具有相同的作用域，系统仅仅根据这些信息根本无法判断到底是调用哪个基类的成员，这时就必须通过基类名和作用域分辨符来标识成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> var;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Member of Base1&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> var;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Member of Base2&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base2<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> var;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Member of Derived&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Derived d;<br>    Derived *p=&amp;d;<br><br>    d.var=<span class="hljs-number">1</span>;            <span class="hljs-comment">//对象名.成员名标识</span><br>    d.<span class="hljs-built_in">fun</span>();            <span class="hljs-comment">//访问Derived类成员</span><br><br>    d.Base1::var=<span class="hljs-number">2</span>;     <span class="hljs-comment">//作用域分辨符标识</span><br>    d.Base1::<span class="hljs-built_in">fun</span>();     <span class="hljs-comment">//访问Base1基类成员</span><br><br>    p-&gt;Base2::var;      <span class="hljs-comment">//作用域分辨符表示</span><br>    p-&gt;Base2::<span class="hljs-built_in">fun</span>();    <span class="hljs-comment">//访问Base2基类成员</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​如果程序中的派生类不增加新成员，改为如下形式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base2 &#123;&#125;;<br></code></pre></td></tr></table></figure><p>那么程序区域部分保持原样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Derived d;<br>    derived *p=&amp;d;<br>    d.var=<span class="hljs-number">1</span>;<span class="hljs-comment">//错误，具有二义性</span><br>    d.<span class="hljs-built_in">fun</span>();<span class="hljs-comment">//错误</span><br>    d.Base1::var=<span class="hljs-number">2</span>;<br>    d.Base1::<span class="hljs-built_in">fun</span>();<br>    p-&gt;Base2::var=<span class="hljs-number">2</span>;<br>    p-&gt;Base2::<span class="hljs-built_in">fun</span>();<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">**细节**如果希望`d.var`和`d.fun()` 的用法不产生二义性，可以使用`using` 关键字加以澄清。例如：</code></pre> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base2<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">using</span> Base1::var;<br>    <span class="hljs-keyword">using</span> Base2::fun;<br>&#125;;<br></code></pre></td></tr></table></figure><pre><code class="hljs">这样以后基类的成员不会被隐藏，因此也可以实现函数的重载。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base2<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>     <span class="hljs-keyword">using</span> Base1::fun;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;...&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>​</p><h5 id="虚基类"><a href="#虚基类" class="headerlink" title="虚基类"></a>虚基类</h5><p>​当某类的部分或全部直接基类是从另一个共同基类派生而来时，在这些直接基类中从上一级共同基类继承来的成员就拥有相同的名称。在派生类的对象中，这些同名数据成员在内存中同时拥有多个副本，同一个函数名会有多个映射。我们可以使用作用域分辨符来唯一标识并分别访问它们，也可以<strong>将共同基类设置为虚基类，这时从不同的路径继承过来的同名数据成员在内存中就只有一个，同一个函数名也只有一个映射</strong>。这样就解决了同名成员的唯一标识问题。</p><p>​虚基类的声明是在派生类的定义过程中进行的，其语法形式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> 派生类:<span class="hljs-keyword">virtual</span> 继承方式 基类名<br></code></pre></td></tr></table></figure><p>​上述语句声明基类为派生类的虚基类。声明了虚基类之后，虚基类的成员在进一步派生过程中和派生类一起维护同一个内存数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base0</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> var0;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun0</span><span class="hljs-params">()</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Member of Base0&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base0<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> varl;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base0<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> var2;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base2<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-type">int</span> var;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fund</span><span class="hljs-params">()</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Member of Derived&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Derived d;<br>    d.var0=<span class="hljs-number">2</span>;   <span class="hljs-comment">//直接访问虚基类的数据成员</span><br>    d.<span class="hljs-built_in">fun0</span>();   <span class="hljs-comment">//直接访问虚基类的函数成员</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>注意</strong>  虚基类声明知识在类的派生过程中使用了 <code>virtual</code> 关键字。在程序主函数中，创建了一个派生类的对象 <code>d</code> ，通过函数成员名称就可以访问该类的成员 <code>var0</code> 和 <code> fun0</code> 。</p><h5 id="虚基类及其派生类构造函数"><a href="#虚基类及其派生类构造函数" class="headerlink" title="虚基类及其派生类构造函数"></a>虚基类及其派生类构造函数</h5><p>​如果虚基类声明有非默认形式的（即带形参的）构造函数，并且没有声明默认形式的构造函数，事情就比较麻烦了。这是，在整个继承关系中，直接或间接继承虚基类的所有派生类，都必须在构造函数的成员初始化列表中列出对虚基类的初始化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base0</span><br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base0</span>(<span class="hljs-type">int</span> var):<span class="hljs-built_in">var0</span>(var) &#123;&#125;<br>        <span class="hljs-type">int</span> var0;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun0</span><span class="hljs-params">()</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Member of Base 0&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base0<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base1</span>(<span class="hljs-type">int</span> var):<span class="hljs-built_in">Base0</span>(var) &#123;&#125;<br>        <span class="hljs-type">int</span> var1;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base2</span>:<span class="hljs-keyword">virtual</span> <span class="hljs-keyword">public</span> Base0<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Base2</span>(<span class="hljs-type">int</span> var):<span class="hljs-built_in">Base0</span>(var) &#123;&#125;<br>        <span class="hljs-type">int</span> var2;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>:<span class="hljs-keyword">public</span> Base1,<span class="hljs-keyword">public</span> Base2<br>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Derived</span>(<span class="hljs-type">int</span> var):<span class="hljs-built_in">Base0</span>(var),<span class="hljs-built_in">Base1</span>(var),<span class="hljs-built_in">Base2</span>(var) &#123;&#125;<br>        <span class="hljs-type">int</span> var;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;cout&lt;&lt;<span class="hljs-string">&quot;Member of Derived&quot;</span>&lt;&lt;endl;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Derived <span class="hljs-title">d</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;<br>    d.var0=<span class="hljs-number">2</span>;<br>    d.<span class="hljs-built_in">fun0</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>细节</strong>  构造一个类的对象的一般顺序是：</p><ul><li>如果该类有直接或间接的虚基类，则先执行虚基类的构造函数。</li><li>如果该类有其他基类，啧按照它们在继承声明列表中出现的次序，分别执行它们的构造函数，但构造过程中，不在执行他们的虚基类的构造函数。</li><li>按照在类定义中出现的顺序，对派生类中新增的成员对象进行初始化。对于类类型的成员对象，如果出现在构造函数初始化列表中，则以其中指定的参数执行构造函数，如未出现，则执行默认构造函数；对于基本数据类型的成员对象，如果出现在了构造函数的初始化列表中，则使用其中指定的值为其赋初值，否则什么也不做。</li><li>执行构造函数的函数体。</li></ul>]]></content>
    
    
    <categories>
      
      <category>programming-learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>电磁学</title>
    <link href="/2025/06/27/%E7%94%B5%E7%A3%81%E5%AD%A6/"/>
    <url>/2025/06/27/%E7%94%B5%E7%A3%81%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="静电学"><a href="#静电学" class="headerlink" title="静电学"></a>静电学</h2><h3 id="静电场"><a href="#静电场" class="headerlink" title="静电场"></a>静电场</h3><h4 id="真空中的静电场"><a href="#真空中的静电场" class="headerlink" title="真空中的静电场"></a>真空中的静电场</h4><p>库仑定律<br>$$<br>{\vec F}&#x3D;\frac{1}{4\pi \varepsilon_0}\frac{q_1q_2}{r^2}\hat r<br>$$<br>点电荷电场分布<br>$$<br>{\vec E}&#x3D;\frac{1}{4\pi \varepsilon_0}\frac{q}{r^2}\hat{r}<br>$$<br>Gauss定理<br>$$<br>\oiint_S{\vec E}\cdot {\rm d} {\vec S}&#x3D;\frac{q_{in}}{\varepsilon_0} \iff \nabla\cdot{\vec E}&#x3D;\frac{\rho_{in}}{\varepsilon_0}<br>$$<br>环路定理<br>$$<br>\oint_C{\vec E}\cdot {\rm d}\vec l&#x3D;0 \iff \nabla \times { {\vec E}}&#x3D;0<br>$$<br>由此可以得到电场对应的势函数$\varphi(\vec r)$。空间$\vec r$处（以 P 点为参考点）的电势定义为<br>$$<br>\varphi(\vec r)\triangleq -\int_{P}^{\vec r}\vec E\cdot {\rm d}\vec l<br>$$<br>满足叠加原理。</p><p>电势和电场的关系<br>$$<br>\begin{aligned}<br>&amp;{\rm d}\varphi&#x3D;\nabla\varphi\cdot{\rm d}\vec l&#x3D;-\vec E\cdot{\rm d}\vec l\<br>\end{aligned}<br>$$<br>即:<br>$$<br>\vec E&#x3D;-\nabla\varphi<br>$$<br>直角坐标系<br>$$<br>\vec E_{x}&#x3D;-\frac{\partial \varphi}{\partial x}\quad\vec E_y&#x3D;-\frac{\partial \varphi}{\partial y}\quad\vec E_z&#x3D;-\frac{\partial \varphi}{\partial z}<br>$$<br>柱坐标系<br>$$<br>\vec E_r&#x3D;-\frac{\partial \varphi}{\partial r}\quad\vec E_{\theta}&#x3D;-\frac{1}r\frac{\partial \varphi}{\partial\theta}\quad \vec E_{z}&#x3D;-\frac{\partial \varphi}{\partial z}<br>$$<br>球坐标系<br>$$<br>\vec E_r&#x3D;-\frac{\partial \varphi}{\partial r}\quad\vec E_{\theta}&#x3D;-\frac{1}r\frac{\partial \varphi}{\partial\theta}\quad \vec E_{\phi}&#x3D;-\frac1{r\sin\phi}\frac{\partial \varphi}{\partial \phi}<br>$$</p><p>泊松方程<br>$$<br>\nabla\cdot\vec E&#x3D;-\nabla^2 \varphi&#x3D;\frac{\rho_0}{\varepsilon_0}<br>$$<br>边值关系<br>$$<br>\hat n\times(\vec E_2-\vec E_1)&#x3D;0\<br>\hat n\cdot(\vec E_2-\vec E_1)&#x3D;\frac{\sigma_e}{\varepsilon_0}<br>$$</p><h4 id="导体和电介质中的静电场"><a href="#导体和电介质中的静电场" class="headerlink" title="导体和电介质中的静电场"></a>导体和电介质中的静电场</h4><p>$$<br>\vec E&#x3D;\vec E_0+\vec E’<br>$$</p><p>其中$\vec E’$为退极化场。</p><p>1.导体</p><p>静电屏蔽，$\vec E’&#x3D;-\vec E_0$，因此$\vec E&#x3D;0$。</p><p>2.电介质</p><p><strong>电极化强度矢量</strong><br>$$<br>\vec P&#x3D;\lim_{\Delta V\rightarrow0}\frac{\vec p}{\Delta V}<br>$$<br>任一区域$V$内所包围的极化电荷的净电量<br>$$<br>Q’&#x3D;-\oiint _{\partial V}\vec P\cdot\mathrm{d}\vec S \iff \rho’&#x3D;-\nabla\cdot \vec P<br>$$<br>极化电荷面密度<br>$$<br>\sigma’&#x3D;\hat n\cdot(\vec P_2-\vec P_1)<br>$$<br>极化规律（本构方程）<br>$$<br>\vec P&#x3D;\chi_e\varepsilon_0\vec E<br>$$<br>其中$\chi_e$为极化率。</p><p><strong>电位移矢量</strong><br>$$<br>\vec D&#x3D;\varepsilon_0\vec E+\vec P<br>$$<br>满足<br>$$<br>\oiint_S \vec D\cdot\mathrm d\vec S&#x3D;\iiint_V \rho_{free}\mathrm d V \iff \nabla\cdot\vec D&#x3D;\rho_{free}<br>$$</p><p>边值关系<br>$$<br>\hat n\cdot(\vec D_2-\vec D_1)&#x3D;\sigma_{free}<br>$$<br>本构方程<br>$$<br>\vec D&#x3D;\varepsilon_0\varepsilon_r\vec E<br>$$<br>其中$\varepsilon_r&#x3D;1+\chi_e$。</p><h4 id="能量"><a href="#能量" class="headerlink" title="能量"></a>能量</h4><p>带电体系的静电互能<br>$$<br>W_{互}&#x3D;\frac12\sum_{i}q_iU_i<br>$$<br>其中$U_i$表示除去$q_i$后,其他电荷产生的电势。</p><p>静电能<br>$$<br>W_e&#x3D;\frac 12\iiint_V\rho U_i\mathrm dV<br>$$<br>电场的能量密度<br>$$<br>w_e&#x3D;\frac 12\vec D\cdot\vec E&#x3D;\frac 12\varepsilon_0\varepsilon_rE^2<br>$$</p><h4 id="恒定电流"><a href="#恒定电流" class="headerlink" title="恒定电流"></a>恒定电流</h4><p>电流强度<br>$$<br>\vec j&#x3D;\frac{I}{S_{\hat n}}\hat n&#x3D;nq\vec  v<br>$$</p><p>满足<br>$$<br>\oiint_S\vec j\cdot \mathrm d\vec S&#x3D;-\frac{\mathrm d}{\mathrm dt}\iiint_V\rho\mathrm dV\iff\nabla \cdot\vec j&#x3D;-\partial_t\rho<br>$$<br>欧姆定律<br>$$<br>\vec j&#x3D;\sigma\vec E<br>$$<br>其中$\sigma$为电导率。</p><h2 id="磁学"><a href="#磁学" class="headerlink" title="磁学"></a>磁学</h2><p><strong>安培定律</strong><br>$$<br>\mathrm d \vec F_{12}&#x3D;\frac{\mu_0}{4\pi}I_1I_2\frac{\mathrm d\vec l_1\times(\mathrm d\vec l_2\times\hat r_{12})}{r_{12}^2}<br>$$<br>闭合回路载流项圈的安培力满足牛顿第三定律<br>$$<br>\begin{aligned}<br>\vec F_{12}&amp;&#x3D;k\oint_{C_1}\oint_{C_2}\frac{\mathrm d\vec l_1\times(\mathrm d\vec l_2\times\hat r_{12})}{r_{12}^2}\<br>&amp;&#x3D;k\oint_{C_1}\oint_{C_2}\frac{(\mathrm d\vec l_1\cdot\hat r_{12})\mathrm d \vec l_2-(\mathrm d\vec l_1\cdot\mathrm d\vec l_2)\hat r_{12}}{r_{12}^2}\<br>&amp;&#x3D;k\oint_{C_1}\oint_{C_2}\frac{[\vec l_1\cdot(\vec r_{o2}+\vec r_1)]\mathrm d \vec l_2-(\mathrm d\vec l_1\cdot\mathrm d\vec l_2)\vec r_{12}}{r_{12}^3}\<br>&amp;&#x3D;-k\oint_{C_1}\oint_{C_2}\frac{(\mathrm d\vec l_1\cdot\mathrm d\vec l_2)\vec r_{12}}{r_{12}^3}\<br>&amp;&#x3D;-\vec F_{21}<br>\end{aligned}<br>$$</p><p>毕奥—萨伐尔定律<br>$$<br>\vec B&#x3D;\frac {\mu_0} {4\pi}\oint_{C}\frac{\mathrm{d}\vec l\times\hat r}{r^2}<br>$$<br>任意载流线圈的磁场<br>$$<br>\begin{aligned}<br>\vec B\cdot\mathrm d\vec l&amp;&#x3D;\frac{\mu_0}{4\pi}\oint_C\frac{\mathrm d\vec l’\times\hat \R}{\R^2}\cdot\mathrm d\vec l\<br>&amp;&#x3D;\frac{\mu_0}{4\pi}\oint_C\frac{(-\hat \R)\cdot[(-\mathrm d\vec l)\times\mathrm d \vec l’]}{\R^2}\<br>&amp;&#x3D;\frac{\mu_0}{4\pi}\oint_C\frac{(-\hat \R)\cdot \mathrm d\vec S_{侧}}{\R^2}\<br>&amp;&#x3D;\frac{\mu_0}{4\pi}\Omega_{侧}<br>\end{aligned}<br>$$<br>因此<br>$$<br>\vec B&#x3D;\frac{\mu_0}{4\pi}\nabla\Omega<br>$$</p><h4 id="静磁场的基本规律"><a href="#静磁场的基本规律" class="headerlink" title="静磁场的基本规律"></a>静磁场的基本规律</h4><p>高斯定律<br>$$<br>\oiint_S\vec B\cdot \mathrm d \vec S&#x3D;0 \iff \nabla\cdot \vec B&#x3D;0<br>$$<br>安培环路定律<br>$$<br>\oint_C\vec B\cdot \mathrm d\vec l&#x3D;\mu_0\oiint _S\vec j\cdot \mathrm d\vec S \iff \nabla\times\vec B&#x3D;\mu_0\vec j<br>$$<br>边值关系<br>$$<br>\hat n\times(\vec B_2-\vec B_1)&#x3D;\mu_0\vec K\<br>\hat n\cdot(\vec B_2-B_1)&#x3D;0<br>$$</p><h4 id="磁场对电流的作用"><a href="#磁场对电流的作用" class="headerlink" title="磁场对电流的作用"></a>磁场对电流的作用</h4><p>安培力<br>$$<br>\vec F&#x3D;\int(\mathrm d\vec I\times \vec B_e)\<br>\vec \tau&#x3D;\int [\vec r\times(\mathrm d\vec I\times \vec B_e)]<br>$$<br>对于载流线圈</p><p>安培力<br>$$<br>\begin{aligned}<br>\vec F\cdot\mathrm d\vec l’&#x3D;&amp;\mathrm d\vec l’\cdot I\oint_c(\mathrm d\vec l\times \vec B_e)\<br>&#x3D;&amp;I\oint_C[\vec B_e\cdot(\mathrm d\vec l’\times \mathrm d\vec l)]\<br>&#x3D;&amp;I\Phi_{侧}<br>\end{aligned}<br>$$<br>即<br>$$<br>\vec F&#x3D;I\nabla\Phi<br>$$<br>安培力矩<br>$$<br>\begin{aligned}<br>\vec \tau&#x3D;&amp;I\oint_C[\vec r\times(\mathrm d\vec r\times \vec B_e)]\<br>&#x3D;&amp;\frac 12I\oint[\vec r\times(\mathrm d\vec r\times\vec B_e)+\mathrm d\vec r\times(\vec r\times \vec B_e)]\<br>+&amp;\frac 12I\oint[\vec r\times(\mathrm d\vec r\times \vec B_e)-\mathrm d\vec r\times(\vec r\times\vec B_e)]\</p><p>\end{aligned}<br>$$<br>当外场$\vec B_e$均匀时<br>$$<br>\begin{aligned}<br>\vec r\times (\mathrm d\vec r\times \vec B_e)+\mathrm d\vec r\times(\vec r\times \vec B_e)&#x3D;&amp;\mathrm d[\vec r\times(\vec r\times B_e)]\<br>\vec r\times (\mathrm d\vec r\times \vec B_e)-\mathrm d\vec r\times(\vec r\times \vec B_e)&#x3D;&amp;(\vec r \cdot \vec B_e)\mathrm d\vec r-(\mathrm d\vec r\cdot \vec B_e)\vec r&#x3D;\vec B_e\times(\mathrm d\vec r\times\vec r)<br>\end{aligned}<br>$$<br>那么<br>$$<br>\vec\tau&#x3D;\frac 12[I\oint(\vec r\times \mathrm d\vec r)]\times \vec B_e&#x3D;\vec m\times\vec B_e<br>$$</p><h4 id="磁场中的带电粒子"><a href="#磁场中的带电粒子" class="headerlink" title="磁场中的带电粒子"></a>磁场中的带电粒子</h4><p>洛伦兹力<br>$$<br>\vec F&#x3D;q\vec v\times \vec B<br>$$</p><h4 id="电磁感应"><a href="#电磁感应" class="headerlink" title="电磁感应"></a>电磁感应</h4><p>法拉第电磁感应定律</p><p>$$<br>\varepsilon&#x3D;-\frac{\mathrm d \Phi}{\mathrm d t}<br>$$</p><p>1.动生电动势<br>$$<br>\varepsilon&#x3D;\int(\vec v\times \vec B)\cdot\mathrm d\vec l<br>$$<br>2.感生电动势<br>$$<br>\varepsilon&#x3D;-\frac{\mathrm d\Phi}{\mathrm dt}&#x3D;-\frac{\mathrm d}{\mathrm d t}\iint _S\vec B\cdot \mathrm d \vec S<br>$$<br>其中<br>$$<br>\frac {\mathrm d}{\mathrm d t}&#x3D;\frac{\partial}{\partial t}+v\cdot\nabla<br>$$<br>有<br>$$<br>\begin{aligned}<br>-\frac{\mathrm d}{\mathrm dt}\iint_S\vec B\cdot\mathrm d\vec S&#x3D;&amp;-\iint _S[\frac{\partial\vec B}{\partial t}+(\vec v\cdot\nabla)\vec B]\cdot\mathrm d\vec S<br>\end{aligned}<br>$$<br>本阶段认为$\vec v&#x3D;\mathbf{0}$</p><p>假设空间中存在涡旋电场<br>$$<br>\oint_C\vec E_{旋}\cdot\mathrm d\vec l&#x3D;-\iint <em>S\frac{\partial\vec B}{\partial t}\cdot\vec S\iff\nabla\times\vec E</em>{旋}&#x3D;-\frac{\partial \vec B}{\partial t}<br>$$<br>由$\nabla \cdot \vec B&#x3D;0$引入磁矢势$\vec A$，满足<br>$$<br>\vec B&#x3D;\nabla\times \vec A<br>$$<br>那么有<br>$$<br>\vec E_{旋}&#x3D;-\frac{\partial \vec A}{\partial t}\<br>\oint_C\vec A\cdot\mathrm d\vec l&#x3D;\iint_S\vec B\cdot\mathrm d\vec S<br>$$<br>由泊松方程（认为$\nabla\cdot\vec A&#x3D;0$）<br>$$<br>\nabla\times(\nabla\times \vec A)&#x3D;\nabla(\nabla\cdot\vec A)-\nabla^2\vec A&#x3D;\mu_0\vec j\<br>\Rightarrow\nabla^2\vec A&#x3D;-\mu_0\vec j<br>$$<br>有<br>$$<br>\vec A(\vec r)&#x3D;\frac{\mu_0}{4\pi}\int\frac{\mathrm d\vec I}{R}<br>$$</p><h4 id="静磁场中的磁介质"><a href="#静磁场中的磁介质" class="headerlink" title="静磁场中的磁介质"></a>静磁场中的磁介质</h4><p>介质的磁化<br>$$<br>\vec M&#x3D;\lim_{\Delta V\rightarrow0}\frac{\sum \vec m_{分子}}{\Delta V}<br>$$<br>磁化电流<br>$$<br>\vec j’&#x3D;\nabla\times\vec M<br>$$<br>在介质交界处<br>$$<br>\hat n\times(\vec M_2-\vec M_1)&#x3D;\vec K’<br>$$<br>定义磁场强度<br>$$<br>\vec H&#x3D;\frac{\vec B}{\mu_0}-\vec M\<br>\Rightarrow \nabla\times \vec H&#x3D;\mu_0\vec j_0<br>$$<br> 本构方程<br>$$<br>\vec M&#x3D;\chi_m\vec H\<br>\vec B&#x3D;\mu_0(\vec H+\vec M)&#x3D;\mu_0\mu_r\vec H<br>$$<br>边值关系<br>$$<br>\hat n\cdot(\vec B_2-\vec B_1)&#x3D;0\<br>\hat n\times(\vec H_2-\vec H_1)&#x3D;\vec K_0<br>$$</p><h3 id="麦克斯韦电磁理论"><a href="#麦克斯韦电磁理论" class="headerlink" title="麦克斯韦电磁理论"></a>麦克斯韦电磁理论</h3><p>$$<br>\begin{aligned}<br>&amp;\nabla\cdot\vec D&#x3D;\rho_{free}\<br>&amp;\nabla\times\vec E&#x3D;-\frac{\partial \vec B}{\partial t}\<br>&amp;\nabla\cdot\vec B&#x3D;0\<br>&amp;\nabla\times\vec H&#x3D;\vec j_0+\frac{\partial \vec D}{\partial t}<br>\end{aligned}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>Physics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vector Algebra</title>
    <link href="/2025/06/23/Vector%20Algebra/"/>
    <url>/2025/06/23/Vector%20Algebra/</url>
    
    <content type="html"><![CDATA[<p>Thanks to <a href="https://space.bilibili.com/1869465856">Mr. Kong</a></p><h2 id="Vector-Formulas"><a href="#Vector-Formulas" class="headerlink" title="Vector Formulas"></a>Vector Formulas</h2><p>$$<br>\begin{aligned}<br>&amp;\mathbf{a}\cdot(\mathbf{b}\times\mathbf{c})&#x3D; \mathbf{b}\cdot(\mathbf{c}\times\mathbf{a})&#x3D;\mathbf{c}\cdot(\mathbf{a}\times\mathbf{b})\<br>&amp;\mathbf{a}\times(\mathbf{b}\times\mathbf{c})&#x3D;(\mathbf{a}\cdot \bf{c})\bf{b}-(\bf{a}\cdot \bf{b})\bf{c}\<br>&amp;\bf{(a\times b)\cdot(c\times d)}&#x3D; \bf{(a\cdot c)(b\cdot d)-(a\cdot d)(b\cdot c)}\<br>&amp;\nabla\times\nabla \psi&#x3D;0\<br>&amp;\nabla\cdot(\nabla\times\bf{a})&#x3D;0\<br>&amp;\nabla\times(\nabla\times\bf{a})&#x3D;\nabla(\nabla\cdot \bf{a})-\nabla^2\bf{a}\<br>&amp;\nabla\cdot(\psi\bf{a})&#x3D;\bf{a}\cdot\nabla\psi+\psi\nabla\cdot\bf{a}\<br>&amp;\nabla\times(\psi\bf{a})&#x3D;\nabla\psi\times\bf{a}+\psi\nabla\times\bf{a}\<br>&amp;\nabla(\bf{a}\cdot\bf{b})&#x3D;(\bf{a}\cdot\nabla)\bf{b}+(\bf{b}\cdot\nabla)\bf{a}+\bf{a}\times(\nabla\times\bf{b})+\bf{b}\times(\nabla\times\bf{a})\<br>&amp;\nabla\cdot(\bf{a}\times\bf{b})&#x3D;\bf{b}\cdot(\nabla\times\bf{a})-\bf{a}\cdot(\nabla\times\bf{b})\<br>&amp;\nabla\times(\bf{a}\times\bf{b})&#x3D;\bf{a}(\nabla\cdot\bf{b})-\bf{b}(\nabla\cdot\bf{a})+(\bf{b}\cdot\nabla)\bf{a}-(\bf{a}\cdot\nabla)\bf{b}<br>\end{aligned}<br>$$</p><h2 id="Einstein-Summation"><a href="#Einstein-Summation" class="headerlink" title="Einstein Summation"></a>Einstein Summation</h2><p>a 3D vector $\bf{A}$ can be written as<br>$$<br>\mathbf{A}&#x3D;\sum_{i&#x3D;1}^{3}A_i\hat{e_i}\equiv A_i\hat{e_i}<br>$$</p><ul><li>scalar product:<br>$$<br>\mathbf{A\cdot B}&#x3D;\sum_{i&#x3D;1}^{3}A_iB_i\equiv A_iB_i<br>$$</li><li>vector product:<br>$$<br>\mathbf{(A\times B)}<em>i&#x3D;\sum</em>{j,k&#x3D;1}^{3}\epsilon_{ijk}A_jB_k\equiv \epsilon_{ijk}A_jB_k<br>$$<blockquote><p>Levi-Civita tensor:<br>$$<br>\epsilon_{ijk}&#x3D;<br>\begin{cases}<br>1\quad \quad \text{if}\ ijk\ \text{is an even permutation of 123} \<br>-1\quad \ \text{if}\ ijk\ \text{is an odd permutation of 123}\<br>0\quad\quad \text{otherwise}<br>\end{cases}<br>$$<br>satisfy:<br>$$<br>\epsilon_{ijk}&#x3D;-\epsilon_{jik}\<br>\epsilon_{ijk}\epsilon_{ilm}&#x3D;\delta_{jl}\delta_{km}-\delta_{jm}\delta_{kl}<br>$$</p></blockquote></li></ul><h2 id="Subscript-Notation"><a href="#Subscript-Notation" class="headerlink" title="Subscript Notation"></a>Subscript Notation</h2><ul><li>The gradient operator $\nabla$<br>$$<br>\nabla \rightarrow \partial_i<br>$$</li><li>The gradient of a scalar function $\phi$<br>$$<br>\nabla\phi\rightarrow\partial_i\phi<br>$$</li><li>The divergence of a vector $A_i$</li></ul><p>$$<br>\nabla\cdot\mathbf{A}&#x3D;\partial_iA_i<br>$$</p><ul><li>The Laplacian operator<br>$$<br>\nabla^2&#x3D;\nabla\cdot\nabla&#x3D;\partial_i\partial_i&#x3D;\partial^2_{ii}<br>$$</li><li>The curl of a vector $A_i$<br>$$<br>\nabla \times \mathbf{A}\rightarrow \epsilon_{ijk}\partial_{j}A_k<br>$$</li></ul><h2 id="Proofs-of-Vector-Algebraic-Formulas"><a href="#Proofs-of-Vector-Algebraic-Formulas" class="headerlink" title="Proofs of Vector Algebraic Formulas"></a>Proofs of Vector Algebraic Formulas</h2><p>$(1)\ \mathbf{A}\cdot(\mathbf{B}\times\mathbf{C})&#x3D; \mathbf{B}\cdot(\mathbf{C}\times\mathbf{A})&#x3D;\mathbf{C}\cdot(\mathbf{A}\times\mathbf{B})$</p><p>Proof:<br>$$<br>\mathbf{A\cdot(B\times C)}&#x3D;A_i(\mathbf{B\times C})<em>i&#x3D;\epsilon</em>{ijk}A_iB_jC_k\<br>\mathbf{B\cdot(C\times A)}&#x3D;B_i(\mathbf{C\times A})<em>i&#x3D;\epsilon</em>{ijk}B_iC_jA_k\<br>\epsilon_{ijk}B_iC_jA_k&#x3D;-\epsilon_{jik}B_jC_iA_k&#x3D;\epsilon_{jki}B_jC_kA_i&#x3D;\epsilon_{ijk}A_iB_jC_k\<br>$$<br>thus,<br>$$<br>\mathbf{A}\cdot(\mathbf{B}\times\mathbf{C})&#x3D; \mathbf{B}\cdot(\mathbf{C}\times\mathbf{A})&#x3D;\mathbf{C}\cdot(\mathbf{A}\times\mathbf{B})<br>$$</p><p>$(2)\ \mathbf{A}\times(\mathbf{B}\times\mathbf{C})&#x3D;(\mathbf{A}\cdot \bf{C})\bf{B}-(\bf{A}\cdot \bf{B})\bf{C}$</p><p>Proof:<br>$$<br>\begin{aligned}<br>(l.s.h)<em>i&amp;&#x3D;\epsilon</em>{ijk}A_j(\mathbf{B\times C})<em>k\<br>&amp;&#x3D;\epsilon</em>{ijk}A_j\epsilon_{klm}B_lC_m\<br>&amp;&#x3D;(\delta_{il}\delta_{jm}-\delta_{im}\delta_{jl})A_jB_lC_m\<br>&amp;&#x3D;(A_jC_j)B_i-(A_jB_j)C_i&#x3D;(r.h.s)_i<br>\end{aligned}<br>$$</p><p>$(3)\ \bf{(A\times B)\cdot(C\times D)}&#x3D; \bf{(A\cdot C)(B\cdot D)-(A\cdot D)(B\cdot C)}$</p><p>Proof:<br>$$<br>\begin{aligned}<br>l.h.s&amp;&#x3D;\epsilon_{ijk}A_jB_k\epsilon_{ilm}C_lD_m\<br>&amp;&#x3D;(\delta_{jl}\delta_{km}-\delta_{jm}\delta_{kl})A_jB_kC_lD_m\<br>&amp;&#x3D;(A_jC_j)(B_kD_k)-(A_jD_j)(B_kC_k)&#x3D;r.h.s<br>\end{aligned}<br>$$<br>$(4)\ \nabla\times\nabla \phi&#x3D;\mathbf{0} $</p><p>Proof:<br>$$<br>\begin{aligned}<br>(l.h.s)<em>i&amp;&#x3D;\epsilon</em>{ijk}\partial_j\partial_k\phi&#x3D;\epsilon_{ijk}\partial_{jk}^2\phi\<br>&amp;&#x3D;-\epsilon_{ikj}\partial_{kj}^2\phi&#x3D;-(l.h.s)_i&#x3D;0<br>\end{aligned}<br>$$</p><p>$(5)\ \nabla\cdot(\nabla\times\mathbf{A})&#x3D;0$</p><p>Proof:<br>$$<br>l.h.s&#x3D;\partial_i\epsilon_{i,j,k}\partial_jA_k&#x3D;0<br>$$</p><p>$(6)\ \nabla\times(\nabla\times\bf{A})&#x3D;\nabla(\nabla\cdot \bf{A})-\nabla^2\bf{A}$</p><p>Proof:<br>$$<br>\begin{aligned}<br>(r.h.s)<em>i&amp;&#x3D;\epsilon</em>{ijk}\partial_j\epsilon_{klm}\partial_lA_m\<br>&amp;&#x3D;(\delta_{il}\delta_{jm}-\delta_{im}\delta_{jl})\partial_{j}\partial_{l}A_m\<br>&amp;&#x3D;\partial_{j}\partial_{i}A_j-\partial_{jj}^2A_i&#x3D;(r.h.s)_i<br>\end{aligned}<br>$$</p><p>$(7)\ \nabla\cdot(\phi\bf{A})&#x3D;\bf{A}\cdot\nabla\phi+\phi\nabla\cdot\bf{A}$</p><p>Proof:<br>$$<br>l.h.s&#x3D;\partial_i(\phi A_i)&#x3D;A_i\partial_i\phi+\phi\partial_iA_i&#x3D;r.h.s<br>$$<br>$(8)\ \nabla\times(\psi\bf{A})&#x3D;\nabla\phi\times\bf{A}+\phi\nabla\times\bf{A}$</p><p>Proof:<br>$$<br>\begin{aligned}<br>(l.h.s)<em>i&amp;&#x3D;\epsilon</em>{ijk}\partial_j(\phi A_k)&#x3D;\epsilon_{ijk}(\phi\partial_j A_k+A_k\partial_j \phi)&#x3D;(r.h.s)_i<br>\end{aligned}<br>$$</p><p>$(9)\ \nabla(\bf{A}\cdot\bf{B})&#x3D;(\bf{A}\cdot\nabla)\bf{B}+(\bf{B}\cdot\nabla)\bf{A}+\bf{A}\times(\nabla\times\bf{B})+\bf{B}\times(\nabla\times\bf{A})$</p><p>Proof:<br>$$<br>\begin{aligned}<br>\mathbf{A\times(\nabla\times B)}&amp;&#x3D;\epsilon_{ijk}A_j\epsilon_{klm}\partial_lB_m\<br>&amp;&#x3D;(\delta_{il}\delta_{jm}-\delta_{im}\delta_{jl})A_j\partial_lB_m\<br>&amp;&#x3D;A_j\partial_{i}B_j-A_j\partial_jB_i\<br>\mathbf{B\times(\nabla\times A)}&amp;&#x3D;\epsilon_{ijk}B_j\epsilon_{klm}\partial_lA_m\<br>&amp;&#x3D;(\delta_{il}\delta_{jm}-\delta_{im}\delta_{jl})B_j\partial_lA_m\<br>&amp;&#x3D;B_j\partial_{i}A_j-B_j\partial_jA_i\<br>\end{aligned}<br>$$<br>thus,<br>$$<br>\begin{aligned}<br>&amp;\mathbf{A\times(\nabla\times B)+B\times(\nabla\times A)}\<br>&#x3D;&amp;A_j\partial_{i}B_j-A_j\partial_jB_i+B_j\partial_{i}A_j-B_j\partial_jA_i\<br>&#x3D;&amp;\partial_j{A_iB_i}-A_j\partial_jB_i-B_j\partial_jA_i\<br>&#x3D;&amp;\mathbf{\nabla(A\cdot B)-(A\cdot\nabla)B-(B\cdot\nabla)A}<br>\end{aligned}<br>$$</p><p>$(10)\ \nabla\cdot(\bf{A}\times\bf{B})&#x3D;\bf{B}\cdot(\nabla\times\bf{A})-\bf{A}\cdot(\nabla\times\bf{B})$</p><p>Proof:<br>$$<br>\begin{aligned}<br>l.h.s&amp;&#x3D;\partial_i\epsilon_{ijk}A_jB_k&#x3D;B_k\epsilon_{ijk}\partial_iA_j+A_j\epsilon_{ijk}\partial_iB_k\<br>&amp;&#x3D;B_k\epsilon_{kij}\partial_iA_j-A_j\epsilon_{jik}\partial_{i}B_k&#x3D;r.h.s<br>\end{aligned}<br>$$</p><p>$(11)\ \nabla\times(\bf{A}\times\bf{B})&#x3D;\bf{A}(\nabla\cdot\bf{B})-\bf{B}(\nabla\cdot\bf{A})+(\bf{B}\cdot\nabla)\bf{A}-(\bf{A}\cdot\nabla)\bf{B}<br>$</p><p>Proof:<br>$$<br>\begin{aligned}<br>(l.h.s)<em>i&amp;&#x3D;\epsilon</em>{ijk}\partial_j(\epsilon_{klm}A_lB_m)\<br>&amp;&#x3D;(\delta_{il}\delta_{jm}-\delta_{im}\delta_{jl})(A_l\partial_jB_m+B_m\partial_jA_l)\<br>&amp;&#x3D;A_i\partial_jB_j-A_j\partial_jB_i+B_j\partial_jA_i-B_i\partial_jA_j&#x3D;(r.h.s)_i<br>\end{aligned}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>Physics</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OI做题记录</title>
    <link href="/2025/06/22/OI%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2025/06/22/OI%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="ZJOI2015-地震后的幻想乡"><a href="#ZJOI2015-地震后的幻想乡" class="headerlink" title="[ZJOI2015]地震后的幻想乡"></a>[ZJOI2015]地震后的幻想乡</h2><p>考虑到 $n \le 10$ ，所以大概率状压。 </p><p>题目要求的其实就是最小生成树上最大边在所有边中的排名。考虑当前排名为 $i$ ，排名向后一次产生的贡献为 $\frac{1}{m+1}$，概率为 $\frac{a_i}{C_{m}^{i}}$，其中 $a_i$ 为加入第 $i$ 小的边后不连通的方案数。</p><p>设 $f_{s,i}\ g_{s,i}$ 为加入第 $i$ 条边后连通或者不连通的方案数。</p><p>所以有 $f_{s,j}+g_{s,i}&#x3D; C_{m}^{i}$ 和 $ g_{s,i}&#x3D;\sum_{t\in s}\sum_{j&#x3D;0}^{cnt_t} f_{t,j}C_{cnt_{s-t}}^{i-j}$</p><p>第二个式子枚举 $t$ 时，会出现重复情况，所以还要钦定一个点在 $t$ 中</p><p>$Ans&#x3D;\frac{1}{m+1}\sum\frac{g_{s,i}}{C_{m}^{i}}$</p><h2 id="CF22E-Scheme"><a href="#CF22E-Scheme" class="headerlink" title="CF22E Scheme"></a>CF22E Scheme</h2><h4 id="构造题"><a href="#构造题" class="headerlink" title="构造题"></a>构造题</h4><p>题面：$n$个点，$n$条有向边，求让无图变成强联通图至少增加多少边并输出所加边</p><p>$solve$:很明显这是一个内向基环树森林，我们可以把它拆成若干条链，然后将这些链尾连向另一条的链首。我们可以$dfs$出每条链，其中简单环也要断成链</p><h2 id="LOJ6069-塔"><a href="#LOJ6069-塔" class="headerlink" title="LOJ6069 塔"></a>LOJ6069 塔</h2><h4 id="DP-矩阵乘法"><a href="#DP-矩阵乘法" class="headerlink" title="$DP$,矩阵乘法"></a>$DP$,矩阵乘法</h4><p>题面：现在有一条长 $L$ 的数轴，要在上面造 $n$ 座塔(高度$1-n$)。每座塔和前后两座塔的距离都要大于塔高，求方案数$mod\ m$。<br>$n\le100\  \ L,m\le 1e9$</p><p>$solve$:因为$L$很大，$n$比较小，先考虑塔之间紧密排列，设最大长度为$s\le n(n+1)$。所以$O(n^4)$求出$dp[i][j][k]$表示前$i$个塔，紧密排列长度为$j$，形成$k$个块的方案数，第一位滚调。$ans&#x3D;\sum_{i&#x3D;1}^sdp[n][i][1]*C_{n}^{L-i-1+n}$</p><p>令$l&#x3D;L-1+n,r&#x3D;L-1-s+n$，可以发现$r-l\le n^2$。所以我们可以通过矩阵快速幂求出$C_{0-n}^l$,然后递推法求出剩余部分。</p><p><a href="https://loj.ac/s/1387212">code</a></p><h2 id="LOJ6039-珠宝"><a href="#LOJ6039-珠宝" class="headerlink" title="LOJ6039 珠宝"></a>LOJ6039 珠宝</h2><h4 id="背包-DP-，分治"><a href="#背包-DP-，分治" class="headerlink" title="背包$DP$，分治"></a>背包$DP$，分治</h4><p>题面：有$n$个物品，每个体积为$V_i$,价值为$C_i$，容积为$k$，求对于每个容积为$i(i\le k)$的最大价值。<br>$n\le1e6,k\le5e4,C\le300,V\le1e9$</p><p>$solve$:直接$0&#x2F;1$背包肯定是不行的，因为$C$很小，所以我们以$C$分类，然后按$V$从小到达求以下前缀和。</p><p>则有$dp_{i,j}&#x3D;dp_{i-1,j-i*k}+w_{i,k}$。</p><p>不难发现，$j$和$j-i*k$是在$mod\ i$意义下相等的，于是对于同一组我们还可使根据$mod \ i$的值进行分类<br>还能够发现这个$dp$<br>存在决策单调性，如果$j-k×i$比$j-p×i$($p&gt;k$)在$j$更优，那么对于更大的$j$来说$j-k×i$还是要优于$j-p×i$，因为$w_i$,$k$差分之后是递减的，$j-k×i$的增长速度快于$j-p×i$,所以我们直接分治即可</p><p>复杂度是$O(nclogn)$</p><p><a href="https://loj.ac/s/1388155">code</a></p><h2 id="CF711D-Directed-Roads"><a href="#CF711D-Directed-Roads" class="headerlink" title="CF711D Directed Roads"></a>CF711D Directed Roads</h2><h4 id="基环树"><a href="#基环树" class="headerlink" title="基环树"></a>基环树</h4><p>题面：有$n$个点和$n$条边，第$i$条边从$i$连到$a_i$.每条边需要指定一个方向（无向边变为有向边）。问有多少种指定方向 的方案使得图中不出现环$(mod\ 1e9)$。</p><p>$solve$:对于非环边$m$条，每个环有$w_i$条边，$ans&#x3D;2^m*\Pi(2^{w_i}-2)$</p><h2 id="bzoj4481-线段游戏"><a href="#bzoj4481-线段游戏" class="headerlink" title="bzoj4481 线段游戏"></a>bzoj4481 线段游戏</h2><h4 id="二分图-set-DP-线段树"><a href="#二分图-set-DP-线段树" class="headerlink" title="二分图+$set$&#x2F;$DP+$线段树"></a>二分图+$set$&#x2F;$DP+$线段树</h4><p>题面：将一个长$n$数列分成没有逆序对的两个子序列，求方案数$mod\ 998244353$  $a_i\le n \le 2e5$</p><p>$solve1$:令$dp_{i,j}$表示不包括$a_i$的序列，最大的数为$j$的方案数。则有</p><p>$a_i$和$a_{i-1}$不在一个序列：（情况1）$dp_{i,a_{i-1}}&#x3D;\sum dp_{i-1,j}(j&lt;a_i)$</p><p>$a_i$和$a_{i-1}$在一个序列：（情况2）如果$a_i&lt;a_{i-1}$ 则$dp_{i,j}&#x3D;0$，（情况3）否则$dp_{i,j}&#x3D;dp_{i-1,j}$</p><p>很明显可以用线段树加速一下，对于情况2则把线段树清空。</p><p><a href="https://darkbzoj.tk/submission/180471">code</a></p><p>$solve2$:我们把每对逆序对看作一条边，很明显就变成了一个二分图的黑白染色问题。然后我们又发现对于$i&lt;j&lt;k,p_i&gt;p_j&gt;p_k$是一定无解的。我们可以用$set$来维护当前每个集合的最大值，把所有最大值$&gt;p_i$的合并起来，答案就等于$2^{cnt}$,$cnt$为集合个数。</p><p><a href="https://darkbzoj.tk/submission/180611">code</a></p><h2 id="CF1174F-Ehab-and-the-Big-Finale"><a href="#CF1174F-Ehab-and-the-Big-Finale" class="headerlink" title="CF1174F Ehab and the Big Finale"></a>CF1174F Ehab and the Big Finale</h2><h4 id="重链剖分，构造，交互题"><a href="#重链剖分，构造，交互题" class="headerlink" title="重链剖分，构造，交互题"></a>重链剖分，构造，交互题</h4><p>题面:这是一道交互题。<br>你有一棵$n(n\le2e5)$个节点的有根树，$1$号点是根节点。</p><p>这棵树中有一个隐藏的节点$x$，你需要通过询问把$x$找出来。<br>你可以进行如下两种询问：</p><p>1、$d\ u\ (1\le u\le n)$。交互库会返回节点$u$和$x$的距离。</p><p>2、$s\ u\ (1\le u\le n)$。交互库会返回从uuu到xxx的路径上第二个点的标号。</p><p>注意，你询问的$u$必须是$x$的祖先，否则会$Wrong Ans$。</p><p>你需要在不超过$36$次询问之内找出$x$。$x$是预先设定好的，不会随着询问而改变。</p><p>$solve$:观察到$36&#x3D;2log_22e5$，而且有是树上的修改，不难想到重链剖分。</p><p>我们一开始询问$d\ 1$来确定$x$的深度，然后跳到这个深度的重儿子$son$上，查询$d\ son$,然后将$son$跳到$x$和$son$的$lca$上，询问一次$s\ lca$，然后继续搜索。</p><p>对于$son$的深度不够的情况稍微，处理一下就好了。</p><p>最多有$log_2n$条重链，每条重链两次操作。</p><p><a href="https://www.luogu.com.cn/record/69927679">code</a></p><h2 id="CF1375H-Set-Merging"><a href="#CF1375H-Set-Merging" class="headerlink" title="CF1375H Set Merging"></a>CF1375H Set Merging</h2><h4 id="构造，值域分块，分治"><a href="#构造，值域分块，分治" class="headerlink" title="构造，值域分块，分治"></a>构造，值域分块，分治</h4><p>题面：给定长度为 $n$ 的序列 $a$，最初有 $n$ 个集合 {$a_1$},{$a_2$}…,{$a_{n-1}$},{$a_n$}。$n\le2^{12},q\le2^{16}$</p><p>接下来给定 $q$ 个询问，每次询问给出 $l$,$r$ </p><p>你需要通过若干次操作制作出集合 {$a_l$,$a_{l+1}$…,$a_{r-1}$,$a_r$}。</p><p>操作是指：你可以合并两个集合 $A,B$ 但要满足 $max_{u \in A}u&lt;min_{v\in B}v$。</p><p>注意：操作过程中集合总数不能超过 $2.2*10_6$,合并后集合 $A,B$ 依然存在。</p><p>$solve$:我们发现$2.2*10^6\approx2^{21}&#x3D;2n\sqrt{q}$，所以可以想到把原序列对 $B$ 值域分块，并在每个块内按位置排序，那么每一个块都是原序列的子序列,对于一次询问 $l,r$ 我们每次将块内连续的一段取出来合并，需要 $O(\frac{n}{B})$次操作。<br>那么我们只需要考虑如何预处理即可。</p><p>对于一个序列$q$，我们将他按值域分治，每次将两个值域合并在一起。每次的合并的操作数为$O(|q|^2)$,所以总次数$T(B)&#x3D;T(\frac{B}{2})+O(B^2)-&gt;T(B)&#x3D;O(B^2)$</p><p>操作数为$O(\frac{nq}{B}+nB),$当$B&#x3D;\sqrt{q}$时有最小值$O(2n\sqrt{q})$</p><p><a href="https://www.luogu.com.cn/record/70005933">code</a></p><h2 id="CF321C-Ciel-the-Commander"><a href="#CF321C-Ciel-the-Commander" class="headerlink" title="CF321C Ciel the Commander"></a>CF321C Ciel the Commander</h2><h4 id="构造，点分治"><a href="#构造，点分治" class="headerlink" title="构造，点分治"></a>构造，点分治</h4><p>题面：一棵$n$个点的树，给每个树的权值为$1-26$,任意两个权值相同的点路径之间有至少一个权值比他小的点，构造方案。$n\le1e5$</p><p>solve: $log_21e5&lt;26$，所以考虑点分治，按照得到的重心顺序赋值。</p><p><a href="https://www.luogu.com.cn/record/70068269">code</a></p><h2 id="bzoj4699-树上的最短路"><a href="#bzoj4699-树上的最短路" class="headerlink" title="bzoj4699 树上的最短路"></a>bzoj4699 树上的最短路</h2><h4 id="Dij-线段树，路径压缩"><a href="#Dij-线段树，路径压缩" class="headerlink" title="Dij,线段树，路径压缩"></a>Dij,线段树，路径压缩</h4><p>题面：这是一棵$n$个节点的带权<br>树。现在，要用最快的速度赶往目标节点$k$。下水道有一些塌陷，这导致主干路的某一段路径可以通过该塌陷到另一条路径。对于一个塌陷，我们用$(L_1,R_1,L_2,R_2,c)$来描述，即对于主干路上$L_1$到$R_1$路径上的任意节点$x$，$L_2$到$R_2$路径上的任意节点$y$，都可以在$c$的时间从$x$走到$y$。因为不知道自己所在的到底是哪个节点，所以要求出每个节<br>点到目标节点$K$的最短距离。$n\le 250000,k\le 100000$</p><p>$solve$:有两个主要的关键点。</p><p>$(1).$每个塌陷只会被第一个使用他的点使用，所以我们把使用过的全部删除就好。在做$Dij$维护树上点和塌陷。<br>对于用塌陷更新，因为每次取出的都是当前$priority\ queue$的最小值，所以每个点当被取出或被塌陷更新之后，它就不会被更新了，即$dis$确定了，所以我们考虑模仿的并查集的路径压缩，每次都将$f_x$指向未确定$dis$且深度最大的祖先。</p><p>$(2).$如何求出经过一个点的所有塌陷。令$st_x$和$en_x$表示$x$子树（包括$x$）$dfs$序的最小值和最大值,并用$vector\ g_x$来存所有经过$x$的塌陷。对于$x&#x3D;LCA(L_2,R_2)$，直接加入$g_x$即可。<br>对于$st_x\le dfs_{L_2}\le en_x,dfs_{R_2}&gt;en_x$以及$st_x\le dfs_{R_2}\le en_x,L_2\le st_x$也加入$g_x$中。我们可以维护两棵线段树，一个维护$L_2$的最小值，一个维护$R_2$的最大值，每次取出就好，取完删除即可。</p><p>其实可以把所有树边也看作塌陷的，只不过我打完了才知道</p><p>做的时候$Dij$的$continue$打成$break$全$WA$了，求$LCA,max(log_2n)$取了$25,T$了，调了两天。代码又丑又慢</p><p><a href="https://darkbzoj.tk/submission/181920">code</a></p><h2 id="P8096-USACO22JAN-Drought-G"><a href="#P8096-USACO22JAN-Drought-G" class="headerlink" title="P8096 [USACO22JAN] Drought G"></a>P8096 [USACO22JAN] Drought G</h2><h4 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h4><p>题面:$N$ 头奶牛$(0≤N≤100)$排成一行，第 $i$ 头奶牛的饥饿度为一个非负整数<br>$h_i$。降低奶牛饥饿度的唯一方法是选择两头相邻的奶牛 $i$ 和 $i+1$令她们的饥饿度各减少 1。将奶牛喂至所有的奶牛都具有相同的非负饥饿度。第 $i$ 头奶牛的饥饿度 $hi$ 至多为 $H_i(0≤Hi≤10000)$。<br>计算符合上述上界的 $N$元组 $[h_1,h_2,…,h_N]$的数量，答案对 $1e9+7$。</p><p>$solve$:考虑$N$的奇偶性和反向操作,但$N$为偶数时，直接$f_i$表示但前最后一个高度为$i$即可，奇数是多枚举一层初始高度即可。$O(nH_{max})-O(n^2H_{max})$</p><h2 id="P8097-USACO22JAN-Farm-Updates-G"><a href="#P8097-USACO22JAN-Farm-Updates-G" class="headerlink" title="P8097 [USACO22JAN] Farm Updates G"></a>P8097 [USACO22JAN] Farm Updates G</h2><h4 id="并查集-文字游戏"><a href="#并查集-文字游戏" class="headerlink" title="并查集 文字游戏"></a>并查集 文字游戏</h4><p>题面：$N$ 个农场$(1≤N≤10^5)$，最初，这些农场之间没有道路连接，并且每个农场都在活跃地生产牛奶。$Q$ 次更新操作$(0≤Q≤2⋅10^5)$</p><p>$(D\ x)$ 停用一个活跃的农场 $x$，使其不再生产牛奶。</p><p>$(A\ x\ y)$ 在两个活跃的农场 $x$ 和 $y$ 之间添加一条道路。</p><p>$(R\ e)$ 删除之前添加的第 $e$ 条道路。</p><p>一个农场 $x$ 如果正在活跃地生产牛奶，或者可以通过一系列道路到达另一个活跃的农场，则称之为一个「有关的」农场。对于每个农场 $x$，计算最大的 $i(0≤i≤Q)$，使得农场 $x$ 在第 $i$ 次更新后是有关的。</p><p>$solve:$因为每次加边都是把两个活跃的农场连起来，所以主要影响答案的是删边操作。发现这点后即直接反向操作，拿个并查集随便维护就好了。</p><h2 id="P8098-USACO22JAN-Tests-for-Haybales-G"><a href="#P8098-USACO22JAN-Tests-for-Haybales-G" class="headerlink" title="P8098 [USACO22JAN] Tests for Haybales G"></a>P8098 [USACO22JAN] Tests for Haybales G</h2><h4 id="dfs"><a href="#dfs" class="headerlink" title="$dfs$"></a>$dfs$</h4><p>题面：有一个有序整数数组 $x_1≤x_2≤⋯≤x_N,(1≤N≤10^5)$，和一个整数 $K$。你不知道这个数组以及 $K$，但你知道对于每个索引 $i$ 使得 $x_{j_i}≤x_i+K$ 的最大索引 $j_i$。保证有 $i≤j_i$ 以及 $j_1≤j_2≤⋯≤j_N$。</p><p>构造任意一个数组以及整数 $K$ 与该信息一致。构造需要满足对于所有 $i$ 有$ 0≤x_i≤10^{18}$，并且 $1≤K≤10^{18}$。</p><p>$solve:$我们建立一棵有 $n+1$ 个节点的树，对于每个节点，与父亲 $j_i+1$连一条边。易知根为 $n+1$。由于 $j_i$ 不降，可以发现层次高的节点编号一定大于层次低的节点。并且 $j_i+1$层次恰好比 $i$ 大 $1$。</p><p>又根据构造条件，$x_{j_i+1}$ 应当大约比 $x_i$ 大 $K$。由此可以猜测每个节点权值为 $d_iK+x’(0≤x’&lt;K)$。令$x’&#x3D;K-dfn_i$<br>由于 $x’≥0$，令 $K≥n+1$即可。</p><h2 id="P2481-SDOI2010-代码拍卖会"><a href="#P2481-SDOI2010-代码拍卖会" class="headerlink" title="P2481 [SDOI2010]代码拍卖会"></a>P2481 [SDOI2010]代码拍卖会</h2><h4 id="计数-dp"><a href="#计数-dp" class="headerlink" title="计数$dp$"></a>计数$dp$</h4><p>题面：求长度为$n(n\le 10^{18})$且$mod\ p(p\le500)\equiv0$的数的方案数，每位数在$1-9$之间且高到低单调不下降，对答案$mod\ 999911659$</p><p>$solve:$虽然$tag$是数位$dp$但实际上只是借用其思想。考虑$112334&#x3D;111111+1111+111+1$，所以每个数可以看作若干个$111\ldots11$相加的到。</p><p>令$g_i$表示$11\ldots111\equiv i$的个数，我们发现在$1-p+1$中肯定存在一个循环节，暴力找到循环节就好。</p><p>令$f_{i,j,k}$表示前$i-1$个余数，选了$j$个$11\ldots11$串，余数为$k$的方案数。$f_{i+1,j+l,k+(l\ast l)mod\ p}&#x3D;\sum C_{l}^{g_i+l-1}\ast f_{i,j,k}$</p><p><a href="https://www.luogu.com.cn/record/70945421">code</a></p><h2 id="CF708C-Centroids"><a href="#CF708C-Centroids" class="headerlink" title="CF708C Centroids"></a>CF708C Centroids</h2><h4 id="树型-dp-，换根法，二次扫描"><a href="#树型-dp-，换根法，二次扫描" class="headerlink" title="树型$dp$，换根法，二次扫描"></a>树型$dp$，换根法，二次扫描</h4><p>题面：给定一颗树，你有一次将树改造的机会，改造的意思是删去一条边，再加入一条边，保证改造后还是一棵树。请问有多少点可以通过改造,该点每个子树的大小都不大于$\dfrac{n}{2}$。</p><p>$solve:$显然这是一道换根$dp$，每个点至多有一个子树的$siz&gt;\dfrac{n}{2}$，所以我们用$g_x$表示以$x$根的子树中$siz\le\dfrac{n}{2}$的$siz$的最大值,$son_x$记录是哪棵子树。但我们发现在第二次扫描中父亲节点$u$的$son_x$可能会是子结点$v$，所以还要存一个次大值。</p><p><a href="https://www.luogu.com.cn/record/70984572">code</a></p><h2 id="P6419-Kamp"><a href="#P6419-Kamp" class="headerlink" title="P6419 Kamp"></a>P6419 Kamp</h2><h4 id="换根"><a href="#换根" class="headerlink" title="换根"></a>换根</h4><p>题面：一颗树$n$个点$n−1$条边，经过每条边都要花费一定的时间，任意两个点都是联通的。有$K$个人(分布在$K$个不同的点）要集中到一个点举行聚会。<br>聚会结束后需要一辆车从举行聚会的这点出发，把这$K$个人分别送回去。<br>请你回答，对于$i&#x3D;1-n$，如果在第$i$个点举行聚会，司机最少需要多少时间把 $K$个人都送回家。</p><p>$solve:$有个坑，就是送完最后一个人不用回到根节点的。$siz_x$表示$x$的子树中有几个家，$g_x$表示以$x$的子树送完所有人回到$x$的路程，$dis_{x,0&#x2F;1}$表示从$x$开始到一个家的最长&#x2F;次长链，$son_x$表示最长链上$x$的子结点，$f_x$表示从$x$送完所有人回到$x$的路程。</p><p>然后分类讨论$(u-&gt;v)$</p><p>$$<br>\begin{aligned}<br>1.&amp;siz_v&#x3D;0:f_v&#x3D;f_u+2\ast w,dis_{v,0}&#x3D;dis_{u,0}+w\</p><p>2.&amp;siz_v&#x3D;k:f_v&#x3D;g_v\</p><p>3.&amp;(1)son_u\not&#x3D; v,dis_{u,0}+w&gt;dis_{v,0}\<br>&amp;(2)son_u&#x3D;v,dis_{u,1}+w&gt;dis{v,0}\<br>&amp;(3)son_u\not&#x3D;v,dis_{u,0}+w&gt;dis_{v,1}\<br>&amp;(4)dis_{u,1}+w&gt;dis_{v,1}<br>\end{aligned}<br>$$</p><p><a href="https://www.luogu.com.cn/record/71010329">code</a></p><h2 id="LG4148-简单题"><a href="#LG4148-简单题" class="headerlink" title="LG4148 简单题"></a>LG4148 简单题</h2><h4 id="KD-tree-替罪羊树重构"><a href="#KD-tree-替罪羊树重构" class="headerlink" title="$KD\ tree$, 替罪羊树重构"></a>$KD\ tree$, 替罪羊树重构</h4><p>题面：你有一个$N×N$的棋盘，每个格子内有一个整数，初始时的时候全部为 $0$ ，现在需要维护两种操作：</p><p> $1\ x\ y\ A\ 1≤x,y≤N,A$ 是正整数。将格子$(x,y)$里的数字加上 $A$。</p><p> $2\ x_1\ y_1\ x_2\ y_2,1≤x1≤x2≤N,1\le y_1\le y_2\le N$。输出 $x_1, y_1, x_2, y_2$这个矩形内的数字和</p><p> $3$ 无 终止程序</p><p>$solve:KDT+$替罪羊树重构，但好像不重构跑得更快。</p><p><a href="https://www.luogu.com.cn/record/71512731">code</a></p><h2 id="LZ4297-选班长"><a href="#LZ4297-选班长" class="headerlink" title="LZ4297 选班长"></a>LZ4297 选班长</h2><h4 id="set-启发式合并"><a href="#set-启发式合并" class="headerlink" title="$set$启发式合并"></a>$set$启发式合并</h4><p>题面：编号为 $1-n$ 的 $n$ 个人，初始有 $m$ 对认识关系，对于两对关系 $(i,j)\ (i,k)$ 且 $i&lt;j,k$ ，这 $j,k$ 可以建立认识关系。但不存在可以拓展的关系后，每个人选 $1-n$ 中的一个数，有认识关系的人不能选同一个数，求方案数，对 $998244353$ 取模。</p><p>$solve:$用 $set_i$ 维护第 $i$ 个人认识的比他大的人的编号，然后将  $set_i$ 和 $set_{s_i.begin()}$ 启发式合并。答案为 $\Pi(n-set_i.size())$</p><h2 id="LG2472-蜥蜴"><a href="#LG2472-蜥蜴" class="headerlink" title="LG2472 蜥蜴"></a>LG2472 蜥蜴</h2><h4 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h4><p>题面：$n \times m$ 的方格，每个格子有个高度 $h_{i,j}$ 。有些方格上有蜥蜴，蜥蜴的平面跳跃距离不超过 $d$ ，每次跳跃后，原来的格子高度会 $-1$ ，且任意两只蜥蜴不会在同一个方格上。求最少有多少只蜥蜴跳不出平面。</p><p>$solve:$</p><p>$1.$ 把每个方格拆成入点和出点，连一条流量为 $h_{i,j}$ 的边。</p><p>$2.$ 每个点的出点向它可以跳到的点连一条流量为 $inf$ 的边。</p><p>$3.$ 把源点 $S$ 向每个有蜥蜴的点连一条流量为 $1$ 的边。</p><p>$4$. 把可以跳出平面的点向汇点 $T$ 连一条流量为 $inf$ 的边。</p><p><a href="https://www.luogu.com.cn/record/72672622">code</a></p><h2 id="LG8252-NOI-Online-2022-提高组-讨论"><a href="#LG8252-NOI-Online-2022-提高组-讨论" class="headerlink" title="LG8252 [NOI Online 2022 提高组] 讨论"></a>LG8252 [NOI Online 2022 提高组] 讨论</h2><h4 id="排序，模拟"><a href="#排序，模拟" class="headerlink" title="排序，模拟"></a>排序，模拟</h4><p>题面：有 $n$ 个人正在打模拟赛，模拟赛有 $n$ 道题目。</p><p>定义第 $i$ 个人会的题目的集合为 $S_i$，即当 $S_x \cap S_y\not&#x3D; \varnothing  \land S_x \not\subseteq S_y \wedge S_y \not\subseteq S_x$时，第 $x$ 人和第 $y$ 人会讨论）</p><p>为了让模拟赛的效果更好，希望你可以找出一对会讨论的人或判断不存在。</p><p>$solve:$ 把每个 $S$ 从大到小排序，用 $pos_i$ 记录第 $i$ 个数最后出现的位置，每次取出有记录的 $pos_i$ 的最小值 $j$ ，判断当前集合 $S$ 与 $S_i$ 是否满足 $S \subseteq S_i$，不是的话直接输出答案，否则就更新 $pos$ 数组。</p><p><a href="https://www.luogu.com.cn/record/72623055">code</a></p><h2 id="LG8251-NOI-Online-2022-提高组-丹钓战"><a href="#LG8251-NOI-Online-2022-提高组-丹钓战" class="headerlink" title="LG8251 [NOI Online 2022 提高组] 丹钓战"></a>LG8251 [NOI Online 2022 提高组] 丹钓战</h2><h4 id="主席树，ST表，二分"><a href="#主席树，ST表，二分" class="headerlink" title="主席树，ST表，二分"></a>主席树，ST表，二分</h4><p>题面：有 $n$ 个二元组 $(a_i, b_i)$ ，编号为 $1$ 到 $n$。</p><p>有一个初始为空的栈 $S$ ，向其中加入元素 $(a_i, b_i)$ 时，先不断弹出栈顶元素直至栈空或栈顶元素 $(a_j , b_j)$ 满足 $a_i \neq a_j$ 且 $b_i &lt; b_j$ ，然后再将其加入栈中。</p><p>如果一个二元组入栈后栈内只有这一个元素，则称该二元组是“成功的”。</p><p>有 qq 个询问 $[l_i, r_i]$ ，表示若将编号在 $[l_i, r_i]$ 中的二元组按编号从小到大依次入栈，会有多少个二元组是“成功的”。</p><p>询问之间相互独立。</p><p>$solve:$ 发现从 $1$ 开始是和从 $l$ 开始这 $r-l+1$ 个数的弹出顺序是没有太大改变的。所以先从 $1$ 模拟一下，记录 $c_i$ 表示第 $i$ 个数是被第 $c_i$ 个数弹出的。然后用 $f_i$ 表示满足 $c_j \le i $ 且 $j\in [f_i,i-1]$的最小值，用二分加 $ST$ 表。对于每个询问就是求 $\sum_l^r f_i\le l$，用主席数维护就可以了。</p><p><a href="https://www.luogu.com.cn/record/72599812">code</a></p><h2 id="CF246E-Blood-Cousins-Return"><a href="#CF246E-Blood-Cousins-Return" class="headerlink" title="CF246E  Blood Cousins Return"></a>CF246E  Blood Cousins Return</h2><h4 id="启发式合并"><a href="#启发式合并" class="headerlink" title="启发式合并"></a>启发式合并</h4><p>题面：给定一片森林，每次询问一个节点的 $K-Son$ 共有个多少不同的名字。一个节点的 $K-Son$ 即为在该节点子树内的，深度是该节点深度加 $K$ 的节点。</p><p>$solve:$ 用 $set\ d_x$ 来存深度为 $x$ 的所用名字，启发式合并一波。</p><p><a href="https://www.luogu.com.cn/record/72094011">code</a></p><h2 id="LG1646-国家集训队-happiness"><a href="#LG1646-国家集训队-happiness" class="headerlink" title="LG1646 [国家集训队]happiness"></a>LG1646 [国家集训队]happiness</h2><h4 id="网络流-1"><a href="#网络流-1" class="headerlink" title="网络流"></a>网络流</h4><p>题面：高一一班的座位表是个 $n\times m$ 的矩阵，经过一个学期的相处，每个同学和前后左右相邻的同学互相成为了好朋友。这学期要分文理科了，每个同学对于选择文科与理科有着自己的喜悦值，而一对好朋友如果能同时选文科或者理科，那么他们又将收获一些喜悦值。<br>作为计算机竞赛教练的 $scp$ 大老板，想知道如何分配可以使得全班的喜悦值总和最大。</p><p>$solve:$ 最小割，割完和源点 $S$ 相连的选文科，和汇点 $T$ 相连的选理科。对于每对选同样科目 $(x,y)$ 的建一个新点并向 $x$和$y$ 连一条流量为 $inf$ 的边，向起点或汇点连一条流量为喜悦度的边。</p><p><a href="https://www.luogu.com.cn/record/72761001">code</a></p><h2 id="LG5934-最小生成树"><a href="#LG5934-最小生成树" class="headerlink" title="LG5934 最小生成树"></a>LG5934 最小生成树</h2><h4 id="网络流-2"><a href="#网络流-2" class="headerlink" title="网络流"></a>网络流</h4><p>题面：给定一个边带正权的连通无向图 $G&#x3D;(V,E)$，其中 $N&#x3D;∣V∣,M&#x3D;∣E∣$ ， $N$ 个点从 $1$ 到 $N$ 依次编号，给定三个正整数 $u,v$ 和 $L(u≠v)$ ，假设现在加入一条边权为 $L$ 的边 $(u,v)$ ，那么需要删掉最少多少条边，才能够使得这条边既可能出现在最小生成树上，也可能出现在最大生成树上？</p><p>$solve:$非常有意思的 $trick$ ，对于可能在最小生成树上数会满足，除去边权 $\ge L$ 的边后， $u,v$ 两个节点不在连通，跑一下最小割就好了。</p><p><a href="https://www.luogu.com.cn/record/72820113">code</a></p><h2 id="LG1251-餐巾计划问题"><a href="#LG1251-餐巾计划问题" class="headerlink" title="LG1251 餐巾计划问题"></a>LG1251 餐巾计划问题</h2><h4 id="费用流"><a href="#费用流" class="headerlink" title="费用流"></a>费用流</h4><p>题目：一个餐厅在相继的 $N$ 天里,每天需用的餐巾数不尽相同。假设第 $i$ 天需要 $r_i$ 块餐巾 $(i&#x3D;1,2,…,N)$ 。餐厅可以购买新的餐巾,每块餐巾的费用为 $p$ 分;或者把旧餐巾送到快洗部,洗一块需 $m$ 天,其费用为 $f$ 分;或者送到慢洗部,洗一块需 $n$ 天 $(n&gt;m)$ ,其费用为 $s$ 分 $(s&lt;f)$。</p><p>每天结束时,餐厅必须决定将多少块脏的餐巾送到快洗部,多少块餐巾送到慢洗部,以及多少块保存起来延期送洗。但是每天洗好的餐巾和购买的新餐巾数之和,要满足当天的需求量。</p><p>试设计一个算法为餐厅合理地安排好 $N$ 天中餐巾使用计划,使总的花费最小。编程找出一个最佳餐巾使用计划。</p><p>$solve:$ 把每天拆点成早上 $x_i$ 和 晚上 $y_i$ ，早上接收毛巾，晚上处理毛巾。</p><p>$1.S \rightarrow x_i\ (inf,p)$ </p><p>$2.x_i \rightarrow T \ (r_i,0)$ </p><p>$3.y_i \rightarrow y_{i+1}\ (inf,0)$ </p><p>$4.y_i \rightarrow y_{i+m}\ (inf,f)$</p><p>$5.y_i \rightarrow y_{i+n}\ (inf,s)$</p><p>$6.S \rightarrow y_i\ (r_i,0)$</p><p><a href="https://www.luogu.com.cn/record/72978437">code</a></p><h2 id="LG3159-CQOI2012-交换棋子"><a href="#LG3159-CQOI2012-交换棋子" class="headerlink" title="LG3159 [CQOI2012]交换棋子"></a>LG3159 [CQOI2012]交换棋子</h2><h4 id="费用流-1"><a href="#费用流-1" class="headerlink" title="费用流"></a>费用流</h4><p>题面：有一个 $n$ 行 $m$ 列的黑白棋盘，你每次可以交换两个相邻格子（相邻是指有公共边或公共顶点）中的棋子，最终达到目标状态。要求第 $i$ 行第 $j$ 列的格子只能参与 $m_{i,j}$ 次交换。</p><p>$solve:$ 非常好的建模题目。把题目转变为忽略白棋，黑棋走到目标位置，对于已经在目标位置的黑棋看作白棋。把点拆成两个点 $x,y$。</p><p><strong>1.起点 $S$ 向初始黑棋 $x$ 连流量 $1$ 费用 $0$ 的边</strong></p><p><strong>2.目标点黑棋 $y$ 向终点 $T$ 连流量为 $1$ 费用为 $0$ 的边</strong></p><p><strong>3. $x$ 向 $y$ 连一条流量为 $m&#x2F;2$ 费用为 $0$ 的边</strong></p><p><strong>对于起始或目标点，且 $m$ 为奇数时，再多连一条；流量为 $1$ 的边</strong></p><p><strong>4. 八连通图流量 $inf$ 费用 $0$</strong></p><p><a href="https://www.luogu.com.cn/record/73303496">code</a></p><h2 id="LG3980-NOI2008-志愿者招募"><a href="#LG3980-NOI2008-志愿者招募" class="headerlink" title="LG3980 [NOI2008] 志愿者招募"></a>LG3980 [NOI2008] 志愿者招募</h2><h4 id="网络流-3"><a href="#网络流-3" class="headerlink" title="网络流"></a>网络流</h4><p>题面：一个项目需要 $n$ 天才能完成，其中第 $i$ 天至少需要 $a_i$ 个人。布布通过了解得知，一共有 $m$ 类志愿者可以招募。其中第 $i$ 类可以从第 $s_i$ 天工作到第 $t_i$ 天，招募费用是每人 $c_i$ 元。设计一种最优的招募方案。</p><p>$solve:$ 非常巧妙的见图方法。</p><p><strong>1. $i\rightarrow i+1$ 连一条流量为 $inf-a_i$ ，费用为 $0$ 的边</strong></p><p><strong>2. $s_i \rightarrow t_i+1$ 连一条流量为 $inf$ ，费用为 $c_i$ 的边</strong></p><p><strong>3. $S \rightarrow 1\ \ n+1 \rightarrow T$连一条流量为 $inf$ 费用为 $0$ 的边</strong></p><p><a href="https://www.luogu.com.cn/record/73446340">code</a></p><h2 id="LG4542营救皮卡丘"><a href="#LG4542营救皮卡丘" class="headerlink" title="LG4542营救皮卡丘"></a>LG4542营救皮卡丘</h2><h4 id="网络流，-Floyd"><a href="#网络流，-Floyd" class="headerlink" title="网络流，$Floyd$"></a>网络流，$Floyd$</h4><p>题面：有 $N$ 个据点，据点之间存在 $M$ 条双向道路。据点分别从 $1$ 到 $N$ 标号。小智一行 $K$ 人从真新镇出发，营救被困在 $N$ 号据点的皮卡丘。一开始 $K$ 个人都在 $0$ 号点。</p><p>要想摧毁 $K$ 号据点，必须按照顺序先摧毁 $1$ 到 $K-1$ 号据点，小智一行任何一个人经过 $K$ 号据点即认为 $K$ 号据点被摧毁。被摧毁的据点依然是可以被经过的。</p><p>$K$ 个人是可以分头行动的，只要有任何一个人在 $K-1$ 号据点被摧毁之后，经过 $K$ 号据点，$K $号据点就被摧毁了。显然的，只要 $N$ 号据点被摧毁，皮卡丘就得救了。</p><p>野外的道路是不安全的，因此小智一行希望在摧毁 $N$ 号据点救出皮卡丘的同时，使得 $K$ 个人所经过的道路的长度总和最少。</p><p>$solve:$ 拆点，拆成入点 $x$ 和出点 $y$, 然后求出 $d_{i,j}$ 表示 $i$ 到 $j$ 不经过超过 $j$ 的点的最短路。</p><p>$1. S\rightarrow x\ (1,0)\ \ \ y \rightarrow T\ (1,0)$</p><p>$2. S \rightarrow 1\ (k,0)$</p><p>$3.x_i\rightarrow y_j\ (1,d_{i,j})$</p><p><a href="https://www.luogu.com.cn/record/73754770">code</a></p><h2 id="LG4287双倍回文"><a href="#LG4287双倍回文" class="headerlink" title="LG4287双倍回文"></a>LG4287双倍回文</h2><h4 id="manacher"><a href="#manacher" class="headerlink" title="$manacher$"></a>$manacher$</h4><p>题面：记字符串 $w$ 的倒置为 $w^R$。<br>如果 $x$ 能够写成的 $ww^Rww^R$ 形式，则称它是一个“双倍回文”。<br>对于给定的字符串，计算它的最长双倍回文子串的长度。</p><p>$solve:$ 对于每次 $i$ 如果 $ i&lt;mr $且 $ i-p_i&lt;mid $ 那么就可以构成一个双倍回文，注意这里的 $p_i$ 是直接从 $mid$ 转移来的，还没有拓展过的。</p><p><a href="https://www.luogu.com.cn/record/74540775">code</a></p><h2 id="LG4234-最小差值生成树"><a href="#LG4234-最小差值生成树" class="headerlink" title="LG4234 最小差值生成树"></a>LG4234 最小差值生成树</h2><h4 id="LCT"><a href="#LCT" class="headerlink" title="$LCT$"></a>$LCT$</h4><p>从小到大加边，动态维护路径上的最小值就好了。</p><p><a href="https://www.luogu.com.cn/record/74600926">code</a></p><h2 id="LG2542-航线规划"><a href="#LG2542-航线规划" class="headerlink" title="LG2542 航线规划"></a>LG2542 航线规划</h2><h4 id="LCT-1"><a href="#LCT-1" class="headerlink" title="$LCT$"></a>$LCT$</h4><p>LCT维护双连通分量模板</p><p><a href="https://www.luogu.com.cn/record/74852720">code</a></p><h2 id="LG4219-大融合"><a href="#LG4219-大融合" class="headerlink" title="LG4219 大融合"></a>LG4219 大融合</h2><h4 id="LCT-2"><a href="#LCT-2" class="headerlink" title="$LCT$"></a>$LCT$</h4><p>LCT维护子树大小模板,维护虚链和实链&amp;虚链的大小</p><p><a href="https://www.luogu.com.cn/record/74852720">code</a></p><h2 id="LG3703-树点染色"><a href="#LG3703-树点染色" class="headerlink" title="LG3703 树点染色"></a>LG3703 树点染色</h2><h4 id="LCT-线段树"><a href="#LCT-线段树" class="headerlink" title="$LCT$ 线段树"></a>$LCT$ 线段树</h4><p>因为每次染色都是节点到 $root$ 而且颜色都不一样，很类似与 $LCT$ 的 $access$ 操作。然后用线段树来维护到 $root$ 上虚链的个数即可。</p><p><a href="https://www.luogu.com.cn/record/75526371">code</a></p><h2 id="Loj588-我们的-CPU-遭到攻击"><a href="#Loj588-我们的-CPU-遭到攻击" class="headerlink" title="Loj588 我们的 CPU 遭到攻击"></a>Loj588 我们的 CPU 遭到攻击</h2><h4 id="LCT-3"><a href="#LCT-3" class="headerlink" title="$LCT$"></a>$LCT$</h4><p>用 $LCT$ 来维护每条实链黑点到 $top$的路径总和，以及虚链的路径和。但我们发现在 $reverse$ 之后点到 $top$ 的路径长度也发生了 $reverse$，所以每次维护 $0&#x2F;1$ 表示 $reverse$ 前&#x2F;后的答案。</p><p><a href="https://loj.ac/s/1462576">code</a></p><h2 id="LZ3299-决战"><a href="#LZ3299-决战" class="headerlink" title="LZ3299 决战"></a>LZ3299 决战</h2><h4 id="fhq-treap-树剖"><a href="#fhq-treap-树剖" class="headerlink" title="$fhq-treap$ 树剖"></a>$fhq-treap$ 树剖</h4><p>主要难题在 $reverse$ 操作上，线段树不行但 $fhq_treap$ 可以，所以用 $fhq-treap$ 来维护重链，每次询问把链合并然后分解回去。</p><p><a href="http://192.168.11.163:8008/showsource.php?id=93094">code</a></p><h2 id="Uoj207-共价大爷游长沙"><a href="#Uoj207-共价大爷游长沙" class="headerlink" title="Uoj207 共价大爷游长沙"></a>Uoj207 共价大爷游长沙</h2><h4 id="LCT-4"><a href="#LCT-4" class="headerlink" title="$LCT$"></a>$LCT$</h4><p>非常巧妙的判断方法。给每条路径赋个随机权值，然后计算子树异或和就好了。</p><p><a href="https://uoj.ac/submission/552062">code</a></p><h2 id="LG3426-POI2005-SZA-Template"><a href="#LG3426-POI2005-SZA-Template" class="headerlink" title="LG3426 [POI2005]SZA-Template"></a>LG3426 [POI2005]SZA-Template</h2><p><del>好久没写了</del><br>我们先 $KMP$ 求出 $nex_i$ 。然后设 $dp_i$ 表示前缀的答案。<br>显然，对于当前的 $i$ 只有 $i$ 和 $dp_{nex_i}$ 两个取值。<br>取 $dp_{nex_i}$ 当且仅当存在 $dp_j&#x3D; dp_{nex_i}$ 且 $i-nex_i&lt;&#x3D;j$。 </p><h2 id="BZOJ4262-Sum"><a href="#BZOJ4262-Sum" class="headerlink" title="[BZOJ4262] Sum"></a>[BZOJ4262] Sum</h2><p><img src="https://darkbzoj.cc/JudgeOnline/upload/201509/fb(1).jpg"></p><p>先 $Sum$ 转化为前缀的形式 $\sum\limits_{i&#x3D;1}\limits^{r_2}\sum\limits_{j&#x3D;l_1}\limits^{r_1}{\max{A_{j \sim i}}-\min {A_{j \sim i}}}-\sum\limits_{i&#x3D;1}\limits^{l_2-1}\sum\limits_{j&#x3D;l_1}\limits^{r_1}{\max{A_{j \sim i}}-\min{A_{j \sim i}{}}}$ 。</p><p>那其实就是维护  $\sum\limits_{i&#x3D;1}\limits^{r}\sum\limits_{j&#x3D;l_1}\limits^{r_1}\max{A_{j \sim i}}$。</p><p>先把询问离线，考虑用单调栈维护每个 $A_i$ 的贡献区间，用线段树维护一下后缀的最大值，但因为要求的是 $\sum\limits_{i&#x3D;1}\limits^{r}$ 所有后缀的值，所以线段树上要维护一下历史版本和（<del><strong>俺不会</strong></del>）。</p><p>对于每个标记 $tag$ 维护四个值 </p><p>$tl$：当前标记最早修改的历史版本时间戳。</p><p>$tr$：当前标记最晚修改的历史版本时间戳。</p><p>$val$：$tr$所对应的修改值。</p><p>$sum$：$tl\sim tr-1$ 所有修改的 $val$ 和。</p><p>对于线段树维护四个值</p><p>$tim$：区间当前版本时间戳。</p><p>$val$：区间当前版本最大值之和。</p><p>$sum$：区间 $1\sim tim-1$ 所有历史版本 $val$ 之和。</p><p>合并代码（<strong><del>自己理解一下</del></strong>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tags</span><br>&#123;<br><span class="hljs-type">int</span> val,tl,tr; ll sum;<br><br>tags <span class="hljs-keyword">operator</span> + (<span class="hljs-type">const</span> tags &amp;a) <span class="hljs-type">const</span><br>&#123; <br><span class="hljs-keyword">if</span>(val==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> a;<br><span class="hljs-keyword">return</span> (tags)&#123;a.val,tl,a.tr,sum+a.sum<span class="hljs-number">+1ll</span>*val*(a.tl-tr)&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123; val=<span class="hljs-number">-1</span>; &#125;<br><br>&#125;tag[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tree</span><br>&#123;<br><span class="hljs-type">int</span> tim,len;<br>ll val,sum;<br><br>Tree <span class="hljs-keyword">operator</span> + (<span class="hljs-type">const</span> tags &amp;a) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-keyword">return</span> (Tree)&#123;a.tr,len,<span class="hljs-number">1ll</span>*a.val*len,sum+a.sum*len+(a.tl-tim)*val&#125;;<br>&#125;<br><br>Tree <span class="hljs-keyword">operator</span> + (<span class="hljs-type">const</span> Tree &amp;a) <span class="hljs-type">const</span><br>&#123;<br><span class="hljs-type">int</span> t=<span class="hljs-built_in">max</span>(tim,a.tim);<br>ll s=sum+a.sum+(t-tim)*val+(t-a.tim)*a.val;<br><span class="hljs-keyword">return</span> (Tree)&#123;t,len+a.len,val+a.val,s&#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>len=<span class="hljs-number">1</span>;tim=val=sum=<span class="hljs-number">0</span>;<br>&#125;<br><br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>],res;<br></code></pre></td></tr></table></figure><h2 id="P5212-SubString-（非强制在线做法）"><a href="#P5212-SubString-（非强制在线做法）" class="headerlink" title="P5212 SubString  （非强制在线做法）"></a>P5212 SubString  （非强制在线做法）</h2><p>给定一个字符串 <code>init</code>，要求支持两个操作：</p><ul><li><p>在当前字符串的后面插入一个字符串。</p></li><li><p>询问字符串 $s$ 在当前字符串中出现了几次。(作为连续子串)</p></li></ul><p>模拟赛题目，赛时没有强制在线，用 $AC$ 自动机+线段树合并水出来了。</p><p>原题强制在线 $SAM+LCT$ ，菜狗本人不会<del>也不想敲</del>。赛时线段树合并空间开小了与暴力同分。</p><p>先考虑没有修改的情况就是裸的 $AC$ 自动机在 $Fail$ 树上跑。</p><p>加上修改后，对于每个修改加一个时间戳 $tim$ ，显然这次修改只会对时间戳 $\ge tim$ 的询问产生贡献，所以对 $Fail$ 树上的点维护一棵权值线段树维护每个时间戳的贡献，不断向上合并就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> q,n,m,rt[N],tot,cnt,ch[N][<span class="hljs-number">26</span>],fail[N];<br><span class="hljs-type">int</span> now,lst[N],a[N],id[N],in[N],ans[N];<br><span class="hljs-type">char</span> s[N],init[N],add[N];<br>vector&lt;<span class="hljs-type">int</span>&gt;g[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> ls,rs,sum;<br>&#125;t[N*<span class="hljs-number">20</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!k) k=++tot;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> t[k].sum++,<span class="hljs-built_in">void</span>();<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">insert</span>(t[k].ls,l,mid,x);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">insert</span>(t[k].rs,mid<span class="hljs-number">+1</span>,r,x);<br>t[k].sum=t[t[k].ls].sum+t[t[k].rs].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!k||l&gt;y||r&lt;x) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="hljs-keyword">return</span> t[k].sum;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(t[k].ls,l,mid,x,y)+<span class="hljs-built_in">query</span>(t[k].rs,mid<span class="hljs-number">+1</span>,r,x,y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!x||!y) <span class="hljs-keyword">return</span> x|y;<br>t[x].sum+=t[y].sum;<br>t[x].ls=<span class="hljs-built_in">Merge</span>(t[x].ls,t[y].ls);<br>t[x].rs=<span class="hljs-built_in">Merge</span>(t[x].rs,t[y].rs);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Fail</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>queue&lt;<span class="hljs-type">int</span>&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br><span class="hljs-keyword">if</span>(ch[<span class="hljs-number">0</span>][i]) q.<span class="hljs-built_in">push</span>(ch[<span class="hljs-number">0</span>][i]);<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> x=q.<span class="hljs-built_in">front</span>();q.<span class="hljs-built_in">pop</span>();<br>in[fail[x]]++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(ch[x][i])<br>&#123;<br>fail[ch[x][i]]=ch[fail[x]][i];<br>q.<span class="hljs-built_in">push</span>(ch[x][i]);<br>&#125;<br><span class="hljs-keyword">else</span> ch[x][i]=ch[fail[x]][i];<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DP</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>x=ch[x][init[i]-<span class="hljs-string">&#x27;A&#x27;</span>];<br><span class="hljs-keyword">if</span>(x) <span class="hljs-built_in">insert</span>(rt[x],<span class="hljs-number">1</span>,n,a[i]);<br>&#125;<br>queue&lt;<span class="hljs-type">int</span>&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cnt;i++)<br><span class="hljs-keyword">if</span>(!in[i]) q.<span class="hljs-built_in">push</span>(i);<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> x=q.<span class="hljs-built_in">front</span>();q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;g[x].<span class="hljs-built_in">size</span>();i++)<br>ans[g[x][i]]=<span class="hljs-built_in">query</span>(rt[x],<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,lst[g[x][i]]);<br><span class="hljs-keyword">if</span>(fail[x]!=<span class="hljs-number">0</span>)<br>&#123;<br>rt[fail[x]]=<span class="hljs-built_in">Merge</span>(rt[fail[x]],rt[x]);<br><span class="hljs-keyword">if</span>(!(--in[fail[x]])) q.<span class="hljs-built_in">push</span>(fail[x]);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> len;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,init<span class="hljs-number">+1</span>);<br>n=<span class="hljs-built_in">strlen</span>(init<span class="hljs-number">+1</span>);<br>now=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) a[i]=now;<br><span class="hljs-keyword">while</span>(q--)<br>&#123;<br><span class="hljs-type">char</span> op[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,op);<br><span class="hljs-keyword">if</span>(op[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;A&#x27;</span>)<br>&#123;<br>now++;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,add<span class="hljs-number">+1</span>);<br>len=<span class="hljs-built_in">strlen</span>(add<span class="hljs-number">+1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)<br>a[n+i]=now,init[n+i]=add[i];<br>n+=len;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>m++;lst[m]=now;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s<span class="hljs-number">+1</span>);<br>len=<span class="hljs-built_in">strlen</span>(s<span class="hljs-number">+1</span>);<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!ch[x][s[i]-<span class="hljs-string">&#x27;A&#x27;</span>]) ch[x][s[i]-<span class="hljs-string">&#x27;A&#x27;</span>]=++cnt;<br>x=ch[x][s[i]-<span class="hljs-string">&#x27;A&#x27;</span>];<br>&#125;<br>g[x].<span class="hljs-built_in">push_back</span>(m);<br>&#125;<br>&#125;<br><span class="hljs-built_in">Fail</span>();<span class="hljs-built_in">DP</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF997E-Good-Subsegments-CF526F-Pudding-Monsters"><a href="#CF997E-Good-Subsegments-CF526F-Pudding-Monsters" class="headerlink" title="CF997E Good Subsegments &#x2F; CF526F Pudding Monsters"></a>CF997E Good Subsegments &#x2F; CF526F Pudding Monsters</h2><p>$CF997E$ 是 $CF526F$ 的加强版。只写 $CF997E$。</p><p>去年做这题的时候没有理解透彻，最近有想起来重新做了一遍，又收获了一点新东西。</p><p>一段区间 $[l,r]$ 的值域连续的充要条件就是 $\max-\min&#x3D;r-l$ ，所以就是要求满足 $\max-\min+l-r&#x3D;0$ 的区间个数。有因为 $\max -\min-l+r\ge 0$ 。所以其实就是要求最小值是 $0 $ 的个数。</p><p>考虑把询问离线，按右端点从小到大排序。对于每个右端点，用线段树和单调栈可以维护后缀的 $\max-\min+l-r$ 的值，这样就可以求出固定了右端点的合法区间个数。但题目要求的是 $[l,r]$ 中的所有合法区间，所以还要维护下一历史版本和，每次右端点右移的时候线段树的 $tim$ 就加 $1$ 。</p><p>下面是一些实现的细节</p><ul><li><p>对于线段树我们并不用真正去记录最小值是 $0$ 的个数。因为 $[r,r]$ 这个区间的值一定是为 $0$ 的，维护最小值个数就好了。</p></li><li><p>时间的 $tim$ 在 $pushdown$ 的时候只下传到存在最小值的区间，因为只有那些区间的当前版本有贡献</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,q,a[N];<br><span class="hljs-type">int</span> st1[N],st2[N],top1,top2;<br>ll ans[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> l,r,id;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (node &amp;b) &#123;<span class="hljs-keyword">return</span> r&lt;b.r;&#125;<br>&#125;que[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Tree</span><br>&#123;<br>ll ans;<br><span class="hljs-type">int</span> c,mn,tim,tag;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add_tag</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> val)</span></span>&#123; t[k].tag+=val;t[k].mn+=val;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add_tim</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> val)</span></span>&#123; t[k].ans+=<span class="hljs-number">1ll</span>*val*t[k].c;t[k].tim+=val;&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k].c=<span class="hljs-number">1</span>;t[k].mn=l;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> ;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid);<span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(t[k].tag!=<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">Add_tag</span>(k&lt;&lt;<span class="hljs-number">1</span>,t[k].tag);<span class="hljs-built_in">Add_tag</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,t[k].tag);<br>t[k].tag=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(t[k].tim)<br>&#123;<br><span class="hljs-keyword">if</span>(t[k&lt;&lt;<span class="hljs-number">1</span>].mn==t[k].mn) <span class="hljs-built_in">Add_tim</span>(k&lt;&lt;<span class="hljs-number">1</span>,t[k].tim);<br><span class="hljs-keyword">if</span>(t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mn==t[k].mn) <span class="hljs-built_in">Add_tim</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,t[k].tim);<br>t[k].tim=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k].mn=<span class="hljs-built_in">min</span>(t[k&lt;&lt;<span class="hljs-number">1</span>].mn,t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mn);<br>t[k].c=(t[k&lt;&lt;<span class="hljs-number">1</span>].mn==t[k].mn ? t[k&lt;&lt;<span class="hljs-number">1</span>].c:<span class="hljs-number">0</span>)+(t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mn==t[k].mn ? t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].c:<span class="hljs-number">0</span>);<br>t[k].ans=t[k&lt;&lt;<span class="hljs-number">1</span>].ans+t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Add_tag</span>(k,val),<span class="hljs-built_in">void</span>();<br><span class="hljs-keyword">if</span>(l&gt;y||r&lt;x) <span class="hljs-keyword">return</span> ;<br><span class="hljs-built_in">pushdown</span>(k);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y,val);<span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y,val);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="hljs-keyword">return</span> t[k].ans;<br><span class="hljs-keyword">if</span>(l&gt;y||r&lt;x) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushdown</span>(k);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y)+<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;que[i].l,&amp;que[i].r),que[i].id=i;<br><span class="hljs-built_in">sort</span>(que<span class="hljs-number">+1</span>,que<span class="hljs-number">+1</span>+q);<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,now=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">Add_tag</span>(<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">while</span>(top1&amp;&amp;a[st1[top1]]&lt;a[i]) <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,st1[top1<span class="hljs-number">-1</span>]<span class="hljs-number">+1</span>,st1[top1],a[i]-a[st1[top1]]),top1--;<br><span class="hljs-keyword">while</span>(top2&amp;&amp;a[st2[top2]]&gt;a[i]) <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,st2[top2<span class="hljs-number">-1</span>]<span class="hljs-number">+1</span>,st2[top2],a[st2[top2]]-a[i]),top2--;<br>st1[++top1]=i;st2[++top2]=i;<br><span class="hljs-built_in">Add_tim</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(now&lt;=q&amp;&amp;que[now].r==i)<br>ans[que[now].id]=<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,que[now].l,que[now].r),now++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1693C-Keshi-in-Search-of-AmShZ"><a href="#CF1693C-Keshi-in-Search-of-AmShZ" class="headerlink" title="CF1693C Keshi in Search of AmShZ"></a>CF1693C Keshi in Search of AmShZ</h2><p>正着搞比较难（<del>其实是不会</del>），考虑建反图。</p><p>$d_x$ 为 $n$ 到 $x$ 的最少天数。</p><p>考虑一个点 $x$ ，所有入边的 $d$ 值为 ${d_1,d_2,d_3,\dots,d_k}\ (d_1\le d_2 \dots \le d_k)$  </p><p>那么 $d_x&#x3D;\min\limits_{i&#x3D;1 \sim k}{d_i+k-i}+1$</p><p>回顾一下在 $Dij$ 的过程中每次都是从 $priority-queue$ 里面弹出最小值，所以不用考虑 ${d_1,d_2,d_3,\dots,d_k}$ 的排序，直接记录当前入度就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,m,in[N],dis[N],vis[N];<br>vector&lt;<span class="hljs-type">int</span>&gt;g[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x,y;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),in[x]++,g[y].<span class="hljs-built_in">push_back</span>(x);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) dis[i]=m+n;<br>priority_queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;q;<br>dis[n]=<span class="hljs-number">0</span>;<br>q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>,n));<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> x=q.<span class="hljs-built_in">top</span>().second;q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(vis[x]) <span class="hljs-keyword">continue</span>;<br>vis[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;g[x].<span class="hljs-built_in">size</span>();i++)<br>&#123;<br><span class="hljs-type">int</span> y=g[x][i];<br><span class="hljs-keyword">if</span>(dis[y]&gt;dis[x]+in[y]) <br>dis[y]=dis[x]+in[y],q.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(-dis[y],y));<br>in[y]--;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,dis[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CF325E-The-Red-Button"><a href="#CF325E-The-Red-Button" class="headerlink" title="CF325E The Red Button"></a>CF325E The Red Button</h2><p>手完了几组后发现奇数情况应该是 $-1$ 。</p><ul><li><p>考虑 $n&#x3D;2n’+1$ ， $n-1$ 和 $0$ 这两个点只有 $n’$ 可以到达，所以奇数情况一定无解。</p></li><li><p>考虑 $n&#x3D;2n’$ ，我们发现 $2i \equiv 2(i+n’)(mod \ n)$，所以 $i$ 和 $i+n’$ 这两个点是等价的，所以直接将整个序列划分成两个环，最后在合并这两个环就好了，维护一个 $nex$ 数组和并查集就好了。</p></li></ul><p>看了很久一直没有发现这个等价关系，果真是个菜狗</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,f[N],nex[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123; <span class="hljs-keyword">return</span> x==f[x]? x:f[x]=<span class="hljs-built_in">find</span>(f[x]); &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) f[i]=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> j=i+n/<span class="hljs-number">2</span>;<br>nex[i]=i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>;<br>nex[j]=i&lt;&lt;<span class="hljs-number">1</span>;<br>f[<span class="hljs-built_in">find</span>(i)]=f[<span class="hljs-built_in">find</span>(i&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>)];<br>f[<span class="hljs-built_in">find</span>(j)]=f[<span class="hljs-built_in">find</span>(i&lt;&lt;<span class="hljs-number">1</span>)];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++)<br>&#123;<br><span class="hljs-type">int</span> j=i+n/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)!=<span class="hljs-built_in">find</span>(j))<br>&#123;<br><span class="hljs-built_in">swap</span>(nex[i],nex[j]);<br>f[<span class="hljs-built_in">find</span>(i)]=f[<span class="hljs-built_in">find</span>(j)];<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 &quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=nex[<span class="hljs-number">0</span>];i&lt;=n;i++,j=nex[j]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,j);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LZ4416-easy"><a href="#LZ4416-easy" class="headerlink" title="LZ4416 easy"></a>LZ4416 easy</h2><p>集训的题目，神仙 $Qiuly$ 的 $CDQ$ 分治 $+$ 虚树的做法没搞懂，树分块的做法不想学树分块，前两天知道神仙 $HM$ 的树剖维护轻儿子连通块的做法，马上就会了。不过打 $+$ 对拍 $+$ 调了四五个小时（<del>菜狗石锤</del>），然而 $HM$ 想 $+$ 打 $+$ 调只用了 $40$ 分钟，这就是差距 $QWQ$。</p><p>我们求出了每个询问的连通块大小之后，用求连续的组合数和就可以了。重点是怎么维护连通块大小。</p><p>对于每个节点 $x$ ，我们在线段树上维护他轻儿子连通块的大小 $sum$ 和他连向父亲节点的边的状态 $op$，这两个操作在线段树上二分就好了。</p><p>对于询问操作，我们先将 $x$ 跳到与他连通的深度最浅的点$X$，再在 $X$ 所在的重链上找到与他连通的深度最大的点 $Y$ ，答案就是 $[X,Y]$ 这条链上的 $sum +dep[Y]-dep[X]+1$ 。</p><p>对于修改操作，设路径为 $[x,y]$，与 $LCA$ 连通的深度最浅的点是 $z$ 。我们先对 $[z,x] \cup [z,y]$ 路径上连通的轻边，从上往下更新轻儿子大小。然后在翻转 $[x,y]$。最后再对$[z,x] \cup [z,y]$ 路径上连通的轻边，从下往上更新轻儿子大小。</p><p>全部的锅都处在了修改操作上面，一开始没有考虑修改和更新的顺序，然后又发现没有维护 $[z,LCA]$ 这条路径上的信息 ，主要就是这两个点。</p><p>$A$ 了后看了下 $HM$ 的代码，发现自己修改操作那里很傻。其实多那一个数组 $siz$ 记录当前轻子树的大小，每次先减去原来的 $siz$，再重新求一次 $siz$ 加上去就好了。（<del>菜飞力</del>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+5</span>,mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> fac[N],inv[N],invf[N],gen[N],len;<br><span class="hljs-type">int</span> n,m,q,tot,head[N],nex[N&lt;&lt;<span class="hljs-number">1</span>],v[N&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> cnt,dep[N],dep_son[N],son[N],siz[N],tag[N],seg[N],top[N],f[N];<br><span class="hljs-type">int</span> ans[N],Ans,A,B;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> rev,sum,op;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Que</span><br>&#123;<br><span class="hljs-type">int</span> l,r,id;<br>&#125;que[N];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Que a,Que b)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(a.l/len==b.l/len)<br>&#123;<br><span class="hljs-type">int</span> bl=a.l/len;<br><span class="hljs-keyword">if</span>(bl&amp;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> a.r&gt;b.r;<br><span class="hljs-keyword">return</span> a.r&lt;b.r;<br>&#125;<br><span class="hljs-keyword">return</span>  a.l&lt;b.l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>nex[++tot]=head[x];v[tot]=y;head[x]=tot;<br>nex[++tot]=head[y];v[tot]=x;head[y]=tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>f[x]=fa;<br>dep[x]=dep[fa]<span class="hljs-number">+1</span>;<br>siz[x]=<span class="hljs-number">1</span>;dep_son[x]=x;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br>&#123;<br><span class="hljs-type">int</span> y=v[i];<br><span class="hljs-keyword">if</span>(y==fa) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs1</span>(y,x);<br><span class="hljs-keyword">if</span>(siz[son[x]]&lt;siz[y]) son[x]=y,dep_son[x]=dep_son[y];<br>siz[x]+=siz[y];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>seg[x]=++cnt;tag[cnt]=x;<br><span class="hljs-keyword">if</span>(son[x]) top[son[x]]=top[x],<span class="hljs-built_in">dfs2</span>(son[x]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br>&#123;<br><span class="hljs-type">int</span> y=v[i];<br><span class="hljs-keyword">if</span>(top[y]) <span class="hljs-keyword">continue</span>;<br>top[y]=y;<span class="hljs-built_in">dfs2</span>(y);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k].op=r-l<span class="hljs-number">+1</span>-t[k].op;<br>t[k].rev^=<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">reverse</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid);<span class="hljs-built_in">reverse</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r);<br>t[k].rev^=<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k].sum=t[k&lt;&lt;<span class="hljs-number">1</span>].sum+t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sum;<br>t[k].op=t[k&lt;&lt;<span class="hljs-number">1</span>].op+t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].op;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br>t[k].op=(l!=<span class="hljs-number">1</span>);<br>t[k].sum=siz[tag[l]]-siz[son[tag[l]]]<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid);<span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="hljs-keyword">return</span> <span class="hljs-built_in">reverse</span>(k,l,r),<span class="hljs-built_in">void</span>();<br><span class="hljs-keyword">if</span>(l&gt;y||r&lt;x) <span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">if</span>(t[k].rev) <span class="hljs-built_in">pushdown</span>(k,l,r);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y);<span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> t[k].sum+=val,<span class="hljs-built_in">void</span>();<br><span class="hljs-keyword">if</span>(t[k].rev) <span class="hljs-built_in">pushdown</span>(k,l,r);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">change</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,val);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">change</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,val);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">queryl_op</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l&gt;x||t[k].op==r-l<span class="hljs-number">+1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> l;<br><span class="hljs-keyword">if</span>(t[k].rev) <span class="hljs-built_in">pushdown</span>(k,l,r);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> res=<span class="hljs-built_in">queryl_op</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x);<br><span class="hljs-keyword">if</span>(res) <span class="hljs-keyword">return</span> res;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">queryl_op</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">queryr_op</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(r&lt;x||t[k].op==r-l<span class="hljs-number">+1</span>) <span class="hljs-keyword">return</span> n<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> l;<br><span class="hljs-keyword">if</span>(t[k].rev) <span class="hljs-built_in">pushdown</span>(k,l,r);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> res=<span class="hljs-built_in">queryr_op</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x);<br><span class="hljs-keyword">if</span>(res!=n<span class="hljs-number">+1</span>) <span class="hljs-keyword">return</span> res;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">queryr_op</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query_op</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> t[k].op;<br><span class="hljs-keyword">if</span>(t[k].rev) <span class="hljs-built_in">pushdown</span>(k,l,r);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query_op</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">query_op</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="hljs-keyword">return</span> t[k].sum;<br><span class="hljs-keyword">if</span>(l&gt;y||r&lt;x) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(t[k].rev) <span class="hljs-built_in">pushdown</span>(k,l,r);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y)+<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> type)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> ;<br><span class="hljs-type">int</span> op=<span class="hljs-built_in">query_op</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[x]);<br><span class="hljs-keyword">if</span>(!op) <span class="hljs-keyword">return</span> ;<br><span class="hljs-type">int</span> r=<span class="hljs-built_in">queryr_op</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[x]<span class="hljs-number">+1</span>)<span class="hljs-number">-1</span>;<br>r=<span class="hljs-built_in">min</span>(seg[dep_son[x]],r);<br><span class="hljs-type">int</span> g=<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[x],r)+dep[tag[r]]-dep[x]<span class="hljs-number">+1</span>;<br><span class="hljs-built_in">change</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[f[x]],type*g);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify_reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> fx=top[x],fy=top[y];<br><span class="hljs-type">int</span> st[N],stf[N],nf=<span class="hljs-number">0</span>,num=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(fx!=fy)<br>&#123;<br><span class="hljs-keyword">if</span>(dep[fx]&lt;dep[fy]) <span class="hljs-built_in">swap</span>(fx,fy),<span class="hljs-built_in">swap</span>(x,y);<br>st[++num]=x;<br>x=f[fx];fx=top[x];<br>&#125;<br><span class="hljs-keyword">if</span>(dep[x]&gt;dep[y]) <span class="hljs-built_in">swap</span>(x,y);<br><span class="hljs-type">int</span> u=x;<br><span class="hljs-keyword">while</span>(top[u]!=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> op=<span class="hljs-built_in">query_op</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[top[u]]);<br><span class="hljs-keyword">if</span>(!op) <span class="hljs-keyword">break</span>;<br>stf[++nf]=u;u=f[top[u]];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=nf;i;i--) <span class="hljs-built_in">update</span>(top[stf[i]],<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=num;i;i--) <span class="hljs-built_in">update</span>(top[st[i]],<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=num;i++) <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[top[st[i]]],seg[st[i]]);<br><span class="hljs-keyword">if</span>(x!=y) <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[x]<span class="hljs-number">+1</span>,seg[y]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=num;i++) <span class="hljs-built_in">update</span>(top[st[i]],<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=nf;i++) <span class="hljs-built_in">update</span>(top[stf[i]],<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l=x,r=x;<br><span class="hljs-keyword">while</span>(r)<br>&#123;<br>l=<span class="hljs-built_in">queryl_op</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[r]);<br><span class="hljs-keyword">if</span>(l&lt;seg[top[r]]) r=f[top[r]];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>&#125;<br>x=tag[l];<br>    r=<span class="hljs-built_in">queryr_op</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[x]<span class="hljs-number">+1</span>)<span class="hljs-number">-1</span>;<br>r=<span class="hljs-built_in">min</span>(seg[dep_son[x]],r);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,seg[x],r)+dep[tag[r]]-dep[x]<span class="hljs-number">+1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>f[<span class="hljs-number">0</span>]=invf[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">1</span>]=f[<span class="hljs-number">1</span>]=gen[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>&#123;<br>f[i]=<span class="hljs-number">1ll</span>*f[i<span class="hljs-number">-1</span>]*i%mod;<br>inv[i]=<span class="hljs-number">1ll</span>*(mod-mod/i)*inv[mod%i]%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) gen[i]=<span class="hljs-number">2ll</span>*gen[i<span class="hljs-number">-1</span>]%mod,invf[i]=<span class="hljs-number">1ll</span>*inv[i]*invf[i<span class="hljs-number">-1</span>]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;y) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span>*f[x]*invf[y]%mod*invf[x-y]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> op)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(op) Ans=(Ans+<span class="hljs-built_in">C</span>(A,++B))%mod;<br><span class="hljs-keyword">else</span> Ans=(<span class="hljs-number">1ll</span>*Ans*<span class="hljs-number">2</span>%mod-<span class="hljs-built_in">C</span>(A++,B))%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Del</span><span class="hljs-params">(<span class="hljs-type">int</span> op)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(op) Ans=(Ans-<span class="hljs-built_in">C</span>(A,B--))%mod;<br><span class="hljs-keyword">else</span> Ans=<span class="hljs-number">1ll</span>*(Ans+<span class="hljs-built_in">C</span>(--A,B))*inv[<span class="hljs-number">2</span>]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> op,x,y;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="hljs-built_in">Add</span>(x,y);<br><span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);top[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;op,&amp;x,&amp;y);<br><span class="hljs-keyword">if</span>(!op) <span class="hljs-built_in">modify_reverse</span>(x,y);<br><span class="hljs-keyword">else</span> x=<span class="hljs-built_in">Query</span>(x),que[++q]=(Que)&#123;x,y<span class="hljs-number">-1</span>,q&#125;;<br>&#125;<br><span class="hljs-built_in">init</span>(); len=<span class="hljs-built_in">sqrt</span>(n);<br><span class="hljs-built_in">sort</span>(que<span class="hljs-number">+1</span>,que<span class="hljs-number">+1</span>+q,cmp);<br>A=B=<span class="hljs-number">0</span>;Ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>&#123;<br><span class="hljs-keyword">while</span>(A&lt;que[i].l) <span class="hljs-built_in">Add</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(A&gt;que[i].l) <span class="hljs-built_in">Del</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(B&lt;que[i].r) <span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(B&gt;que[i].r) <span class="hljs-built_in">Del</span>(<span class="hljs-number">1</span>);<br>ans[que[i].id]=gen[que[i].l]-Ans;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(ans[i]%mod+mod)%mod);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><del>没错，没有任何注释</del></p><h2 id="P4443-Dojave"><a href="#P4443-Dojave" class="headerlink" title="P4443 Dojave"></a>P4443 Dojave</h2><p>我真的是太菜力。</p><p>对于一个区间异或和为 $S$ ，那其实就是在区间内外分别选两个数 $x$ 和 $y$ ,使得 $x \oplus y$ &#x3D; $S \oplus (2^{m}-1)$</p><p>考虑一下怎样才能构造出一个合法的区间。</p><p>对于长度为奇数的很明显可以将 $x \oplus y&#x3D; S \oplus (2^m-1)$ 的两两配对，最后肯定剩下一个数没有被匹配，所以一定有解。</p><p>对于长度为偶数的情况依旧这样配对，不完全配对一定有解，所以只考虑完全配对。</p><p>设 $n&#x3D;2k$</p><ul><li><p>$k$ 为奇数时，前 $k-1$ 对的异或和为 $0$ ，所以最后一对有 $S&#x3D;x \oplus y&#x3D;S\oplus (2^m-1)$，所以 $x\oplus y&#x3D;0$ 矛盾。</p></li><li><p>$k$ 为偶数时，$S&#x3D;0$，所以只有存在 $x$ 在这个区间，使得 $x\oplus(2^m-1)$ 不在这个区间中就有解。</p></li></ul><p>最后发现无解的区间只有长度为 $4$ 的倍数且区间内的数 $x\oplus y&#x3D;2^m-1$ 两两配对的情况才无解，所以考虑如何判断一段区间内的数是否两两配对。</p><p>这是一个小 $tirck$ ，就是对于配对的两个数赋值为同一个随机数，然后判断区间异或和是否为 $0$ 。</p><p>最后还要特判一下 $m&#x3D;1$ 的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e6</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,m,pos[N],vis[N];<br>ll a[N],s[N];<br><span class="hljs-type">int</span> lim,tag;<br>map&lt;ll,<span class="hljs-type">int</span>&gt;mp[<span class="hljs-number">4</span>]; <br>ll ans;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>    n=<span class="hljs-number">1</span>&lt;&lt;m;lim=n<span class="hljs-number">-1</span>;<br>    ans=<span class="hljs-number">1ll</span>*(n<span class="hljs-number">+1</span>)*n/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]),pos[a[i]]=i;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!vis[i])<br>        &#123;<br>            vis[i]=vis[pos[lim^a[i]]]=<span class="hljs-number">1</span>;<br>            a[i]=a[pos[lim^a[i]]]=<span class="hljs-number">1ll</span>*<span class="hljs-built_in">rand</span>()*<span class="hljs-built_in">rand</span>();<br>        &#125;<br>        s[i]=s[i<span class="hljs-number">-1</span>]^a[i];<br>    &#125;<br>    mp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        ans-=mp[i%<span class="hljs-number">4</span>][s[i]];<br>        mp[i%<span class="hljs-number">4</span>][s[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(m!=<span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;   <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="CF963E-Circles-of-Waiting-loj-3080-国际象棋"><a href="#CF963E-Circles-of-Waiting-loj-3080-国际象棋" class="headerlink" title="CF963E Circles of Waiting &amp;&amp; loj 3080 国际象棋"></a>CF963E Circles of Waiting &amp;&amp; loj 3080 国际象棋</h2><p>两道都是主元法，最近遇到太多次了。</p><h2 id="CF963E-Circles-of-Waiting"><a href="#CF963E-Circles-of-Waiting" class="headerlink" title="CF963E Circles of Waiting "></a>CF963E Circles of Waiting </h2><p>设 $f_{i,j}$ 为从 $(i,j)$ 这个点开始走出去的期望步数。</p><p>所以容易有 $f_{i,j}&#x3D;\sum\limits_{k&#x3D;1}\limits^{4}p_k\times f_{i+x_k,j+y_k} +1$</p><p>当一个点的距离超过 $R$ 时，显然有 $f_{i,j}&#x3D;0$。所以我们将每行第一个 $(i,j)$ 的 $f_{i,j}$ 定为一个主元，然后通过关系式向右递推到 $f_{i,j}&#x3D;0$ 的情况，这样就得到了若干个方程，高斯消元一下就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">111</span>,mod=<span class="hljs-number">1e9</span><span class="hljs-number">+7</span>;<br><span class="hljs-type">int</span> n,R,a0,a1,a2,a3,a4;<br><span class="hljs-type">int</span> b[N][N],can[N*N],ed[N*N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qsm</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) res=<span class="hljs-number">1ll</span>*res*a%mod;<br>a=<span class="hljs-number">1ll</span>*a*a%mod;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">vec</span>&#123;<span class="hljs-type">int</span> x,y;&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> <br>&#123; <br><span class="hljs-type">int</span> a[N];<br>&#125;f[N*N];<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (vec p,vec q)&#123;<span class="hljs-keyword">return</span> p.x&gt;q.x;&#125;<br>priority_queue&lt;vec&gt;q;<br>node <span class="hljs-keyword">operator</span> *(<span class="hljs-type">int</span> x,node y) <br>&#123; <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>;i++) y.a[i]=<span class="hljs-number">1ll</span>*y.a[i]*x%mod;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br>node <span class="hljs-keyword">operator</span> +(node x,node y) <br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>;i++) x.a[i]=(x.a[i]+y.a[i])%mod;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br>node <span class="hljs-keyword">operator</span> +(node x,<span class="hljs-type">int</span> y)<br>&#123;<br>x.a[<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>]=(x.a[<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>]+y)%mod;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pos</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">return</span> (y+R<span class="hljs-number">+1</span>)*n+(x+R<span class="hljs-number">+2</span>); &#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Calc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">2</span>*R;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!b[i][i])<br>&#123;<br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;=<span class="hljs-number">2</span>*R;j++)<br><span class="hljs-keyword">if</span>(b[j][i])&#123;k=j;<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span>(!k) <span class="hljs-keyword">break</span> ;<br><span class="hljs-built_in">swap</span>(b[i],b[k]);<br>&#125;<br><span class="hljs-type">int</span> inv=<span class="hljs-built_in">qsm</span>(b[i][i],mod<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">2</span>*R;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==j) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> p=<span class="hljs-number">1ll</span>*inv*(mod-b[j][i])%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;=<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>;k++)<br>b[j][k]=(b[j][k]<span class="hljs-number">+1ll</span>*p*b[i][k]%mod)%mod;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">2</span>*R;i++) b[i][<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>]=<span class="hljs-number">1ll</span>*b[i][<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>]*<span class="hljs-built_in">qsm</span>(b[i][i],mod<span class="hljs-number">-2</span>)%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d%d&quot;</span>,&amp;R,&amp;a1,&amp;a2,&amp;a3,&amp;a4);<br>n=<span class="hljs-number">2</span>*R<span class="hljs-number">+3</span>;a0=<span class="hljs-built_in">qsm</span>(a1+a2+a3+a4,mod<span class="hljs-number">-2</span>);<br>a1=<span class="hljs-number">1ll</span>*a1*a0%mod;a2=<span class="hljs-number">1ll</span>*a2*a0%mod;a3=<span class="hljs-number">1ll</span>*a3*a0%mod;a4=<span class="hljs-number">1ll</span>*a4*a0%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=-R;i&lt;=R;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=-R;j&lt;=R;j++)<br><span class="hljs-keyword">if</span>(i*i+j*j&lt;=R*R) can[<span class="hljs-built_in">pos</span>(i,j)]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=-R;j&lt;=R;j++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=-R;i&lt;=<span class="hljs-number">0</span>;i++) <br><span class="hljs-keyword">if</span>(can[<span class="hljs-built_in">pos</span>(i,j)])<br>&#123;<br>q.<span class="hljs-built_in">push</span>(vec&#123;i,j&#125;);<br>f[<span class="hljs-built_in">pos</span>(i,j)].a[j+R]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=R;i&gt;=-R;i--) <br><span class="hljs-keyword">if</span>(can[<span class="hljs-built_in">pos</span>(i,j)])<br>&#123;<br>ed[<span class="hljs-built_in">pos</span>(i,j)]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> x=q.<span class="hljs-built_in">top</span>().x,y=q.<span class="hljs-built_in">top</span>().y;q.<span class="hljs-built_in">pop</span>();<br>f[<span class="hljs-built_in">pos</span>(x<span class="hljs-number">+1</span>,y)]=<span class="hljs-built_in">qsm</span>(a1,mod<span class="hljs-number">-2</span>)*(f[<span class="hljs-built_in">pos</span>(x,y)]+((mod-a2)*f[<span class="hljs-built_in">pos</span>(x,y<span class="hljs-number">+1</span>)])+((mod-a3)*f[<span class="hljs-built_in">pos</span>(x<span class="hljs-number">-1</span>,y)])+((mod-a4)*f[<span class="hljs-built_in">pos</span>(x,y<span class="hljs-number">-1</span>)])+(mod<span class="hljs-number">-1</span>));<br><span class="hljs-keyword">if</span>(ed[<span class="hljs-built_in">pos</span>(x,y)])<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>;i++) b[y+R][i]=f[<span class="hljs-built_in">pos</span>(x<span class="hljs-number">+1</span>,y)].a[i];<br>b[y+R][<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>]=mod-b[y+R][<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>];<br>&#125;<br><span class="hljs-keyword">else</span> q.<span class="hljs-built_in">push</span>(vec&#123;x<span class="hljs-number">+1</span>,y&#125;);<br>&#125;<br><span class="hljs-built_in">Calc</span>();<br>b[<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>][<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> Ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>;i++) Ans=(Ans<span class="hljs-number">+1ll</span>*f[<span class="hljs-built_in">pos</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)].a[i]*b[i][<span class="hljs-number">2</span>*R<span class="hljs-number">+1</span>]%mod)%mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,Ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="loj-3080-「2019-集训队互测-Day-5」国际象棋"><a href="#loj-3080-「2019-集训队互测-Day-5」国际象棋" class="headerlink" title="loj 3080. 「2019 集训队互测 Day 5」国际象棋"></a>loj 3080. 「2019 集训队互测 Day 5」国际象棋</h2><p>这题走日字其实也是一样的，我们只需要把第一二行和第一列的点设为主元转移就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">222</span>,mod=<span class="hljs-number">998244353</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(ch&lt;<span class="hljs-string">&#x27;0&#x27;</span>||ch&gt;<span class="hljs-string">&#x27;9&#x27;</span>) ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(ch&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>res=(res&lt;&lt;<span class="hljs-number">1</span>)+(res&lt;&lt;<span class="hljs-number">3</span>)+(ch^<span class="hljs-number">48</span>),ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">10</span>) <span class="hljs-built_in">print</span>(x/<span class="hljs-number">10</span>);<br><span class="hljs-built_in">putchar</span>((x%<span class="hljs-number">10</span>)^<span class="hljs-number">48</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qsm</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> res=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>) res=<span class="hljs-number">1ll</span>*res*a%mod;<br>a=<span class="hljs-number">1ll</span>*a*a%mod;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">int</span> n,m,cnt,tot,p[<span class="hljs-number">10</span>],mat[N*N][N*<span class="hljs-number">3</span>],b[N*<span class="hljs-number">3</span>][N*<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> xx[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">int</span> yy[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pos</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> (x<span class="hljs-number">-1</span>)*(m<span class="hljs-number">+1</span>)+y;&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>x+=y;<br><span class="hljs-keyword">if</span>(x&gt;=mod) x-=mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;cnt;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!b[i][i])<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;cnt;j++)<br><span class="hljs-keyword">if</span>(b[j][i]) &#123; <span class="hljs-built_in">swap</span>(b[i],b[j]);<span class="hljs-keyword">break</span>;&#125;<br><span class="hljs-keyword">if</span>(!b[i][i]) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-type">int</span> inv=<span class="hljs-built_in">qsm</span>(b[i][i],mod<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=cnt;k++) b[i][k]=<span class="hljs-number">1ll</span>*b[i][k]*inv%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;cnt;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(i==j) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> p=mod-b[j][i]%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;=cnt;k++) <span class="hljs-built_in">Add</span>(b[j][k],<span class="hljs-number">1ll</span>*p*b[i][k]%mod);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>n=<span class="hljs-built_in">read</span>();m=<span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">8</span>;i++) p[i]=<span class="hljs-built_in">read</span>(),p[<span class="hljs-number">0</span>]+=p[i];<br>p[<span class="hljs-number">0</span>]=<span class="hljs-built_in">qsm</span>(p[<span class="hljs-number">0</span>],mod<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">8</span>;i++) p[i]=<span class="hljs-number">1ll</span>*p[i]*p[<span class="hljs-number">0</span>]%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++) mat[<span class="hljs-built_in">pos</span>(i,j)][++cnt]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++) mat[<span class="hljs-built_in">pos</span>(i,<span class="hljs-number">1</span>)][++cnt]=<span class="hljs-number">1</span>;<br>cnt++;<br><span class="hljs-type">int</span> inv=<span class="hljs-built_in">qsm</span>(p[<span class="hljs-number">5</span>],mod<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>&#123;<br><span class="hljs-type">int</span> x=i<span class="hljs-number">+2</span>,y=j<span class="hljs-number">+1</span>; <br><span class="hljs-type">int</span> u=<span class="hljs-built_in">pos</span>(x,y);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=cnt;k++) mat[u][k]=mat[<span class="hljs-built_in">pos</span>(i,j)][k];<br>mat[u][cnt]=mat[u][cnt]<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">8</span>;k++)<br>&#123;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">5</span>||i+xx[k]&lt;<span class="hljs-number">1</span>||i+xx[k]&gt;n||j+yy[k]&lt;<span class="hljs-number">1</span>||j+yy[k]&gt;m) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">1</span>;l&lt;=cnt;l++)<br><span class="hljs-built_in">Add</span>(mat[u][l],<span class="hljs-number">1ll</span>*(mod-p[k])*mat[<span class="hljs-built_in">pos</span>(i+xx[k],j+yy[k])][l]%mod);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=cnt;k++) mat[u][k]=<span class="hljs-number">1ll</span>*mat[u][k]*inv%mod;<br><span class="hljs-keyword">if</span>(x&gt;n||y&gt;m)<br>&#123;<br>tot++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=cnt;k++) b[tot][k]=mat[u][k];<br>&#125;<br>&#125;<br><span class="hljs-built_in">calc</span>();<br><span class="hljs-type">int</span> T,x,y,ans;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br>x=<span class="hljs-built_in">read</span>();y=<span class="hljs-built_in">read</span>();<br>ans=mod-mat[<span class="hljs-built_in">pos</span>(x,y)][cnt];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;cnt;i++) <span class="hljs-built_in">Add</span>(ans,<span class="hljs-number">1ll</span>*mat[<span class="hljs-built_in">pos</span>(x,y)][i]*b[i][cnt]%mod);<br><span class="hljs-built_in">print</span>(ans);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="decoration"><a href="#decoration" class="headerlink" title="decoration"></a>decoration</h2><h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><blockquote><p>  有一个 $2\times m$ 的矩阵，要求将每个格子染成 红&#x2F;绿&#x2F;蓝 色，且满足：</p></blockquote><blockquote><p>  有 $R$ 个红色格，$G$ 个绿色格，$B$ 个蓝色格。</p></blockquote><blockquote><p>  相邻格子的颜色不相同。</p></blockquote><blockquote><p>  每个 $2 \times 2$ 矩阵中含有三种颜色。</p></blockquote><blockquote><p>  $1≤m≤10^6,R+G+B&#x3D;2m$</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>数数题，模拟赛的时候数出来了，感觉难度适中。</p><p>考虑每列其实只有三种情况 $[R,G] \ [G,B] \ [R,B]$，而且这三中情况的具体个数是一定的，确定了前一列就可以确定当前列是正着还是反着放。所以问题转化成有若干个三种颜色的小球排序，相邻两个颜色不同的方案数。</p><p>我们先令 $[R,G] \ [G,B] \ [R,B]$ 三种小球个数为 $a,b,c$ 。</p><p>我们假设在放完两种球之后，还有 $i$ 对相邻小球颜色相同。那么方案数为 ${a-b+1-i \choose c-i}$。所以我们现在只需要求出两种小球放完后有 $i$ 对相邻小球颜色相同的方案数。把过程看成把一种小球放入到另一种小球，然后我们就分情况讨论一下。</p><ul><li><p>没有小球放在两边的情况，设插入 $k$ 个空，形成了 $i$ 对相邻小球颜色相同 ，那么就可以推出 $k&#x3D;\frac{a+b-i-1}{2}$，方案数为 ${a-1 \choose k}{b-1 \choose k-1}$</p></li><li><p>有小球放在前边或后边的情况,同理推出 $k&#x3D;\frac{a+b-i}{2}$ ，方案数为 ${a-1\choose k-1}{b-1\choose k-1}$</p></li><li><p>有小球放在两边的情况, $k&#x3D;\frac{a+b-i+1}{2}$ ，方案数为 ${a-1\choose k-2}{b-1 \choose k-1}$</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span><span class="hljs-number">+5</span>,mod=<span class="hljs-number">1e9</span><span class="hljs-number">+7</span>;<br><span class="hljs-type">int</span> n,R,G,B,a,b,c,s[<span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> fac[N],inv[N],f[N],ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>inv[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">1</span>]=fac[<span class="hljs-number">0</span>]=fac[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n<span class="hljs-number">+1</span>;i++)<br>&#123;<br>fac[i]=<span class="hljs-number">1ll</span>*fac[i<span class="hljs-number">-1</span>]*i%mod;<br>inv[i]=<span class="hljs-number">1ll</span>*(mod-mod/i)*inv[mod%i]%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n<span class="hljs-number">+1</span>;i++) inv[i]=<span class="hljs-number">1ll</span>*inv[i]*inv[i<span class="hljs-number">-1</span>]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;y) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>||y&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span>*fac[x]*inv[y]%mod*inv[x-y]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;R,&amp;G,&amp;B);<br>s[<span class="hljs-number">1</span>]=(G+R-B)/<span class="hljs-number">2</span>;s[<span class="hljs-number">2</span>]=(R+B-G)/<span class="hljs-number">2</span>;s[<span class="hljs-number">3</span>]=(G+B-R)/<span class="hljs-number">2</span>;<br><span class="hljs-built_in">sort</span>(s<span class="hljs-number">+1</span>,s<span class="hljs-number">+3</span>);<br>a=s[<span class="hljs-number">3</span>];b=s[<span class="hljs-number">2</span>];c=s[<span class="hljs-number">1</span>];<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">if</span>(!b)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,a==<span class="hljs-number">1</span>? <span class="hljs-number">2</span>:<span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a+b;i++)<br>&#123;<br><span class="hljs-type">int</span> k=a+b-i<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span>(k%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>&#123;<br>k/=<span class="hljs-number">2</span>;<br>f[i]=(f[i]<span class="hljs-number">+1ll</span>*<span class="hljs-built_in">C</span>(a<span class="hljs-number">-1</span>,k)*<span class="hljs-built_in">C</span>(b<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>)%mod)%mod;<br>k++;<br>f[i]=(f[i]<span class="hljs-number">+1ll</span>*<span class="hljs-built_in">C</span>(a<span class="hljs-number">-1</span>,k<span class="hljs-number">-2</span>)*<span class="hljs-built_in">C</span>(b<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>)%mod)%mod;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>k++;k/=<span class="hljs-number">2</span>;<br>f[i]=(f[i]<span class="hljs-number">+2ll</span>*<span class="hljs-built_in">C</span>(a<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>)*<span class="hljs-built_in">C</span>(b<span class="hljs-number">-1</span>,k<span class="hljs-number">-1</span>)) %mod;<br>&#125;<br>ans=(ans<span class="hljs-number">+1ll</span>*f[i]*<span class="hljs-built_in">C</span>(a+b<span class="hljs-number">+1</span>-i,c-i)%mod)%mod;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,<span class="hljs-number">2ll</span>*ans%mod);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Loj2743-「JOI-Open-2016」摩天大楼"><a href="#Loj2743-「JOI-Open-2016」摩天大楼" class="headerlink" title="Loj2743. 「JOI Open 2016」摩天大楼"></a>Loj2743. 「JOI Open 2016」摩天大楼</h2><h2 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h2><blockquote><p>将互不相同的 N 个整数 $A_1, A_2, \dots, A_N$ 按照一定顺序排列。</p></blockquote><blockquote><p>假设排列为 $f_1, f_2, \dots, f_N$，要求：$|f_2-f_1|+|f_3-f_2|+\dots+|f_N-f_{N-1}| \le L$。</p></blockquote><blockquote><p>求满足题意的排列的方案数 $\bmod (10^9+7)$。</p></blockquote><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>考虑从小往大加数，每次产生的贡献 $A_i-A_j$ 比较难搞。但我们发现 $A_i-A_j&#x3D;\sum\limits_{k&#x3D;j}\limits^{i-1}A_{k+1}-A_k$，所以每次加入一个数产生的新的贡献为 $(A_{i+1}-A_{i})\times$ 可以产生贡献的位置个数。</p><p>设 $dp[i][j][k][l]$ 表示前 $i$ 个数分成 $j$ 段贡献为 $k$ 且有 $l$ 个左右边界已经确定。</p><p>所以新的贡献 $k’&#x3D;k+(A_{i+1}-A_i)\times (2j-l)$。接着就分类讨论一下</p><ul><li><p>合并两段 $dp[i+1][j-1][k’][l]+&#x3D;dp[i][j][k][l]\times (j-1)$</p></li><li><p>插入一段的两边 $dp[i+1][j][k’][l]+&#x3D;dp[i][j][k][l]\times (2j-l)$</p></li><li><p>将一段变为边界 $dp[i+1][j][k’][l]+&#x3D;dp[i][j][k][l]\times (2-l)$</p></li><li><p>成为新的不是边界的一段 $dp[i+1][j+1][k’][l]+&#x3D;dp[i][j][k][l]\times (j+1-l)$</p></li><li><p>成为新的是边界的一段 $dp[i+1][j+1][k’][l+1]+&#x3D;dp[i][j][k][l]\times(2-l)$</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">105</span>,M=<span class="hljs-number">1005</span>,mod=<span class="hljs-number">1e9</span><span class="hljs-number">+7</span>;<br><span class="hljs-type">int</span> n,L,a[N];<br><span class="hljs-type">int</span> dp[N][N][M][<span class="hljs-number">3</span>],ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-keyword">if</span>((x+=y)&gt;=mod) x-=mod; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;L);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) <br>&#123;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">sort</span>(a<span class="hljs-number">+1</span>,a<span class="hljs-number">+1</span>+n);<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i;j++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=L;k++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;l&lt;=<span class="hljs-number">2</span>;l++)<br>&#123;<br><span class="hljs-keyword">if</span>(!dp[i][j][k][l]) <span class="hljs-keyword">continue</span>;<br><span class="hljs-type">int</span> kk=k+(a[i<span class="hljs-number">+1</span>]-a[i])*(<span class="hljs-number">2</span>*j-l);<br><span class="hljs-keyword">if</span>(kk&gt;L) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">Add</span>(dp[i<span class="hljs-number">+1</span>][j<span class="hljs-number">+1</span>][kk][l],<span class="hljs-number">1ll</span>*dp[i][j][k][l]*(j<span class="hljs-number">+1</span>-l)%mod);<br><span class="hljs-keyword">if</span>(l&lt;<span class="hljs-number">2</span>) <span class="hljs-built_in">Add</span>(dp[i<span class="hljs-number">+1</span>][j<span class="hljs-number">+1</span>][kk][l<span class="hljs-number">+1</span>],<span class="hljs-number">1ll</span>*dp[i][j][k][l]*(<span class="hljs-number">2</span>-l)%mod);<br><span class="hljs-built_in">Add</span>(dp[i<span class="hljs-number">+1</span>][j][kk][l],<span class="hljs-number">1ll</span>*dp[i][j][k][l]*(<span class="hljs-number">2</span>*j-l)%mod);<br><span class="hljs-keyword">if</span>(j) <span class="hljs-built_in">Add</span>(dp[i<span class="hljs-number">+1</span>][j<span class="hljs-number">-1</span>][kk][l],<span class="hljs-number">1ll</span>*dp[i][j][k][l]*(j<span class="hljs-number">-1</span>)%mod);<br><span class="hljs-keyword">if</span>(l&lt;<span class="hljs-number">2</span>&amp;&amp;j) <span class="hljs-built_in">Add</span>(dp[i<span class="hljs-number">+1</span>][j][kk][l<span class="hljs-number">+1</span>],<span class="hljs-number">1ll</span>*dp[i][j][k][l]*(<span class="hljs-number">2</span>-l)%mod);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=L;i++) <span class="hljs-built_in">Add</span>(ans,dp[n][<span class="hljs-number">1</span>][i][<span class="hljs-number">2</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1738G-Illumination"><a href="#CF1738G-Illumination" class="headerlink" title="CF1738G Illumination"></a>CF1738G Illumination</h2><p>正着求比较困难 <del>(实则我不会)</del> ，考虑不合法的方案数。</p><p>先不考虑询问。 $m$ 很小，所以可以考虑容斥 $f_T$ 表示钦定不被覆盖的集合为 $T$ 的方案数。<br>所以答案是 $(d+1)^{n+1}-\sum\limits_{T \subseteq S}(-1)^{|T|}f_T$ 。 直接做是 $O(n2^m)$  。</p><p>但我们发现一个照明灯的范围只和他左右两边的第一个关键点有关，所以我们可以二分一个关键点的覆盖范围和预处理前缀区间到这个关键点的距离之积，这样就可以 $O(2^m \log n)$ 求出答案。</p><p>考虑插入一个新的照明灯，那其实我们只需要枚举和他最近的关键点，然后会发现这个东西是枚举端点，端点之间的状态都是 $0$ ,端点的状态是 $1$ ,端点以外的状态随便，明显可 $O(m^22^m)$ 预处理出来。</p><p>所以最后复杂度就是 $O(2^m logn+m^22^m+qm)$ 。</p><p>调了好久。。。以后果然要把思路完全搞清晰再打代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+5</span>,mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> n,m,d,q,L[N],p[N],R[N];<br><span class="hljs-type">int</span> sum[<span class="hljs-number">20</span>][N],inv[N&lt;&lt;<span class="hljs-number">1</span>],sumv[<span class="hljs-number">20</span>][N],f[N],g[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>],c[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>],ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x&lt;<span class="hljs-number">0</span>? -x:x;&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">range</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid,res=l<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(l&lt;=r)<br>&#123;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(p[x]-L[mid])&lt;=<span class="hljs-built_in">abs</span>(p[y]-L[mid])) res=mid,l=mid<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>inv[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=d;i++)<br>    inv[i]=<span class="hljs-number">1ll</span>*(mod-mod/i)*inv[mod%i]%mod;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br> R[i]=<span class="hljs-built_in">upper_bound</span>(L<span class="hljs-number">+1</span>,L<span class="hljs-number">+1</span>+n,p[i])-L<span class="hljs-number">-1</span>;<br>         sum[i][<span class="hljs-number">0</span>]=sumv[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>         &#123;<br>             sum[i][j]=<span class="hljs-number">1ll</span>*sum[i][j<span class="hljs-number">-1</span>]*<span class="hljs-built_in">abs</span>(L[j]-p[i])%mod;<br> sumv[i][j]=<span class="hljs-number">1ll</span>*sumv[i][j<span class="hljs-number">-1</span>]*inv[<span class="hljs-built_in">abs</span>(L[j]-p[i])]%mod;<br> &#125;<br>     &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br>R[i]=<span class="hljs-built_in">upper_bound</span>(L<span class="hljs-number">+1</span>,L<span class="hljs-number">+1</span>+n,p[i])-L<span class="hljs-number">-1</span>;<br>sum[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++) <br>sum[i][j]=<span class="hljs-number">1ll</span>*sum[i][j<span class="hljs-number">-1</span>]*<span class="hljs-built_in">abs</span>(L[j]-p[i])%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)<br>&#123;<br><span class="hljs-type">int</span> lst=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>,pos;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br><span class="hljs-keyword">if</span>((i&gt;&gt;(j<span class="hljs-number">-1</span>))&amp;<span class="hljs-number">1</span>) <br>&#123;<br>cnt++;<br><span class="hljs-keyword">if</span>(lst)<br>&#123;<br><span class="hljs-keyword">if</span>(R[lst]!=R[j]) <br>&#123;<br>    pos=<span class="hljs-built_in">range</span>(R[lst]<span class="hljs-number">+1</span>,R[j],lst,j);<br>     f[i]=<span class="hljs-number">1ll</span>*f[i]*(<span class="hljs-number">1ll</span>*sum[lst][pos]*sumv[lst][R[lst]]%mod)%mod*(<span class="hljs-number">1ll</span>*sum[j][R[j]]*sumv[j][pos]%mod)%mod;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> f[i]=sum[j][R[j]];<br>lst=j;<br>&#125;<br><span class="hljs-keyword">if</span>(R[lst]&lt;n) f[i]=<span class="hljs-number">1ll</span>*f[i]*sum[lst][n]%mod*sumv[lst][R[lst]]%mod;<br>f[i]=(f[i]+mod)%mod;<br><span class="hljs-keyword">if</span>(!(cnt&amp;<span class="hljs-number">1</span>)) f[i]=(mod-f[i]);<br>lst=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br><span class="hljs-keyword">if</span>((i&gt;&gt;(j<span class="hljs-number">-1</span>))&amp;<span class="hljs-number">1</span>)<br>&#123;<br>g[lst][j]=(g[lst][j]+f[i])%mod;<br>lst=j;<br>&#125;<br>g[lst][m<span class="hljs-number">+1</span>]=(g[lst][m<span class="hljs-number">+1</span>]+f[i])%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;=m<span class="hljs-number">+1</span>;j++) <br>c[i][j]=(c[i][j<span class="hljs-number">-1</span>]+g[i][j])%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++) <br>g[j][i]=(g[j<span class="hljs-number">-1</span>][i]+g[j][i])%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l=<span class="hljs-built_in">upper_bound</span>(p<span class="hljs-number">+1</span>,p<span class="hljs-number">+1</span>+m,k)-p<span class="hljs-number">-1</span>,r=l<span class="hljs-number">+1</span>;<br><span class="hljs-type">int</span> res=ans,tot=<span class="hljs-number">0</span>,j=r;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i;i--) <br>&#123;<br><span class="hljs-keyword">while</span>(j&lt;=m&amp;&amp;k-p[i]&gt;=p[j]-k) j++;<br>tot=(tot<span class="hljs-number">+1ll</span>*(k-p[i])*(c[i][m<span class="hljs-number">+1</span>]-c[i][j<span class="hljs-number">-1</span>])%mod)%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r;i&lt;=m;i++)<br>&#123;<br><span class="hljs-keyword">while</span>(l&amp;&amp;k-p[l]&lt;p[i]-k) l--;<br>tot=(tot<span class="hljs-number">+1ll</span>*(p[i]-k)*g[l][i]%mod)%mod;<br>&#125;<br>res=(res-tot)%mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(res+mod)%mod);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;d,&amp;n,&amp;m);<br>ans=d<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;L[i]),ans=<span class="hljs-number">1ll</span>*ans*(d<span class="hljs-number">+1</span>)%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p[i]);<br><span class="hljs-built_in">sort</span>(L<span class="hljs-number">+1</span>,L<span class="hljs-number">+1</span>+n);<span class="hljs-built_in">sort</span>(p<span class="hljs-number">+1</span>,p<span class="hljs-number">+1</span>+m);<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br><span class="hljs-keyword">while</span>(q--)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x),<span class="hljs-built_in">solve</span>(x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1738G-Illumination-1"><a href="#CF1738G-Illumination-1" class="headerlink" title="CF1738G Illumination"></a>CF1738G Illumination</h2><p>正着求比较困难 <del>(实则我不会)</del> ，考虑不合法的方案数。</p><p>先不考虑询问。 $m$ 很小，所以可以考虑容斥 $f_T$ 表示钦定不被覆盖的集合为 $T$ 的方案数。<br>所以答案是 $(d+1)^{n+1}-\sum\limits_{T \subseteq S}(-1)^{|T|}f_T$ 。 直接做是 $O(n2^m)$  。</p><p>但我们发现一个照明灯的范围只和他左右两边的第一个关键点有关，所以我们可以二分一个关键点的覆盖范围和预处理前缀区间到这个关键点的距离之积，这样就可以 $O(2^m \log n)$ 求出答案。</p><p>考虑插入一个新的照明灯，那其实我们只需要枚举和他最近的关键点，然后会发现这个东西是枚举端点，端点之间的状态都是 $0$ ,端点的状态是 $1$ ,端点以外的状态随便，明显可 $O(m^22^m)$ 预处理出来。</p><p>所以最后复杂度就是 $O(2^m logn+m^22^m+qm)$ 。</p><p>调了好久。。。以后果然要把思路完全搞清晰再打代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+5</span>,mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> n,m,d,q,L[N],p[N],R[N];<br><span class="hljs-type">int</span> sum[<span class="hljs-number">20</span>][N],inv[N&lt;&lt;<span class="hljs-number">1</span>],sumv[<span class="hljs-number">20</span>][N],f[N],g[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>],c[<span class="hljs-number">20</span>][<span class="hljs-number">20</span>],ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">abs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x&lt;<span class="hljs-number">0</span>? -x:x;&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">range</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid,res=l<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(l&lt;=r)<br>&#123;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(p[x]-L[mid])&lt;=<span class="hljs-built_in">abs</span>(p[y]-L[mid])) res=mid,l=mid<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>inv[<span class="hljs-number">1</span>]=inv[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=d;i++)<br>    inv[i]=<span class="hljs-number">1ll</span>*(mod-mod/i)*inv[mod%i]%mod;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br> R[i]=<span class="hljs-built_in">upper_bound</span>(L<span class="hljs-number">+1</span>,L<span class="hljs-number">+1</span>+n,p[i])-L<span class="hljs-number">-1</span>;<br>         sum[i][<span class="hljs-number">0</span>]=sumv[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>         &#123;<br>             sum[i][j]=<span class="hljs-number">1ll</span>*sum[i][j<span class="hljs-number">-1</span>]*<span class="hljs-built_in">abs</span>(L[j]-p[i])%mod;<br> sumv[i][j]=<span class="hljs-number">1ll</span>*sumv[i][j<span class="hljs-number">-1</span>]*inv[<span class="hljs-built_in">abs</span>(L[j]-p[i])]%mod;<br> &#125;<br>     &#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br>R[i]=<span class="hljs-built_in">upper_bound</span>(L<span class="hljs-number">+1</span>,L<span class="hljs-number">+1</span>+n,p[i])-L<span class="hljs-number">-1</span>;<br>sum[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++) <br>sum[i][j]=<span class="hljs-number">1ll</span>*sum[i][j<span class="hljs-number">-1</span>]*<span class="hljs-built_in">abs</span>(L[j]-p[i])%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;(<span class="hljs-number">1</span>&lt;&lt;m);i++)<br>&#123;<br><span class="hljs-type">int</span> lst=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>,pos;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br><span class="hljs-keyword">if</span>((i&gt;&gt;(j<span class="hljs-number">-1</span>))&amp;<span class="hljs-number">1</span>) <br>&#123;<br>cnt++;<br><span class="hljs-keyword">if</span>(lst)<br>&#123;<br><span class="hljs-keyword">if</span>(R[lst]!=R[j]) <br>&#123;<br>    pos=<span class="hljs-built_in">range</span>(R[lst]<span class="hljs-number">+1</span>,R[j],lst,j);<br>     f[i]=<span class="hljs-number">1ll</span>*f[i]*(<span class="hljs-number">1ll</span>*sum[lst][pos]*sumv[lst][R[lst]]%mod)%mod*(<span class="hljs-number">1ll</span>*sum[j][R[j]]*sumv[j][pos]%mod)%mod;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> f[i]=sum[j][R[j]];<br>lst=j;<br>&#125;<br><span class="hljs-keyword">if</span>(R[lst]&lt;n) f[i]=<span class="hljs-number">1ll</span>*f[i]*sum[lst][n]%mod*sumv[lst][R[lst]]%mod;<br>f[i]=(f[i]+mod)%mod;<br><span class="hljs-keyword">if</span>(!(cnt&amp;<span class="hljs-number">1</span>)) f[i]=(mod-f[i]);<br>lst=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br><span class="hljs-keyword">if</span>((i&gt;&gt;(j<span class="hljs-number">-1</span>))&amp;<span class="hljs-number">1</span>)<br>&#123;<br>g[lst][j]=(g[lst][j]+f[i])%mod;<br>lst=j;<br>&#125;<br>g[lst][m<span class="hljs-number">+1</span>]=(g[lst][m<span class="hljs-number">+1</span>]+f[i])%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;=m<span class="hljs-number">+1</span>;j++) <br>c[i][j]=(c[i][j<span class="hljs-number">-1</span>]+g[i][j])%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++) <br>g[j][i]=(g[j<span class="hljs-number">-1</span>][i]+g[j][i])%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l=<span class="hljs-built_in">upper_bound</span>(p<span class="hljs-number">+1</span>,p<span class="hljs-number">+1</span>+m,k)-p<span class="hljs-number">-1</span>,r=l<span class="hljs-number">+1</span>;<br><span class="hljs-type">int</span> res=ans,tot=<span class="hljs-number">0</span>,j=r;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i;i--) <br>&#123;<br><span class="hljs-keyword">while</span>(j&lt;=m&amp;&amp;k-p[i]&gt;=p[j]-k) j++;<br>tot=(tot<span class="hljs-number">+1ll</span>*(k-p[i])*(c[i][m<span class="hljs-number">+1</span>]-c[i][j<span class="hljs-number">-1</span>])%mod)%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r;i&lt;=m;i++)<br>&#123;<br><span class="hljs-keyword">while</span>(l&amp;&amp;k-p[l]&lt;p[i]-k) l--;<br>tot=(tot<span class="hljs-number">+1ll</span>*(p[i]-k)*g[l][i]%mod)%mod;<br>&#125;<br>res=(res-tot)%mod;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(res+mod)%mod);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;d,&amp;n,&amp;m);<br>ans=d<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;L[i]),ans=<span class="hljs-number">1ll</span>*ans*(d<span class="hljs-number">+1</span>)%mod;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p[i]);<br><span class="hljs-built_in">sort</span>(L<span class="hljs-number">+1</span>,L<span class="hljs-number">+1</span>+n);<span class="hljs-built_in">sort</span>(p<span class="hljs-number">+1</span>,p<span class="hljs-number">+1</span>+m);<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br><span class="hljs-keyword">while</span>(q--)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x),<span class="hljs-built_in">solve</span>(x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="P4383-林克卡特树"><a href="#P4383-林克卡特树" class="headerlink" title="P4383 林克卡特树"></a>P4383 林克卡特树</h2><p>如果不考虑 $k$ ，任意选的话非常好求。设$dp_{u,0&#x2F;1&#x2F;2}$，其中 $dp_{u,0}$ 表示以 $u$ 为根的子树中的最长链，$dp_{u,1}$ 表示以 $u$ 为端点的最长连， $dp_{u,2}$ 经过 $u$ 的最长链。</p><p>$dp_{u,0}&#x3D;dp_{u,0}+dp_{v,0}$</p><p>$dp_{u,1}&#x3D;\max{dp_{u,0}+dp_{v,1}+w,dp_{u,1}+dp_{v,0}}$</p><p>$dp_{u,2}&#x3D;\max{dp_{u,1}+dp_{v,1}+w,dp_{u,2}+dp_{v,0}}$</p><p>$dp_{u,0}&#x3D;\max{dp_{u,0},dp_{u,1},dp_{u,2}}$</p><p>最后的答案就是$dp_{1,0}$ 。</p><p>这玩意看上去是上凸的 <del>(自己证一下，我不会)</del> ，那么就可以 $wqs$ 二分一下，找到选 $m$ 条边的答案。设当前的斜率为 $mid$ 。</p><p>初始 $dp_{u,0&#x2F;1}&#x3D;0 $ ， $dp_{u,2}&#x3D;-mid$</p><p>$dp_{u,0}&#x3D;dp_{u,0}+dp_{v,0}$</p><p>$dp_{u,1}&#x3D;\max{dp_{u,0}+dp_{v,1}+w,dp_{u,1}+dp_{v,0}}$</p><p>$dp_{u,2}&#x3D;\max{dp_{u,1}+dp_{v,1}+w-mid,dp_{u,2}+dp_{v,0}}$</p><p>$dp_{u,0}&#x3D;\max{dp_{u,0},dp_{u,1}-mid,dp_{u,2}}$</p><p>因为我们是钦定把 $u$ 这个子树分离出来的，所以初始 $m++$ 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,m,tot,head[N],nex[N&lt;&lt;<span class="hljs-number">1</span>],v[N&lt;&lt;<span class="hljs-number">1</span>],w[N&lt;&lt;<span class="hljs-number">1</span>];<br>ll l,r,mid,ans;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>ll x;<span class="hljs-type">int</span> y;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> node &amp;o)<span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> x==o.x? y&lt;o.y:x&lt;o.x;&#125;<br>node <span class="hljs-keyword">operator</span> +(<span class="hljs-type">const</span> node &amp;o)<span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> (node)&#123;x+o.x,y+o.y&#125;;&#125;<br>&#125;dp[N][<span class="hljs-number">3</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span></span><br><span class="hljs-function"></span>&#123;<br>nex[++tot]=head[x];head[x]=tot;v[tot]=y;w[tot]=z;<br>nex[++tot]=head[y];head[y]=tot;v[tot]=x;w[tot]=z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>dp[x][<span class="hljs-number">0</span>]=dp[x][<span class="hljs-number">1</span>]=(node)&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>dp[x][<span class="hljs-number">2</span>]=(node)&#123;-mid,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br>&#123;<br><span class="hljs-type">int</span> y=v[i];<br><span class="hljs-keyword">if</span>(y==fa) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs</span>(y,x);<br>dp[x][<span class="hljs-number">2</span>]=<span class="hljs-built_in">max</span>(dp[x][<span class="hljs-number">2</span>]+dp[y][<span class="hljs-number">0</span>],dp[x][<span class="hljs-number">1</span>]+dp[y][<span class="hljs-number">1</span>]+(node)&#123;w[i]-mid,<span class="hljs-number">1</span>&#125;);<br>dp[x][<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(dp[x][<span class="hljs-number">1</span>]+dp[y][<span class="hljs-number">0</span>],dp[x][<span class="hljs-number">0</span>]+dp[y][<span class="hljs-number">1</span>]+(node)&#123;w[i],<span class="hljs-number">0</span>&#125;);<br>dp[x][<span class="hljs-number">0</span>]=dp[x][<span class="hljs-number">0</span>]+dp[y][<span class="hljs-number">0</span>];<br>&#125;<br>dp[x][<span class="hljs-number">0</span>]=<span class="hljs-built_in">max</span>(dp[x][<span class="hljs-number">0</span>],<span class="hljs-built_in">max</span>(dp[x][<span class="hljs-number">1</span>]+(node)&#123;-mid,<span class="hljs-number">1</span>&#125;,dp[x][<span class="hljs-number">2</span>]));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x,y,z;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);m++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z),<span class="hljs-built_in">Add</span>(x,y,z);<br>r+= x&gt;<span class="hljs-number">0</span>? x:<span class="hljs-number">0</span>;<br>&#125;<br>l=-r;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">while</span>(l&lt;=r)<br>&#123;<br>mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].y&lt;m) r=mid<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> ans=mid,l=mid<span class="hljs-number">+1</span>;<br>&#125;<br>mid=ans;<span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].x+mid*m);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="P5308-Akvizna"><a href="#P5308-Akvizna" class="headerlink" title="P5308 Akvizna"></a>P5308 Akvizna</h2><p>感觉应该没有黑，最难的还是证明凹凸性 <del><strong>(我不会)</strong></del> 。</p><p>现在就当作他是上凸的吧，直接上 $wqs$ 二分。考虑无限制的 $DP$ ，倒序求会好搞一点。$dp_i&#x3D;dp_j+\frac{i-j}{i}$ ，这玩意很显然是可以用斜率优化或者二分队列的。这样就做完了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ld long double</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,m,cnt[N];<br><span class="hljs-type">int</span> q[N],h,t;<br>ld dp[N],res,eps=<span class="hljs-number">1e-14</span>;<br><span class="hljs-function">ld <span class="hljs-title">slope</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> (dp[y]-dp[x])/(y-x);&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ld x)</span></span><br><span class="hljs-function"></span>&#123;<br>h=t=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">while</span>(h&lt;t&amp;&amp;<span class="hljs-built_in">slope</span>(q[h],q[h<span class="hljs-number">+1</span>])<span class="hljs-number">-1.0</span>/i&gt;eps) h++;<br>cnt[i]=cnt[q[h]]<span class="hljs-number">+1</span>;<br>dp[i]=dp[q[h]]<span class="hljs-number">+1.0</span>*(i-q[h])/i-x;<br><span class="hljs-keyword">while</span>(h&lt;t&amp;&amp;<span class="hljs-built_in">slope</span>(q[t<span class="hljs-number">-1</span>],q[t])-<span class="hljs-built_in">slope</span>(q[t],i)&lt;-eps) t--;<br>q[++t]=i;<br>&#125;<br>res=dp[n]+m*x;<br><span class="hljs-keyword">return</span> cnt[n]&lt;m;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>ld l=<span class="hljs-number">0</span>,r=<span class="hljs-number">1e6</span>,mid,ans;<br><span class="hljs-keyword">while</span>(l&lt;=r-eps)<br>&#123;<br>mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid)) r=mid-eps;<br><span class="hljs-keyword">else</span> ans=mid,l=mid+eps;<br>&#125;<br><span class="hljs-built_in">check</span>(ans);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.9Lf&quot;</span>,res);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="P2056-捉迷藏"><a href="#P2056-捉迷藏" class="headerlink" title="P2056 捉迷藏"></a>P2056 捉迷藏</h2><p>一开始以为括号序列就只是括号序列，没想到居然还能求这玩意。</p><p>对于这棵树</p><p><img src="https://i.loli.net/2018/07/28/5b5c0a750c492.png"></p><p>括号序列是 $ [A[B[E][F[H][I]]][C][D[G]]]$</p><p>去掉字母就是 $[[[][[][]]][][[]]]$</p><p>对于 $F$ 和 $G$ 他们之间的括号序列就是 $[][]]][][[$ ，匹配之后就是 $]][[$ ，长度就是 $dis_{F\rightarrow G}$ ，其实也很好理解左括号就是向下走，右括号向上走。</p><p>我们把这个序列用线段树维护。设区间左，右括号个数为 $a$ 和 $b$ ，那么区间直径其实就是 $\max{b_1+a_2+|a_1-b_2|}&#x3D;\max{(a_1+b_1)+(a_2-b_2),(b_1-a_1)+(a_2+b_2)}$ 。直接分别求前缀的 $l_1&#x3D;a+b$ ， $l_2&#x3D;a-b$ ，后缀的 $r_1&#x3D;a+b$ ， $r_2&#x3D;b-a$ 的最大值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lc k&lt;&lt;1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rc k&lt;&lt;1|1</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3e6</span><span class="hljs-number">+5</span>,M=<span class="hljs-number">1e6</span><span class="hljs-number">+5</span>,inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n,m,tot,head[M],nex[M&lt;&lt;<span class="hljs-number">1</span>],v[M&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> cnt,sum,pos[M],s[N],op[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> a,b,dis;<br><span class="hljs-type">int</span> l1,l2,r1,r2;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>nex[++tot]=head[x];head[x]=tot;v[tot]=y;<br>nex[++tot]=head[y];head[y]=tot;v[tot]=x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>s[++cnt]=<span class="hljs-number">-1</span>;s[++cnt]=x;pos[x]=cnt;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br><span class="hljs-keyword">if</span>(v[i]^fa) <span class="hljs-built_in">dfs</span>(v[i],x);<br>s[++cnt]=<span class="hljs-number">-2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k]=(node)&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,-inf,-inf,-inf,-inf,-inf&#125;;<br><span class="hljs-keyword">if</span>(s[x]==<span class="hljs-number">-1</span>) t[k].a=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[x]==<span class="hljs-number">-2</span>) t[k].b=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!op[x]) t[k].l1=t[k].l2=t[k].r1=t[k].r2=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(t[lc].a&gt;t[rc].b)<br>t[k].a=t[lc].a+t[rc].a-t[rc].b,t[k].b=t[lc].b;<br><span class="hljs-keyword">else</span> t[k].a=t[rc].a,t[k].b=t[lc].b+t[rc].b-t[lc].a;<br>t[k].dis=<span class="hljs-built_in">max</span>(t[lc].dis,t[rc].dis);<br>t[k].dis=<span class="hljs-built_in">max</span>(t[k].dis,<span class="hljs-built_in">max</span>(t[lc].r1+t[rc].l2,t[lc].r2+t[rc].l1));<br>t[k].l1=<span class="hljs-built_in">max</span>(t[lc].l1,<span class="hljs-built_in">max</span>(t[lc].a+t[lc].b+t[rc].l2,-t[lc].a+t[lc].b+t[rc].l1));<br>t[k].l2=<span class="hljs-built_in">max</span>(t[lc].l2,t[lc].a-t[lc].b+t[rc].l2);<br>t[k].r1=<span class="hljs-built_in">max</span>(t[rc].r1,<span class="hljs-built_in">max</span>(t[lc].r1+t[rc].a-t[rc].b,t[lc].r2+t[rc].a+t[rc].b));<br>t[k].r2=<span class="hljs-built_in">max</span>(t[rc].r2,t[lc].r2-t[rc].a+t[rc].b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> <span class="hljs-built_in">update</span>(k,l),<span class="hljs-built_in">void</span>();<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid);<span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> <span class="hljs-built_in">update</span>(k,x),<span class="hljs-built_in">void</span>();<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-type">int</span> x,y;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>sum=n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y),<span class="hljs-built_in">Add</span>(x,y);<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,cnt);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(ch!=<span class="hljs-string">&#x27;G&#x27;</span>&amp;&amp;ch!=<span class="hljs-string">&#x27;C&#x27;</span>) ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;G&#x27;</span>) <br>&#123;<br><span class="hljs-keyword">if</span>(!sum) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum==<span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,t[<span class="hljs-number">1</span>].dis);<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>op[pos[x]]^=<span class="hljs-number">1</span>;<br>sum+= op[pos[x]] ?<span class="hljs-number">-1</span>:<span class="hljs-number">1</span>;<br><span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,cnt,pos[x]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="QTREE4-Query-on-a-tree-IV"><a href="#QTREE4-Query-on-a-tree-IV" class="headerlink" title="QTREE4 - Query on a tree IV"></a>QTREE4 - Query on a tree IV</h2><p>这题做法真多。。。</p><p>这题是<a href="https://www.luogu.com.cn/blog/229388/p2056-zhuo-mi-zang"><strong>捉迷藏</strong></a>的加强版，因为有负边权，所以括号序列会寄，被迫学了发树剖做法，感觉收获很多。</p><p>我们对每条重连建一棵线段树，为什么？<del>(因为我懒)</del> 。因为这样常数小，而且不用写询问的函数。</p><p>我们对每个区间 $[l,r]$ 维护他的最长链 $mx$ ，所有白点到达 $l$ 的最大距离 $lmax$ ，所有白点到达 $r$ 的最大距离 $rmax$ 。 </p><p>$pushup$ </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,lc=t[k].lc,rc=t[k].rc;<br>t[k].mx=<span class="hljs-built_in">max</span>(t[lc].mx,t[rc].mx);<br>t[k].mx=<span class="hljs-built_in">max</span>(t[k].mx,t[lc].rmx+t[rc].lmx+dep[dfn[mid<span class="hljs-number">+1</span>]]-dep[dfn[mid]]);<br>t[k].lmx=<span class="hljs-built_in">max</span>(t[lc].lmx,dep[dfn[mid<span class="hljs-number">+1</span>]]-dep[dfn[l]]+t[rc].lmx);<br>t[k].rmx=<span class="hljs-built_in">max</span>(t[rc].rmx,dep[dfn[r]]-dep[dfn[mid]]+t[lc].rmx);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在关键就在怎么求出叶子节点的初始值。其实我们只考虑链经过轻儿子的情况就好了，因为经过他的父亲和重儿子的情况都会在别的情况里面算到。所以我们可以拿个 $set$ 来存每个点轻儿子的值就行了。</p><p>对于修改影响的只有到根路径上的点，一条条重链调就好了。答案就再拿一个 $set$ 存就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span><span class="hljs-number">+5</span>,inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n,q,tot,cnt,sum,head[N],nex[N&lt;&lt;<span class="hljs-number">1</span>],v[N&lt;&lt;<span class="hljs-number">1</span>],w[N&lt;&lt;<span class="hljs-number">1</span>],op[N];<br><span class="hljs-type">int</span> rt[N],id[N],ed[N],dfn[N],son[N],siz[N],dep[N],f[N],top[N];<br>multiset&lt;<span class="hljs-type">int</span>&gt;s[N],all;<br>multiset&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> lc,rc,mx,lmx,rmx;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span></span><br><span class="hljs-function"></span>&#123;<br>nex[++tot]=head[x];head[x]=tot;v[tot]=y;w[tot]=z;<br>nex[++tot]=head[y];head[y]=tot;v[tot]=x;w[tot]=z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Top</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>it=s[x].<span class="hljs-built_in">end</span>();<br><span class="hljs-keyword">if</span>(it==s[x].<span class="hljs-built_in">begin</span>()) <span class="hljs-keyword">return</span> -inf;<br><span class="hljs-keyword">return</span> *(--it);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Del</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>it=s[x].<span class="hljs-built_in">find</span>(y);<br>s[x].<span class="hljs-built_in">erase</span>(it);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Calc</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>it=s[x].<span class="hljs-built_in">end</span>();<br><span class="hljs-keyword">if</span>(it!=s[x].<span class="hljs-built_in">begin</span>()) res+=*(--it);<br><span class="hljs-keyword">if</span>(it!=s[x].<span class="hljs-built_in">begin</span>()) res+=*(--it);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>,lc=t[k].lc,rc=t[k].rc;<br>t[k].mx=<span class="hljs-built_in">max</span>(t[lc].mx,t[rc].mx);<br>t[k].mx=<span class="hljs-built_in">max</span>(t[k].mx,t[lc].rmx+t[rc].lmx+dep[dfn[mid<span class="hljs-number">+1</span>]]-dep[dfn[mid]]);<br>t[k].lmx=<span class="hljs-built_in">max</span>(t[lc].lmx,dep[dfn[mid<span class="hljs-number">+1</span>]]-dep[dfn[l]]+t[rc].lmx);<br>t[k].rmx=<span class="hljs-built_in">max</span>(t[rc].rmx,dep[dfn[r]]-dep[dfn[mid]]+t[lc].rmx);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!k) k=++tot;<br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br><span class="hljs-type">int</span> x=dfn[l];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br><span class="hljs-keyword">if</span>(v[i]!=f[x]&amp;&amp;v[i]!=son[x]) s[x].<span class="hljs-built_in">insert</span>(t[rt[v[i]]].lmx+dep[v[i]]-dep[x]);<br>s[x].<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br>t[k].lmx=t[k].rmx=<span class="hljs-built_in">Top</span>(x);<br>t[k].mx=<span class="hljs-built_in">Calc</span>(x);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(t[k].lc,l,mid);<span class="hljs-built_in">build</span>(t[k].rc,mid<span class="hljs-number">+1</span>,r);<br><span class="hljs-built_in">pushup</span>(k,l,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br>t[k].lmx=t[k].rmx=<span class="hljs-built_in">Top</span>(dfn[l]);<br>t[k].mx=<span class="hljs-built_in">Calc</span>(dfn[l]);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">modify</span>(t[k].lc,l,mid,x);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(t[k].rc,mid<span class="hljs-number">+1</span>,r,x);<br><span class="hljs-built_in">pushup</span>(k,l,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>f[x]=fa;siz[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br><span class="hljs-keyword">if</span>(v[i]^fa) <br>&#123;<br>    dep[v[i]]=dep[x]+w[i];<br><span class="hljs-built_in">dfs1</span>(v[i],x);<br><span class="hljs-keyword">if</span>(siz[son[x]]&lt;siz[v[i]]) son[x]=v[i];<br>siz[x]+=siz[v[i]];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>id[x]=++cnt;dfn[cnt]=x;<br>ed[top[x]]=cnt;<br><span class="hljs-keyword">if</span>(son[x])<br>top[son[x]]=top[x],<span class="hljs-built_in">dfs2</span>(son[x]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br><span class="hljs-keyword">if</span>(!top[v[i]]) top[v[i]]=v[i],<span class="hljs-built_in">dfs2</span>(v[i]);<br><span class="hljs-keyword">if</span>(top[x]==x) <span class="hljs-built_in">build</span>(rt[x],id[x],ed[x]),all.<span class="hljs-built_in">insert</span>(t[rt[x]].mx);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>op[x]^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(op[x]) <span class="hljs-built_in">Del</span>(x,<span class="hljs-number">0</span>),sum--;<br><span class="hljs-keyword">else</span> s[x].<span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>),sum++;<br><span class="hljs-type">int</span> fx=top[x];<br><span class="hljs-keyword">while</span>(x)<br>&#123;<br><span class="hljs-keyword">if</span>(f[fx]) <span class="hljs-built_in">Del</span>(f[fx],t[rt[fx]].lmx+dep[fx]-dep[f[fx]]);<br>it=all.<span class="hljs-built_in">find</span>(t[rt[fx]].mx);<br>all.<span class="hljs-built_in">erase</span>(it);<br><span class="hljs-built_in">modify</span>(rt[fx],id[fx],ed[fx],id[x]);<br>all.<span class="hljs-built_in">insert</span>(t[rt[fx]].mx);<br><span class="hljs-keyword">if</span>(f[fx]) s[f[fx]].<span class="hljs-built_in">insert</span>(t[rt[fx]].lmx+dep[fx]-dep[f[fx]]);<br>x=f[fx];fx=top[x];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-type">int</span> x,y,z;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>sum=n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z),<span class="hljs-built_in">Add</span>(x,y,z);<br><span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>top[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;tot=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;q);<br><span class="hljs-keyword">while</span>(q--)<br>&#123;<br>ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(ch!=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;ch!=<span class="hljs-string">&#x27;C&#x27;</span>) ch=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;A&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(!sum) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;They have disappeared.&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum==<span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-keyword">else</span> it=all.<span class="hljs-built_in">end</span>(),<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*(--it));<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x),<span class="hljs-built_in">modify</span>(x);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="P3345-幻想乡战略游戏"><a href="#P3345-幻想乡战略游戏" class="headerlink" title="P3345  幻想乡战略游戏"></a>P3345  幻想乡战略游戏</h2><p>重心居然与边权大小无关。。。我是菜狗。</p><p>我们考虑先假设以 $1$ 为重心，重心 $x$ 转移到儿子 $y$ 产生的贡献就是 $(tot-2\times size_y)\times w_{x,y}$ ，即当 $2\times size_y \ge tot$ 时 $y$ 会比 $x$ 更优。因为满足条件的点肯定是在同一条重链上的，我们直接可以在线段树上二分找到重心。</p><p>确定重心以后就是很简单的查询一个点到所有点的距离了，这里就不讲了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,m,tot,head[N],nex[N&lt;&lt;<span class="hljs-number">1</span>],v[N&lt;&lt;<span class="hljs-number">1</span>],w[N&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> cnt,id[N],dfn[N],dep[N],val[N],top[N],f[N],son[N],siz[N];<br>ll sum,ans;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> mx,tag;<br>ll s,sum;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span></span><br><span class="hljs-function"></span>&#123;<br>nex[++tot]=head[x];head[x]=tot;v[tot]=y;w[tot]=z;<br>nex[++tot]=head[y];head[y]=tot;v[tot]=x;w[tot]=z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>f[x]=fa;siz[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br><span class="hljs-keyword">if</span>(v[i]^fa)<br>&#123;<br>val[v[i]]=w[i];<br>dep[v[i]]=dep[x]+w[i];<br><span class="hljs-built_in">dfs1</span>(v[i],x);<br><span class="hljs-keyword">if</span>(siz[v[i]]&gt;siz[son[x]]) son[x]=v[i];<br>siz[x]+=siz[v[i]];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>id[x]=++cnt;dfn[cnt]=x;<br><span class="hljs-keyword">if</span>(son[x])<br>top[son[x]]=top[x],<span class="hljs-built_in">dfs2</span>(son[x]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br><span class="hljs-keyword">if</span>(!top[v[i]]) top[v[i]]=v[i],<span class="hljs-built_in">dfs2</span>(v[i]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k].tag+=val;t[k].mx+=val;<br>t[k].s+=<span class="hljs-number">1ll</span>*val*t[k].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k].mx=<span class="hljs-built_in">max</span>(t[k&lt;&lt;<span class="hljs-number">1</span>].mx,t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].mx);<br>t[k].sum=t[k&lt;&lt;<span class="hljs-number">1</span>].sum+t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sum;<br>t[k].s=t[k&lt;&lt;<span class="hljs-number">1</span>].s+t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">Add</span>(k&lt;&lt;<span class="hljs-number">1</span>,t[k].tag);<span class="hljs-built_in">Add</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,t[k].tag);<br>t[k].tag=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)&#123;<span class="hljs-keyword">return</span> t[k].sum=val[dfn[l]],<span class="hljs-built_in">void</span>();&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid);<span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Add</span>(k,val),<span class="hljs-built_in">void</span>();<br><span class="hljs-keyword">if</span>(l&gt;y||r&lt;x) <span class="hljs-keyword">return</span> ;<br><span class="hljs-built_in">pushdown</span>(k);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y,val);<span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y,val);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*t[k].mx&lt;val) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> dfn[l];<br><span class="hljs-built_in">pushdown</span>(k);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> res=<span class="hljs-built_in">find</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,val);<br><span class="hljs-keyword">if</span>(!res) res=<span class="hljs-built_in">find</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,val);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="hljs-keyword">return</span> t[k].s;<br><span class="hljs-keyword">if</span>(l&gt;y||r&lt;x) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-built_in">pushdown</span>(k);<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y)+<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span>(x)<br><span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[top[x]],id[x],val),x=f[top[x]];<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>ll res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(x)<br>res+=<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[top[x]],id[x]),x=f[top[x]];<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x,y,z;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z),<span class="hljs-built_in">Add</span>(x,y,z);<br><span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>top[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>tot=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>tot+=y;sum+=<span class="hljs-number">1ll</span>*y*dep[x];<br><span class="hljs-built_in">modify</span>(x,y);<br><span class="hljs-keyword">if</span>(!tot) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br><span class="hljs-keyword">else</span><br>&#123;<br>z=<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,tot);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-number">1ll</span>*tot*dep[z]+sum<span class="hljs-number">-2</span>*<span class="hljs-built_in">query</span>(z));<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1634F-Fibonacci-Additions"><a href="#CF1634F-Fibonacci-Additions" class="headerlink" title="CF1634F Fibonacci Additions"></a>CF1634F Fibonacci Additions</h2><p>感觉很妙的一题,不看题解感觉自己根本想不到。。。</p><p>我们考虑把两个数组差分得到 $c$ 数组，每次判断 $c$ 数组是否全为零就好。但 $Fib$ 不好搞，所以我们可以再构造一个 $d$ 数组，使得 $d_i&#x3D;c_i-c_{i-1}-c_{i-2}$ ，这样的花每次操作就是在 $d_l$ 加上 $Fib_1$ ，在 $d_{r+1}$ 减去 $Fib_{r-l+2}$ ，在 $d_{r+2}$ 加上 $Fib_{r-l+1}$ 。维护 $d$ 中 $0$ 的个数就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,q,mod,f[N];<br><span class="hljs-type">int</span> a[N],b[N],cnt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&gt;n) <span class="hljs-keyword">return</span> ;<br>cnt-=(b[x]!=<span class="hljs-number">0</span>);<br>b[x]=((b[x]+val)%mod+mod)%mod;<br>cnt+=(b[x]!=<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> op;<br><span class="hljs-type">int</span> x,y;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;q,&amp;mod);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <br>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>a[i]=(a[i]-x+mod)%mod;<br>&#125;<br>f[<span class="hljs-number">1</span>]=f[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;i++) f[i]=(f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>])%mod;<br><span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>,a[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++) <br><span class="hljs-built_in">Add</span>(i,a[i]-a[i<span class="hljs-number">-1</span>]-a[i<span class="hljs-number">-2</span>]+mod);<br><span class="hljs-keyword">while</span>(q--)<br>&#123;<br>op=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(op!=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;op!=<span class="hljs-string">&#x27;B&#x27;</span>) op=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br><span class="hljs-keyword">if</span>(op==<span class="hljs-string">&#x27;A&#x27;</span>)  <span class="hljs-built_in">Add</span>(x,<span class="hljs-number">1</span>),<span class="hljs-built_in">Add</span>(y<span class="hljs-number">+1</span>,-f[y-x<span class="hljs-number">+2</span>]),<span class="hljs-built_in">Add</span>(y<span class="hljs-number">+2</span>,-f[y-x<span class="hljs-number">+1</span>]);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">Add</span>(x,<span class="hljs-number">-1</span>),<span class="hljs-built_in">Add</span>(y<span class="hljs-number">+1</span>,f[y-x<span class="hljs-number">+2</span>]),<span class="hljs-built_in">Add</span>(y<span class="hljs-number">+2</span>,f[y-x<span class="hljs-number">+1</span>]);<br><span class="hljs-keyword">if</span>(!cnt) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1117G-Recursive-Queries"><a href="#CF1117G-Recursive-Queries" class="headerlink" title="CF1117G Recursive Queries"></a>CF1117G Recursive Queries</h2><p> 我们发现对于每个 $i$ ，设左边第一个比他大的数在 $L_i$ ，右边第一个比他大的数在 $R_i$ ，那么他的贡献就是 $\min(R_i-1,r)-\max(L_i+1,l)+1$</p><p> 所以我们求的就是 $\sum\limits_{i&#x3D;l}\limits^{r} \min(R_i-1,r)-\max(L_i+1,l)+1$ ， 这个显然可以离线下来，用扫描线和树状数组来求解。</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fir first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sec second</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e6</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,m,q,top,p[N],a[N],b[N];<br><span class="hljs-type">int</span> st[N],L[N],R[N];<br>ll cntl[N],cntr[N],fl[N],fr[N],ans[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> x,l,r,id,op;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(node <span class="hljs-type">const</span> &amp;b)<span class="hljs-type">const</span>&#123;<span class="hljs-keyword">return</span> x&lt;b.x;&#125;<br>&#125;s[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x&amp;(-x);&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(ll f[],<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> val)</span> </span>&#123;<span class="hljs-keyword">for</span>(;x&lt;=n;x+=<span class="hljs-built_in">lowbit</span>(x)) f[x]+=val;&#125;<br><span class="hljs-function">ll <span class="hljs-title">query</span><span class="hljs-params">(ll f[],<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>ll res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(;x;x-=<span class="hljs-built_in">lowbit</span>(x)) res+=f[x];<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>ll res=<span class="hljs-built_in">query</span>(fr,r)+r*(<span class="hljs-built_in">query</span>(cntr,n)-<span class="hljs-built_in">query</span>(cntr,r));<br>res-=l*<span class="hljs-built_in">query</span>(cntl,l)+<span class="hljs-built_in">query</span>(fl,n)-<span class="hljs-built_in">query</span>(fl,l);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inisert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>L[x]++;R[x]--;<br><span class="hljs-built_in">update</span>(cntl,L[x],<span class="hljs-number">1</span>);<span class="hljs-built_in">update</span>(cntr,R[x],<span class="hljs-number">1</span>);<br><span class="hljs-built_in">update</span>(fl,L[x],L[x]);<span class="hljs-built_in">update</span>(fr,R[x],R[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p[i]);<br><span class="hljs-keyword">while</span>(top&amp;&amp;p[i]&gt;p[st[top]])<br>R[st[top--]]=i;<br>L[i]=st[top];st[++top]=i;<br>&#125;<br><span class="hljs-keyword">while</span>(top) R[st[top--]]=n<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;<span class="hljs-number">1</span>) s[++m]=(node)&#123;a[i]<span class="hljs-number">-1</span>,a[i],b[i],i,<span class="hljs-number">-1</span>&#125;;<br>s[++m]=(node)&#123;b[i],a[i],b[i],i,<span class="hljs-number">1</span>&#125;;<br>ans[i]=b[i]-a[i]<span class="hljs-number">+1</span>;<br>&#125;<br><span class="hljs-built_in">sort</span>(s<span class="hljs-number">+1</span>,s<span class="hljs-number">+1</span>+m);<br><span class="hljs-type">int</span> now=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">inisert</span>(i);<br><span class="hljs-keyword">while</span>(s[now].x==i)<br>&#123;<br>ans[s[now].id]+=<span class="hljs-built_in">calc</span>(s[now].l,s[now].r)*s[now].op;<br>now++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>,ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1004F-Sonya-and-Bitwise-OR"><a href="#CF1004F-Sonya-and-Bitwise-OR" class="headerlink" title="CF1004F Sonya and Bitwise OR"></a>CF1004F Sonya and Bitwise OR</h2><p><a href="https://www.luogu.com.cn/problem/P4435">双倍经验</a>。我是菜只因。</p><p>我们考虑分治。对于一个区间 $[l,r]$ ，我们先计算区间 $[l,mid]$ 和 $[mid+1,r]$ 的答案。接着只用求左右端点分别在两个区间中的答案了，用 $two-pointer$ 就好了。但这样是 $O(mn \log x)$ 的。</p><p>但我们发现对于一个区间，他的前缀或起来的值只有 $\log x$ 种，所以我们可以用 $vector$ 存一下前缀和后缀的分段情况。这些东西都是可以在线段树上处理的。复杂度就是 $O(n\log x+m\log n\log x)$ 。</p><p>以后看到区间或，区间与，区间 $\gcd$ 都可以往段数是 $\log$ 级别的方面想一想。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fir first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sec second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mkp make_pair</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int,int&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,m,lim,a[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> l,r;<br>ll ans;<br>vector&lt;pii&gt; pre,suf;<br><span class="hljs-built_in">node</span>()&#123;ans=<span class="hljs-number">0</span>;pre.<span class="hljs-built_in">clear</span>();suf.<span class="hljs-built_in">clear</span>();&#125;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><br><span class="hljs-function">node <span class="hljs-title">Merge</span><span class="hljs-params">(node lc,node rc)</span></span><br><span class="hljs-function"></span>&#123;<br>node c;<br>c.ans=lc.ans+rc.ans;<br>c.l=lc.l;c.r=rc.r;<br><span class="hljs-type">int</span> j=rc.pre.<span class="hljs-built_in">size</span>(),lst=lc.r<span class="hljs-number">+1</span>,ed;<br>j--;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lc.suf.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br><span class="hljs-keyword">while</span>(j<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;(lc.suf[i].sec|rc.pre[j<span class="hljs-number">-1</span>].sec)&gt;=lim) j--;<br><span class="hljs-keyword">if</span>((lc.suf[i].sec|rc.pre[j].sec)&lt;lim)<br>&#123;<br>lst=lc.suf[i].fir;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>c.ans+=<span class="hljs-number">1ll</span>*(lst-lc.suf[i].fir)*(rc.r-rc.pre[j].fir<span class="hljs-number">+1</span>);<br>lst=lc.suf[i].fir;<br>&#125;<br>c.pre=lc.pre;c.suf=rc.suf;<br>ed=lc.pre.<span class="hljs-built_in">size</span>();ed--;<br>j=lst=lc.pre[ed].sec;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;rc.pre.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br><span class="hljs-keyword">while</span>(i&lt;rc.pre.<span class="hljs-built_in">size</span>()&amp;&amp;lst==(rc.pre[i].sec|j)) i++;<br><span class="hljs-keyword">if</span>(i&lt;rc.pre.<span class="hljs-built_in">size</span>())<br>&#123;<br>lst=rc.pre[i].sec|j;<br>c.pre.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">mkp</span>(rc.pre[i].fir,lst));<br>&#125;<br>&#125;<br>ed=rc.suf.<span class="hljs-built_in">size</span>();ed--;<br>j=lst=rc.suf[ed].sec;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lc.suf.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br><span class="hljs-keyword">while</span>(i&lt;lc.suf.<span class="hljs-built_in">size</span>()&amp;&amp;lst==(lc.suf[i].sec|j)) <br>    c.suf[ed].fir=lc.suf[i].fir,i++;<br><span class="hljs-keyword">if</span>(i&lt;lc.suf.<span class="hljs-built_in">size</span>())<br>&#123;<br>lst=lc.suf[i].sec|j;<br>c.suf.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">mkp</span>(lc.suf[i].fir,lst));<br>ed++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[l]);<br>t[k].ans=(a[l]&gt;=lim);<br>t[k].l=t[k].r=l;<br>t[k].pre.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">mkp</span>(l,a[l]));<br>t[k].suf.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">mkp</span>(l,a[l]));<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid);<span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r);<br>t[k]=<span class="hljs-built_in">Merge</span>(t[k&lt;&lt;<span class="hljs-number">1</span>],t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br>t[k].ans=(val&gt;=lim);<br>t[k].pre[<span class="hljs-number">0</span>]=<span class="hljs-built_in">mkp</span>(l,val);t[k].suf[<span class="hljs-number">0</span>]=<span class="hljs-built_in">mkp</span>(l,val);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,val);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,val);<br>t[k]=<span class="hljs-built_in">Merge</span>(t[k&lt;&lt;<span class="hljs-number">1</span>],t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function">node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="hljs-keyword">return</span> t[k];<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(R&lt;=mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,L,R);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L&gt;mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,L,R);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Merge</span>(<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,L,R),<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,L,R));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> op,x,y;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;lim);<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;op,&amp;x,&amp;y);<br><span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>) <span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,x,y);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,x,y).ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF765F-Souvenirs"><a href="#CF765F-Souvenirs" class="headerlink" title="CF765F  Souvenirs"></a>CF765F  Souvenirs</h2><p>绝对值很好处理，我们只考虑 $j&lt;i$ 且 $a_j&lt;&#x3D;a_i$ 的数对，翻转完后再做以便就好。</p><p>我们考虑离线下来，从左往右扫的时候维护每个后缀的答案。最暴力的做法就是 $O(n^2)$ 。</p><p>我们考虑减少一下决策情况，对于 $k&lt;j&lt;i$ ，只有在 $a_i-a_k&lt;a_k-a_j$ 的时候 $[k,i]$ 这段后缀的最小值才会发生改变。</p><p>这样的情况数就降低到了 $\log V$ 级别的，每次找 $k$ 直接开一颗权值线段树就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">3e5</span><span class="hljs-number">+5</span>,inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n,m,a[N],ans[N];<br><span class="hljs-type">int</span> rt,cnt,ls[N*<span class="hljs-number">20</span>],rs[N*<span class="hljs-number">20</span>],mx[N*<span class="hljs-number">20</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> l,r,id;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-type">const</span> node &amp;b)&#123;<span class="hljs-keyword">return</span> r&lt;b.r;&#125;<br>&#125;s[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Seg</span><br>&#123;<br><span class="hljs-type">int</span> tag,s;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k].s=<span class="hljs-built_in">min</span>(t[k&lt;&lt;<span class="hljs-number">1</span>].s,t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].s);<br>t[k].s=<span class="hljs-built_in">min</span>(t[k].s,t[k].tag);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k]=(Seg)&#123;inf,inf&#125;;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> ;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid);<span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <br>&#123;<br>    t[k].tag=<span class="hljs-built_in">min</span>(t[k].tag,val);<br>t[k].s=<span class="hljs-built_in">min</span>(t[k].s,val);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-keyword">if</span>(l&gt;y||r&lt;x) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y,val);<span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y,val);<br><span class="hljs-built_in">pushup</span>(k);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> t[k].s;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> res;<br><span class="hljs-keyword">if</span>(x&lt;=mid) res=<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x);<br><span class="hljs-keyword">else</span> res=<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(res,t[k].tag);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!k) k=++cnt;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span> mx[k]=v,<span class="hljs-built_in">void</span>();<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">insert</span>(ls[k],l,mid,x,v);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">insert</span>(rs[k],mid<span class="hljs-number">+1</span>,r,x,v);<br>mx[k]=<span class="hljs-built_in">max</span>(mx[ls[k]],mx[rs[k]]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!k||l&gt;R||r&lt;L) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R) <span class="hljs-keyword">return</span> mx[k];<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">find</span>(ls[k],l,mid,L,R),<span class="hljs-built_in">find</span>(rs[k],mid<span class="hljs-number">+1</span>,r,L,R));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>rt=cnt=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">memset</span>(ls,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(ls));<br><span class="hljs-built_in">memset</span>(rs,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(rs));<br><span class="hljs-built_in">memset</span>(mx,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(mx));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-type">int</span> now=<span class="hljs-number">1</span>,x,lst;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>x=<span class="hljs-built_in">find</span>(rt,<span class="hljs-number">0</span>,inf,<span class="hljs-number">0</span>,a[i]);<br><span class="hljs-keyword">while</span>(x)<br>&#123;<br>lst=x;<br>x=<span class="hljs-built_in">find</span>(rt,<span class="hljs-number">0</span>,inf,(a[x]+a[i])/<span class="hljs-number">2</span><span class="hljs-number">+1</span>,a[i]);<br><span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,x<span class="hljs-number">+1</span>,lst,a[i]-a[lst]);<br>&#125;<br><span class="hljs-built_in">insert</span>(rt,<span class="hljs-number">0</span>,inf,a[i],i);<br><span class="hljs-keyword">while</span>(s[now].r==i)<br>ans[s[now].id]=<span class="hljs-built_in">min</span>(ans[s[now].id],<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,s[now].l)),now++;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) <br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;s[i].l,&amp;s[i].r);<br>s[i].id=i;ans[i]=inf;<br>&#125;<br><span class="hljs-built_in">sort</span>(s<span class="hljs-number">+1</span>,s<span class="hljs-number">+1</span>+m);<br><span class="hljs-built_in">solve</span>();<br><span class="hljs-built_in">reverse</span>(a<span class="hljs-number">+1</span>,a<span class="hljs-number">+1</span>+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br>s[i].l=n-s[i].l<span class="hljs-number">+1</span>;<br>s[i].r=n-s[i].r<span class="hljs-number">+1</span>;<br><span class="hljs-built_in">swap</span>(s[i].l,s[i].r);<br>&#125;<br><span class="hljs-built_in">sort</span>(s<span class="hljs-number">+1</span>,s<span class="hljs-number">+1</span>+m);<br><span class="hljs-built_in">solve</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans[i]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="P8367-LNOI2022-盒"><a href="#P8367-LNOI2022-盒" class="headerlink" title="P8367 [LNOI2022] 盒"></a>P8367 [LNOI2022] 盒</h2><p>考虑给了 $b$ 怎么搞。设 $c_i$ 和 $d_i$ 分别是 $a$ 和 $b$ 的前缀和。</p><p>很明显答案就是 $\sum\limits_{i&#x3D;1}^{n-1}w_i|c_i-d_i|$</p><p>那么 $40pts$ 是很好拿得 $ans&#x3D;\sum\limits_{i&#x3D;1}^{n-1}w_i\sum\limits_{j&#x3D;0}^{S}|j-c_i|{j+i-1\choose i-1}{n-i+S-j-1\choose n-i-1}$ </p><p>本质就是要算 $res_i&#x3D;\sum\limits_{j&#x3D;0}^{S}|j-c_i|{j+i-1\choose i-1}{n-i+S-j-1\choose n-i-1}$ 。</p><p>先把绝对值去掉 $res_i&#x3D;2\sum\limits_{j&#x3D;0}^{c_i}(c_i-j){j+i-1\choose i-1}{n-i+S-j-1\choose n-i-1}+\sum\limits_{j&#x3D;0}^{S}(j-c_i){j+i-1\choose i-1}{n-i+S-j-1\choose n-i-1}$</p><p>然后我们发现他其实就是要求 $f(n,S,i,k)&#x3D;\sum\limits_{j&#x3D;0}^{k}{j+i-1\choose i-1}{n-i+S-j-1\choose n-i-1}$ 和 $g(n,S,i,k)&#x3D;\sum\limits_{j&#x3D;0}^k j{j+i-1\choose i-1}{n-i+S-j-1\choose n-i-1}$</p><p><del>然后我就不会了。</del></p><p>我们发现 $j{j+i-1\choose i-1}&#x3D;\frac{(j+i-1)!}{(i-1)!(j-1)!}&#x3D;i{j+i-1\choose i}$</p><p>所以 $g(n,S,i,k)&#x3D;i\sum\limits_{j&#x3D;0}^k{j+i-1\choose i}{n-i+S-j-1\choose n-i-1}&#x3D;i\times f(n+1,S-1,i+1,k-1)$</p><p>所以我们求 $f(n,S,i,k)$ 就好了。</p><p>我们发现 $i,k$ 每次都是单调递增的，所以每次暴力把 $i,k$ 加一，复杂度是 $O(n+S)$ 的。</p><p>$k$ 加一很好搞，主要是 $i$ 加一不好搞。</p><p>我们考虑一下 $f(n,m,i,k)$ 的组合意义是让前 $i$ 个盒子的小球总和 $\le k$ 那，等价于第 $k+1$ 个小球不再前 $i$ 个盒子中，所以 $f(n,m,i,k)&#x3D;\sum\limits_{j&#x3D;i+1}^n{j+k-1\choose j-1}{n-j+m-k-1\choose n-j}$，这样移动 $i$ 就很好处理了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e6</span><span class="hljs-number">+5</span>,mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> n,m,a[N],w[N],ans,res;<br><span class="hljs-type">int</span> fac[N&lt;&lt;<span class="hljs-number">1</span>],invf[N&lt;&lt;<span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;y||x&lt;<span class="hljs-number">0</span>||y&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span>*fac[x]*invf[y]%mod*invf[x-y]%mod;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> n,m,i,k,sum;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> _n,<span class="hljs-type">int</span> _m,<span class="hljs-type">int</span> _i,<span class="hljs-type">int</span> _k)</span></span><br><span class="hljs-function"></span>&#123;<br>n=_n;m=_m;i=_i;k=_k;<br>sum=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=k;j++)<br>sum=(sum<span class="hljs-number">+1ll</span>*<span class="hljs-built_in">C</span>(i+j<span class="hljs-number">-1</span>,i<span class="hljs-number">-1</span>)*<span class="hljs-built_in">C</span>(n-i+m-j<span class="hljs-number">-1</span>,n-i<span class="hljs-number">-1</span>)%mod)%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> _i,<span class="hljs-type">int</span> _k)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span>(k&lt;_k)<br>k++,sum=(sum<span class="hljs-number">+1ll</span>*<span class="hljs-built_in">C</span>(i+k<span class="hljs-number">-1</span>,i<span class="hljs-number">-1</span>)*<span class="hljs-built_in">C</span>(n-i+m-k<span class="hljs-number">-1</span>,n-i<span class="hljs-number">-1</span>)%mod)%mod;<br><span class="hljs-keyword">while</span>(i&lt;_i)<br>i++,sum=(sum<span class="hljs-number">-1ll</span>*<span class="hljs-built_in">C</span>(i+k<span class="hljs-number">-1</span>,i<span class="hljs-number">-1</span>)*<span class="hljs-built_in">C</span>(m-k<span class="hljs-number">-1</span>+n-i,n-i)%mod)%mod;<br>&#125;<br><br>&#125;s1,s2,s3,s4;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>fac[<span class="hljs-number">0</span>]=fac[<span class="hljs-number">1</span>]=invf[<span class="hljs-number">0</span>]=invf[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">4e6</span>;i++)<br>&#123;<br>fac[i]=<span class="hljs-number">1ll</span>*fac[i<span class="hljs-number">-1</span>]*i%mod;<br>invf[i]=<span class="hljs-number">1ll</span>*(mod-mod/i)*invf[mod%i]%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">4e6</span>;i++)<br>invf[i]=<span class="hljs-number">1ll</span>*invf[i]*invf[i<span class="hljs-number">-1</span>]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> T;<br><span class="hljs-built_in">init</span>();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]),a[i]+=a[i<span class="hljs-number">-1</span>];<br>m=a[n];ans=<span class="hljs-number">0</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">init</span>(n,m,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);s<span class="hljs-number">2.</span><span class="hljs-built_in">init</span>(n<span class="hljs-number">+1</span>,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>);<br>s<span class="hljs-number">3.</span><span class="hljs-built_in">init</span>(n,m,<span class="hljs-number">1</span>,m);s<span class="hljs-number">4.</span><span class="hljs-built_in">init</span>(n<span class="hljs-number">+1</span>,m<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,m<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) <br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;w[i]);<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">move</span>(i,a[i]);s<span class="hljs-number">2.</span><span class="hljs-built_in">move</span>(i<span class="hljs-number">+1</span>,a[i]<span class="hljs-number">-1</span>);<br>s<span class="hljs-number">3.</span><span class="hljs-built_in">move</span>(i,m);s<span class="hljs-number">4.</span><span class="hljs-built_in">move</span>(i<span class="hljs-number">+1</span>,m<span class="hljs-number">-1</span>);<br>     res=<span class="hljs-number">2ll</span>*a[i]*s<span class="hljs-number">1.</span>sum%mod;<br>res=(res<span class="hljs-number">-2ll</span>*i*s<span class="hljs-number">2.</span>sum%mod)%mod;<br>res=(res<span class="hljs-number">-1ll</span>*a[i]*s<span class="hljs-number">3.</span>sum%mod)%mod;<br>res=(res<span class="hljs-number">+1ll</span>*i*s<span class="hljs-number">4.</span>sum%mod)%mod;<br>ans=(ans<span class="hljs-number">+1ll</span>*w[i]*res%mod)%mod;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(ans+mod)%mod);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1129D-Isolation"><a href="#CF1129D-Isolation" class="headerlink" title="CF1129D Isolation"></a>CF1129D Isolation</h2><p>居然有这么简单的黑。</p><p>如何判断后缀中有多少个只出现过一次非常的典，维护一下后缀和 $suf$ 就好。这样就可以有一个 $O(n^2)$ 的朴素 $dp$ 了。</p><p>考虑用 $DS$ 维护一下 $suf$ 和 $suf\le k$ 的 $dp$ 值的和，感觉没有什么 $log$ 的玩意可以维护这个，那就大胆尝试分块，给每个块维护一个桶 $suf$ 为 $i$ 存 $dp$ 值 。每次加减都等于桶整体左移右移，那个一个指针维护一下当前<br>$suf&#x3D;k$ 的值原来对应的位置。因为加减的次数是 $O(n)$ 级别的，所以指针暴力移动就好了。每次要便历一个块时下传一下 $tag$ 就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span><span class="hljs-number">+6</span>,M=<span class="hljs-number">405</span>,mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> n,m,len=<span class="hljs-number">320</span>,lst[N],vis[N],L[M],R[M];<br><span class="hljs-type">int</span> f[N],suf[N],p[M],tag[M],ton[M][N],sum[M];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>x+=y;<br><span class="hljs-keyword">if</span>(x&gt;=mod) x-=mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Sub</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>x-=y;<br><span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>) x+=mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=len<span class="hljs-number">-1</span>,cnt;<br><span class="hljs-keyword">while</span>(r&lt;n)<br>&#123;<br>L[++cnt]=l;R[cnt]=r;<br>l=r<span class="hljs-number">+1</span>;r+=len;<br>&#125;<br>L[++cnt]=l;R[cnt]=n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>sum[k]=<span class="hljs-number">0</span>;p[k]=m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L[k];i&lt;=R[k];i++)<br>&#123;<br><span class="hljs-built_in">Sub</span>(ton[k][suf[i]],f[i]);<br>suf[i]+=tag[k];<br><span class="hljs-built_in">Add</span>(ton[k][suf[i]],f[i]);<br><span class="hljs-keyword">if</span>(suf[i]&lt;=m) <span class="hljs-built_in">Add</span>(sum[k],f[i]);<br>&#125;<br>tag[k]=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add_tag</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>tag[k]+=val;<br><span class="hljs-keyword">if</span>(val&gt;<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=val;i++)<br><span class="hljs-built_in">Sub</span>(sum[k],ton[k][p[k]]),p[k]--;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">-1</span>;i&gt;=val;i--)<br>p[k]++,<span class="hljs-built_in">Add</span>(sum[k],ton[k][p[k]]);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> k=x/len<span class="hljs-number">+1</span>;<br><span class="hljs-built_in">Add</span>(ton[k][suf[x]],f[x]);<br><span class="hljs-keyword">if</span>(suf[x]&lt;=m) <span class="hljs-built_in">Add</span>(sum[k],f[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> ;<br><span class="hljs-type">int</span> k=x/len<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;k;i++) <span class="hljs-built_in">Add_tag</span>(i,val);<br><span class="hljs-built_in">pushdown</span>(k);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L[k];i&lt;=x;i++)<br>&#123;<br><span class="hljs-built_in">Sub</span>(ton[k][suf[i]],f[i]);<br><span class="hljs-keyword">if</span>(suf[i]&lt;=m) <span class="hljs-built_in">Sub</span>(sum[k],f[i]);<br>suf[i]+=val;<br><span class="hljs-built_in">Add</span>(ton[k][suf[i]],f[i]);<br><span class="hljs-keyword">if</span>(suf[i]&lt;=m) <span class="hljs-built_in">Add</span>(sum[k],f[i]);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> k=x/len<span class="hljs-number">+1</span>,res=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;k;i++) <span class="hljs-built_in">Add</span>(res,sum[i]);<br><span class="hljs-built_in">pushdown</span>(k);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=L[k];i&lt;x;i++)<br><span class="hljs-keyword">if</span>(suf[i]&lt;=m) <span class="hljs-built_in">Add</span>(res,f[i]);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-built_in">init</span>();<br>f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;suf[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">insert</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br><span class="hljs-built_in">modify</span>(i<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>);<span class="hljs-built_in">modify</span>(lst[vis[x]]<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>);<span class="hljs-built_in">modify</span>(vis[x]<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>);<br>lst[i]=vis[x];vis[x]=i;<br>f[i]=<span class="hljs-built_in">query</span>(i);<br><span class="hljs-built_in">insert</span>(i);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,f[n]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1167F-Scalar-Queries"><a href="#CF1167F-Scalar-Queries" class="headerlink" title="CF1167F Scalar Queries"></a>CF1167F Scalar Queries</h2><p>感觉难度适中</p><p>直接求很难，我们考虑算每个点的贡献。答案就是 $\sum\limits_{i&#x3D;1}^n a_i\times\sum\limits_{k&#x3D;1}^nk\times f(i,k)$ 。 $f(i,k)$ 是第 $i$个数 作为区间第 $k$ 小的区间个数。想一下我们就会发现 $\sum\limits_{k&#x3D;1}^n k\times f(a_i,k)$ ，其实等价于所有包含第 $i$ 个数的区间中小于等于 $a_i$ 的数的个数之和。我们设这个值是 $g(i)$ 。</p><p>我们现在考虑把数从小到大考虑，那其实就等价于每次把一个位置的 $0$ 变成 $1$ ,把一个区间的 $val$ 定义为他所包含的 $1$ 的个数。那么 $g(i)$ 就是所有包含第 $i$ 个数的区间权值之和。包含第 $i$ 个数的条件通过容斥变成：所有区间的权值和 $-$ 不包含第 $i$ 个数的区间的权值和。</p><p>所以我们现在要算的就是 $[l,r]$ 之内所有区间的权值和。我们考虑分治，先算<br>$[l,mid]$ 和 $[mid+1,r]$ 的权值和，在算经过 $mid$ 的区间的权值和。</p><p>我们设 $pre$ 是前缀区间的权值和， $suf$ 是后缀区间的权值和。 那么这一部分权值和 $suf_{[l,mid]}\times (r-mid)+pre_{[mid+1,r]}\times(mid-l+1)$ 。</p><p>把这玩意放在线段树上面，每次单点修改，区间查询就好了。</p><p>最后想一下 $pre$  和 $suf$ 的 $pushup$ ，其实也不难。我们设 $s$ 是区间中 $1$ 的个数。</p><p>$pre_{[l,r]}&#x3D;pre_{[l,mid]}+s_{[l,mid]}\times(r-mid)+pre_{[mid+1,r]}$</p><p>$suf_{[l,r]}&#x3D;suf_{[mid+1,r]}+s_{[mid+1,r]}\times(mid-l+1)+suf_{[l,mid]}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5e5</span><span class="hljs-number">+5</span>,mod=<span class="hljs-number">1e9</span><span class="hljs-number">+7</span>;<br><span class="hljs-type">int</span> n,a[N],id[N],ans;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br><span class="hljs-type">int</span> l,r;<br><span class="hljs-type">int</span> pre,suf,s,sum;<br>&#125;t[N&lt;&lt;<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> a[x]&lt;a[y];&#125;<br><br><span class="hljs-function">node <span class="hljs-title">pushup</span><span class="hljs-params">(node lc,node rc)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> l=lc.l,r=rc.r;<br><span class="hljs-type">int</span> mid=lc.r;<br>node c;<br>c.l=l;c.r=r;<br>c.s=lc.s+rc.s;<br>c.sum=(lc.sum+rc.sum)%mod;<br>c.sum=(c.sum<span class="hljs-number">+1ll</span>*lc.suf*(r-mid)%mod)%mod;<br>c.sum=(c.sum<span class="hljs-number">+1ll</span>*rc.pre*(mid-l<span class="hljs-number">+1</span>)%mod)%mod;<br>c.pre=(lc.pre<span class="hljs-number">+1ll</span>*lc.s*(r-mid)%mod+rc.pre)%mod;<br>c.suf=(rc.suf<span class="hljs-number">+1ll</span>*rc.s*(mid-l<span class="hljs-number">+1</span>)%mod+lc.suf)%mod;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>t[k].l=l;t[k].r=r;<br><span class="hljs-keyword">if</span>(l==r) <span class="hljs-keyword">return</span>;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid);<span class="hljs-built_in">build</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(l==r)<br>&#123;<br>t[k].sum=t[k].s=t[k].pre=t[k].suf=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(x&lt;=mid) <span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">modify</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x);<br>t[k]=<span class="hljs-built_in">pushup</span>(t[k&lt;&lt;<span class="hljs-number">1</span>],t[k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function">node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="hljs-keyword">return</span> t[k];<br><span class="hljs-type">int</span> mid=(l+r)&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(y&lt;=mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(x&gt;mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">pushup</span>(<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>,l,mid,x,y),<span class="hljs-built_in">query</span>(k&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>,mid<span class="hljs-number">+1</span>,r,x,y));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]),id[i]=i;<br><span class="hljs-built_in">sort</span>(id<span class="hljs-number">+1</span>,id<span class="hljs-number">+1</span>+n,cmp);<br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">modify</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[i]);<br><span class="hljs-type">int</span> res=t[<span class="hljs-number">1</span>].sum;<br><span class="hljs-keyword">if</span>(id[i]&gt;<span class="hljs-number">1</span>) res=(res+mod-<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>,id[i]<span class="hljs-number">-1</span>).sum)%mod;<br><span class="hljs-keyword">if</span>(id[i]&lt;n) res=(res+mod-<span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n,id[i]<span class="hljs-number">+1</span>,n).sum)%mod;<br>ans=(ans<span class="hljs-number">+1ll</span>*a[id[i]]*res%mod)%mod;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="CF1748D-ConstructOR"><a href="#CF1748D-ConstructOR" class="headerlink" title="CF1748D ConstructOR"></a>CF1748D ConstructOR</h2><p>真的不会数论构造题。。。</p><p>我们考虑特殊的一个 $x$ ，满足 $x|a&#x3D;x|b&#x3D;x$ ，且  $d$ 整除 $x$ 。所以现在我们直接把 $a&#x3D;a|b$ 。</p><p>首先无解的情况肯定是 $lowbit(a)&lt;lowbit(d)$ 。我们设 $lowbit(d)&#x3D;2^k$ ， $d&#x3D;2^k\cdot d’$ , $x_{(2)}&#x3D;p\ 1 \dots 1 0\dots 0$。那么。 $x&#x3D;2^k\cdot(p \cdot 2^{30-k}+(2^{30-k}-1))$ 。</p><p>$\ \ \ \ \  2^k\cdot(p\cdot2^{30-k}+2^{30-k}-1)\equiv 0 \pmod{ 2^k \cdot d’} $</p><p>$\leftrightarrow p\cdot2^{30-k}+2^{30-k}+1\equiv 0\pmod{d’}$</p><p>$\leftrightarrow p\equiv (\frac{1}{2})^{30-k} -1\pmod{d’}$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> T,k;<br>ll a,b,c,d;<br><br><span class="hljs-function">ll <span class="hljs-title">lowbit</span><span class="hljs-params">(ll x)</span></span>&#123;<span class="hljs-keyword">return</span> x&amp;(-x);&#125;<br><span class="hljs-function">ll <span class="hljs-title">qsm</span><span class="hljs-params">(ll A,ll B,ll mod)</span></span><br><span class="hljs-function"></span>&#123;<br>ll res=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;B;B&gt;&gt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(B&amp;<span class="hljs-number">1</span>) res=A*res%mod;<br>A=A*A%mod;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br><span class="hljs-keyword">while</span>(T--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;c);<br>a|=b;<br><span class="hljs-keyword">if</span>(a%<span class="hljs-built_in">lowbit</span>(c)) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><span class="hljs-keyword">else</span><br>&#123;<br>ll x=(<span class="hljs-number">1ll</span>&lt;&lt;<span class="hljs-number">30</span>)-<span class="hljs-built_in">lowbit</span>(c),p;<br>d=<span class="hljs-built_in">lowbit</span>(c);<br>c/=d;<br>k=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(d%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) d&gt;&gt;=<span class="hljs-number">1</span>,k++;<br>p=(<span class="hljs-built_in">qsm</span>((c<span class="hljs-number">+1</span>)/<span class="hljs-number">2</span>,<span class="hljs-number">30</span>-k,c)+c<span class="hljs-number">-1</span>)%c;<br>x+=p&lt;&lt;<span class="hljs-number">30</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,x);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1163F-Indecisive-Taxi-Fee"><a href="#CF1163F-Indecisive-Taxi-Fee" class="headerlink" title="CF1163F Indecisive Taxi Fee"></a>CF1163F Indecisive Taxi Fee</h2><p>删边最短路 <del>（别人说很典，反正我是不会）</del> 。</p><p>考虑原本图上的最短路路径是 $path$ ，那么修改一条边 $t$ 就有两种情况。<br>设 $del_t$ 是不经过 $t$ 的最短路。</p><ul><li>$t\in path$ ， $ans&#x3D;min(del_t,dis_{1\rightarrow n}+x-w_t)$</li><li>$t\notin path$ ，$ans&#x3D;min(dis_{1\rightarrow n},dis_{1\rightarrow a_t}+dis_{b_i\rightarrow n}+x-w_t)$</li></ul><p>唯一难搞的就只有 $del_t$ 了。但我太菜了，所以就挂 <a href="https://www.luogu.com.cn/blog/Chenxiao-Yan/solution-cf1163f">别人的</a> 吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fir first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> sec second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mkp make_pair</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+5</span>;<br><span class="hljs-type">int</span> n,m,q,tot,vis[N],fr[N];<br><span class="hljs-type">int</span> head[N],nex[N&lt;&lt;<span class="hljs-number">1</span>],v[N&lt;&lt;<span class="hljs-number">1</span>],w[N&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> a[N],b[N],c[N],ord[N],id[N];<br><span class="hljs-type">int</span> pre[N],suf[N];<br>ll inf=<span class="hljs-number">1e18</span>,d1[N],dn[N],Del[N];<br>vector&lt;<span class="hljs-type">int</span>&gt;son[N],path;<br>vector&lt;ll&gt;add[N],del[N];<br>multiset&lt;ll&gt;st;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> d1[x]&lt;d1[y];&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmpn</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<span class="hljs-keyword">return</span> dn[x]&lt;dn[y];&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span></span><br><span class="hljs-function"></span>&#123;<br>nex[++tot]=head[x];<br>head[x]=tot;<br>v[tot]=y;w[tot]=z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Dij</span><span class="hljs-params">(<span class="hljs-type">int</span> s,ll d[])</span></span><br><span class="hljs-function"></span>&#123;<br>priority_queue&lt;pair&lt;ll,<span class="hljs-type">int</span>&gt; &gt;qu;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) d[i]=inf,vis[i]=<span class="hljs-number">0</span>;<br>d[s]=<span class="hljs-number">0</span>;<br>qu.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">mkp</span>(<span class="hljs-number">0</span>,s));<br><span class="hljs-keyword">while</span>(!qu.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> x=qu.<span class="hljs-built_in">top</span>().sec;qu.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(vis[x]) <span class="hljs-keyword">continue</span>;<br>vis[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br>&#123;<br><span class="hljs-type">int</span> y=v[i];<br><span class="hljs-keyword">if</span>(d[y]&gt;d[x]+w[i])<br>&#123;<br>d[y]=d[x]+w[i];<br>qu.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">mkp</span>(-d[y],y));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> lst,<span class="hljs-type">int</span> p[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(~id[x]) lst=id[x];<br>p[x]=lst;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;son[x].<span class="hljs-built_in">size</span>();i++) <span class="hljs-built_in">dfs</span>(son[x][i],lst,p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x,t;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;a[i],&amp;b[i],&amp;c[i]);<br><span class="hljs-built_in">Add</span>(a[i],b[i],c[i]);<span class="hljs-built_in">Add</span>(b[i],a[i],c[i]);<br>&#125;<br><span class="hljs-built_in">Dij</span>(<span class="hljs-number">1</span>,d1);<span class="hljs-built_in">Dij</span>(n,dn);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) ord[i]=i;<br><span class="hljs-built_in">sort</span>(ord<span class="hljs-number">+1</span>,ord<span class="hljs-number">+1</span>+n,cmp1);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> _i=<span class="hljs-number">2</span>;_i&lt;=n;_i++)<br>&#123;<br>x=ord[_i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br><span class="hljs-keyword">if</span>(d1[v[i]]+w[i]==d1[x]) <br>&#123;<br>fr[x]=v[i];<br>son[v[i]].<span class="hljs-built_in">pb</span>(x);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>x=n;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) <br>&#123;<br>    path.<span class="hljs-built_in">pb</span>(x);<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>x=fr[x];<br>&#125;<br><span class="hljs-built_in">reverse</span>(path.<span class="hljs-built_in">begin</span>(),path.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">memset</span>(id,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(id));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;path.<span class="hljs-built_in">size</span>();i++) id[path[i]]=i;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,pre);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) son[i].<span class="hljs-built_in">clear</span>();<br><span class="hljs-built_in">sort</span>(ord<span class="hljs-number">+1</span>,ord<span class="hljs-number">+1</span>+n,cmpn);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> _i=<span class="hljs-number">2</span>;_i&lt;=n;_i++)<br>&#123;<br>x=ord[_i];<br><span class="hljs-keyword">if</span>(~id[x])<br>&#123;<br>son[path[id[x]<span class="hljs-number">+1</span>]].<span class="hljs-built_in">pb</span>(x);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[x];i;i=nex[i])<br><span class="hljs-keyword">if</span>(dn[v[i]]+w[i]==dn[x])<br>&#123;<br>son[v[i]].<span class="hljs-built_in">pb</span>(x);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">dfs</span>(n,<span class="hljs-number">-1</span>,suf);<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(vis));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i<span class="hljs-number">+1</span>&lt;path.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br>x=path[i];t=path[i<span class="hljs-number">+1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> _i=head[x];_i;_i=nex[_i])<br><span class="hljs-keyword">if</span>(v[_i]==t&amp;&amp;d1[x]+w[_i]==d1[t]) vis[(_i<span class="hljs-number">+1</span>)&gt;&gt;<span class="hljs-number">1</span>]=i;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-keyword">if</span>(!(~vis[i]))<br>&#123;<br><span class="hljs-type">int</span> l=pre[a[i]],r=suf[b[i]];<br>ll val=d1[a[i]]+dn[b[i]]+c[i];<br><span class="hljs-keyword">if</span>(l&lt;r) add[l].<span class="hljs-built_in">pb</span>(val),del[r].<span class="hljs-built_in">pb</span>(val);<br>l=pre[b[i]];r=suf[a[i]];<br>val=d1[b[i]]+dn[a[i]]+c[i];<br><span class="hljs-keyword">if</span>(l&lt;r) add[l].<span class="hljs-built_in">pb</span>(val),del[r].<span class="hljs-built_in">pb</span>(val);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i<span class="hljs-number">+1</span>&lt;path.<span class="hljs-built_in">size</span>();i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;add[i].<span class="hljs-built_in">size</span>();j++) st.<span class="hljs-built_in">insert</span>(add[i][j]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;del[i].<span class="hljs-built_in">size</span>();j++) st.<span class="hljs-built_in">erase</span>(st.<span class="hljs-built_in">find</span>(del[i][j]));<br>Del[i]=st.<span class="hljs-built_in">empty</span>()? inf:*st.<span class="hljs-built_in">begin</span>();<br>&#125;<br><span class="hljs-keyword">while</span>(q--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;t,&amp;x);<br><span class="hljs-keyword">if</span>(~vis[t]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">min</span>(Del[vis[t]],d1[n]-c[t]+x));<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">min</span>(d1[n],<span class="hljs-built_in">min</span>(d1[a[t]]+dn[b[t]]+x,d1[b[t]]+dn[a[t]]+x)));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1761D-Carry-Bit"><a href="#CF1761D-Carry-Bit" class="headerlink" title="CF1761D Carry Bit"></a>CF1761D Carry Bit</h2><p>我们考虑进位发生在什么情况下。那就是一段区间他的第一个位置两个都是 $1$ ，剩下的位置至少有一个是 $1$ ，所以一段长度为 $len$ 的区间，他的方案数是 $3^{len-1}$ 。对于没有进制的区间，如果他的上一个区间是有进为的区间，那么他的第一个位置的两个数都是 $0$ ,否则就不是强制两个数都是 $0$ 。对于剩下的位置两个数中至多有一个 $1$ ，方案数就是 $3^{len-1}$ 或者 $3^{len}$ 。</p><p>那么我们考虑没有进位区间的段数。考虑但前被分成了 $i$ 段，然后把 $k$ 个进位放在这些区间。这样只就有了四种情况。</p><ul><li><p>区间的两边都不填数，方案数就是 ${n-k-1\choose i-1}{k-1\choose i-2}\times3^{n-k-i+1}\times3^{k-i+1}$</p></li><li><p>区间的两边只有左边填数，方案数就是 ${n-k-1\choose i-1}{k-1\choose i-1}\times 3^{n-k-i+1}\times3^{k-i}$</p></li><li><p>区间的两边只有右边填数，方案数就是 ${n-k-1\choose i-1}{k-1\choose i-1}\times 3^{n-k-i}\times3^{k-i}$</p></li><li><p>区间的两边都填数，方案数就是 ${n-k-i\choose i-1}{k-1\choose i}\times3^{n-k-i}\times3^{k-i-1}$</p></li></ul><p>然而我赛后 $FST$ 了，没有与处理幂次被卡常了，含泪掉大分，所以就有了这篇题解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e6</span><span class="hljs-number">+5</span>,mod=<span class="hljs-number">1e9</span><span class="hljs-number">+7</span>;<br><span class="hljs-type">int</span> n,k,ans,fac[N],inv[N],pw[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qsm</span><span class="hljs-params">(<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> pw[b];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(x&lt;y||x&lt;<span class="hljs-number">0</span>||y&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span>*fac[x]*inv[y]%mod*inv[x-y]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>pw[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">0</span>]=inv[<span class="hljs-number">1</span>]=fac[<span class="hljs-number">0</span>]=fac[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>pw[<span class="hljs-number">1</span>]=<span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>&#123;<br>fac[i]=<span class="hljs-number">1ll</span>*fac[i<span class="hljs-number">-1</span>]*i%mod;<br>inv[i]=<span class="hljs-number">1ll</span>*(mod-mod/i)*inv[mod%i]%mod;<br>pw[i]=<span class="hljs-number">3ll</span>*pw[i<span class="hljs-number">-1</span>]%mod;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++) inv[i]=<span class="hljs-number">1ll</span>*inv[i<span class="hljs-number">-1</span>]*inv[i]%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br><span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">if</span>(k==n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">qsm</span>(n<span class="hljs-number">-1</span>));<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!k) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">qsm</span>(n));<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n-k;i++)<br>&#123;<br><span class="hljs-type">int</span> g=<span class="hljs-built_in">C</span>(n-k<span class="hljs-number">-1</span>,i<span class="hljs-number">-1</span>);<br>ans=(ans<span class="hljs-number">+1ll</span>*g*<span class="hljs-built_in">C</span>(k<span class="hljs-number">-1</span>,i<span class="hljs-number">-2</span>)%mod*<span class="hljs-built_in">qsm</span>(n-k-i<span class="hljs-number">+1</span>)%mod*<span class="hljs-built_in">qsm</span>(k-i<span class="hljs-number">+1</span>)%mod)%mod;<br>ans=(ans<span class="hljs-number">+1ll</span>*g*<span class="hljs-built_in">C</span>(k<span class="hljs-number">-1</span>,i<span class="hljs-number">-1</span>)%mod*<span class="hljs-built_in">qsm</span>(n-k-i<span class="hljs-number">+1</span>)%mod*<span class="hljs-built_in">qsm</span>(k-i)%mod)%mod;<br>ans=(ans<span class="hljs-number">+1ll</span>*g*<span class="hljs-built_in">C</span>(k<span class="hljs-number">-1</span>,i<span class="hljs-number">-1</span>)%mod*<span class="hljs-built_in">qsm</span>(n-k-i)%mod*<span class="hljs-built_in">qsm</span>(k-i)%mod)%mod;<br>ans=(ans<span class="hljs-number">+1ll</span>*g*<span class="hljs-built_in">C</span>(k<span class="hljs-number">-1</span>,i)%mod*<span class="hljs-built_in">qsm</span>(n-k-i)%mod*<span class="hljs-built_in">qsm</span>(k-i<span class="hljs-number">-1</span>)%mod)%mod;<br><span class="hljs-keyword">if</span>(i<span class="hljs-number">-1</span>&gt;k) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CF1107E-Vasya-and-Binary-String"><a href="#CF1107E-Vasya-and-Binary-String" class="headerlink" title="CF1107E Vasya and Binary String"></a>CF1107E Vasya and Binary String</h2><p>考虑 $dp_{i,j}$ 为 区间 $[i,j]$ 的数全被消完的最大权值。</p><p>但这样子并不好搞，所以我们多加一维。 $dp_{i,j,k}$ 表示区间 $[i,j]$ 和 $j$ 往后 $k$ 个与 $j$ 相同的数被消完的最大值。那么转移就有两种情况。</p><ul><li><p>$dp_{i,j,k}&#x3D;dp_{i,j-1,0}+v_{k+1}$ （把 $[i,j-1]$ 消完再加上 $k+1$ 个数）</p></li><li><p>$dp_{i,j,t}&#x3D;dp_{i,k,t+1}+dp_{k+1,j-1,0}$  （先把 $[k+1,j-1]$ 消完，再消剩下的，要保证 $c_k&#x3D;c_j$ ）</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">105</span>;<br><span class="hljs-type">int</span> n,c[N],sum[N];<br>ll v[N],f[N][N][N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%1d&quot;</span>,&amp;c[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;v[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">+1</span>;j&lt;=n;j++) sum[i]+=(c[i]==c[j]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;i;j++) v[i]=<span class="hljs-built_in">max</span>(v[i],v[j]+v[i-j]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i;i--)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;=n;j++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=i;k&lt;j;k++)<br><span class="hljs-keyword">if</span>(c[j]==c[k])<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t=<span class="hljs-number">0</span>;t&lt;=sum[j];t++)<br>f[i][j][t]=<span class="hljs-built_in">max</span>(f[i][j][t],f[i][k][t<span class="hljs-number">+1</span>]+f[k<span class="hljs-number">+1</span>][j<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=sum[j];k++) f[i][j][k]=<span class="hljs-built_in">max</span>(f[i][j][k],f[i][j<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+v[k<span class="hljs-number">+1</span>]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,f[<span class="hljs-number">1</span>][n][<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mikasa blog 日志</title>
    <link href="/2025/06/22/blog%20%E6%97%A5%E5%BF%97/"/>
    <url>/2025/06/22/blog%20%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<h3 id="6-22"><a href="#6-22" class="headerlink" title="6.22"></a>6.22</h3><p>捣鼓了一下午终于建好了，还没想好要写些什么东西在这里，先把一些以前的东西放了上来。</p><h3 id="6-23"><a href="#6-23" class="headerlink" title="6.23"></a>6.23</h3><div class="note note-success">            <p>Mikasa 哗啦啦啦啦啦</p>          </div><p>把基本东西的都完善了一下，评论没搞成，但想了想还是不搞了。写了第一篇blog——Vector Algebra。</p>]]></content>
    
    
    <categories>
      
      <category>日志</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
